<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<templates>
<template name="BODY_HEADER">
	<![CDATA[#region Header
// Â© 2024 Koninklijke Philips N.V.  All rights reserved.
// Reproduction or transmission in whole or in part, in any form or by any means, 
// electronic, mechanical or otherwise, is prohibited without the prior  written consent of 
// the owner.
// generated file
// from $SOURCEFILE$
// using $TEMPLATESOURCE$
// by $TOOLNAME$
#endregion

namespace Philips.PIC.CommonControls
{
	[global::System.CodeDom.Compiler.GeneratedCodeAttribute("$token:TOOLNAME$", "1")]
	public class PaintAvatar: PatientAvatarBase
    {
]]></template>

<template name="BODY_FOOTER">
		 <![CDATA[

        public void PaintSVG($PaintSignature$)
        {
			Paint_$token:TOPID$(p);
        }
    }
}]]></template>

<template name="HEAD_HEADER"><![CDATA[
// ignore this file
]]></template>

<template name="HEAD_FOOTER"><![CDATA[
]]></template>


<template name="PaintSignature"><![CDATA[PaintAvatarInfo p]]></template>


<template name="Move"><![CDATA[            path.Move($X$f, $Y$f);
]]></template>
<template name="Line"><![CDATA[            path.Line($X$f, $Y$f);
]]></template>
<template name="Rect"><![CDATA[            // path.Rect($X1$f, $Y1$f,
                       // $X2$f, $Y2$f);
]]></template>
<template name="Quad"><![CDATA[            path.Quad($X1$f, $Y1$f,
                       $X2$f, $Y2$f);
]]></template>
<template name="Cubic"><![CDATA[            path.Cubic($X1$f, $Y1$f, 
                       $X2$f, $Y2$f, 
		               $X3$f, $Y3$f);
]]></template>
<template name="Close"><![CDATA[            path.Close();
]]></template>


<!--LineFeed-->
<template name="LF">
</template>

<!--Semicolon LineFeed-->
<template name="SLF">;
</template>

<!--Comma LineFeed-->
<template name="CLF">,
</template>

<template name="CLF">,
</template>

<template name="FILL_DEFAULT">none</template>

<template name="PointDef">
	<![CDATA[
        private void SetPathData_$token:ID$(IRenderPath path)
        {   // Label: $NAME$
$ELEMENTS$
        }
]]></template>

<template name="MemberName"><![CDATA[// $MEMBER_NAME$]]></template>

<template name="pushcolor">int colorWas = _patientAvatarRenderer.FillColor;
             _patientAvatarRenderer.FillColor = 0x$onlyhex:fill$;
</template>
<template name="popcolor">
             _patientAvatarRenderer.FillColor = colorWas;
</template>


<template name="pushtransformation">
	       TransformMatrix transformMatrixWas =_patientAvatarRenderer.transformation;
		   PushMatrix($TRANSFORM$);
</template>
<template name="poptransformation">            _patientAvatarRenderer.transformation = transformMatrixWas;</template>

<template name="PaintPush">$nonempty TRANSFORM:pushtransformation$$nonempty fill:pushcolor$$nonempty opacity:pushopacity$</template>
<template name="PaintPop">$nonempty TRANSFORM:poptransformation$$nonempty fill:popcolor$$nonempty opacity:popopacity$</template>
<template name="PaintPushNoColor">$nonempty TRANSFORM:pushtransformation$$nonempty opacity:pushopacity$</template>
<template name="PaintPopNoColor">$nonempty TRANSFORM:poptransformation$$nonempty opacity:popopacity$</template>


	<!-- ======================================================  -->
<skill name="Default">
  <path>
    <body>
	<![CDATA[

        private void Paint_$token:ID$($PaintSignature$) //Path: $NAME$
        {
            $nonempty TRANSFORM:pushtransformation$
            $nonempty fill:pushcolor$
            var tempRenderPath = new TemporaryRenderPath();
			SetPathData_$token:ID$(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
$nonempty fill:popcolor$
$nonempty TRANSFORM:poptransformation$
        }
		
		private void SetPathColor_$token:ID$(ColorReceiver colorReceiver)
		{
			colorReceiver.FillColor = 0x0$onlyhex:fill$;
		}
		//----------------------------------------
]]></body>

  </path>

  <group>
    <member name="paintlist" separator="#LF">		    Paint_$token:MEMBER_ID$(p);$recursive:MemberName$</member>
    <body>
			<![CDATA[

        //Group: $NAME$
        private void Paint_$token:ID$($PaintSignature$)
        {
$recursive:PaintPush$$paintlist$
$recursive:PaintPop$        }
        //----------------------------------------
		private void SetPathData_$token:ID$(IRenderPath path)
		{ // not usable for groups
		}
		private void SetPathColor_$token:ID$(ColorReceiver colorReceiver)
		{ // not usable for groups
		}
]]></body>
  </group>

  <use>
    <body><![CDATA[

        private void Paint_$token:ID$($PaintSignature$) //Use: $NAME$
        {
$recursive:PaintPush$            Paint_$token:LINK$(p);
$recursive:PaintPop$        }
		private void SetPathData_$token:ID$(IRenderPath path)
        {
            SetPathData_$token:LINK$(path);
        }
		private void SetPathColor_$token:ID$(ColorReceiver colorReceiver)
		{
			SetPathColor_$token:LINK$(colorReceiver);
		}
        //----------------------------------------
]]></body>
  </use>

</skill>

<!-- ======================================================  -->

<skill name="HideAlways">
  <template name="hidden"><![CDATA[

        private void Paint_$token:ID$($PaintSignature$) // $NAME$
        {
            // intentionally left blank: always hidden
        }
        //----------------------------------------
]]></template>

  <path><body>$recursive:hidden$</body></path>
  <group><body>$recursive:hidden$</body></group>
  <use><body>$recursive:hidden$</body></use>
</skill>
<!-- ======================================================  -->

<skill name="Visibility">
  <path>
    <body><![CDATA[

		private void Paint_$token:ID$($PaintSignature$) //Path: $NAME$
        {
            if (IsVisible(p.TopicInfo.$SKILL_PARAMETERS$))
            {
			    // todo: color, matrix
                var tempRenderPath = new TemporaryRenderPath();
                SetPathData_$token:ID$(tempRenderPath);
                _patientAvatarRenderer.Fill(p,tempRenderPath);
            }
		}
        //----------------------------------------
]]></body>

  </path>

	<group>
		<member name="paintlist" separator="#LF">		        Paint_$token:MEMBER_ID$(p);$recursive:MemberName$</member>
		<body><![CDATA[

        private void Paint_$token:ID$($PaintSignature$) //Group: $NAME$
        {
		    if (IsVisible(p.TopicInfo.$SKILL_PARAMETERS$))
		    {
			    // todo: color, matrix
$paintlist$
            }
        }
		private void SetPathData_$token:ID$(IRenderPath path)
		{ // not usable for groups
		}
		private void SetPathColor_$token:ID$(ColorReceiver colorReceiver)
		{ // not usable for groups
		}
        //----------------------------------------
]]></body>
	</group>

	<use>
		<body><![CDATA[
        private void Paint_$token:ID$($PaintSignature$) //Use: $NAME$
        {
		    if (IsVisible(p.TopicInfo.$SKILL_PARAMETERS$))
		    {
               // todo
            }
        }
        //----------------------------------------
]]></body>
  </use>

</skill>

<!-- ======================================================  -->
<skill name="Animated">
  <path>
    <body>
<![CDATA[

        //Path ($NAME$) is not applicable for skill animated Paint_$token:ID$($PaintSignature$)
]]></body>

  </path>

  <group>
    <member name="pathlist" separator="#LF">		    SetPathData_$token:MEMBER_ID$($token:MEMBER_NAME$Path);</member>
	  <member name="colorlist" separator="#LF">		    SetPathColor_$token:MEMBER_ID$($token:MEMBER_NAME$Color);</member>
    <body><![CDATA[
        //Group: $NAME$
        private void Paint_$token:ID$($PaintSignature$)
        {
			ColorReceiver MinColor = new ColorReceiver();
			ColorReceiver MaxColor = new ColorReceiver();
			ColorReceiver TimeColor = new ColorReceiver();
$colorlist$
			_patientAvatarRenderer.FillColor = MinColor.FillColor;
		    IRenderPath MinPath = new TemporaryRenderPath();
		    IRenderPath MaxPath = new TemporaryRenderPath();
		    IRenderPath TimePath = new TemporaryRenderPath();
$pathlist$
			_patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.$SKILL_PARAMETERS$);
        }
        //----------------------------------------
]]></body>
  </group>

  <use>
    <body><![CDATA[//This is not applicable for skill animated Paint_$token:ID$($PaintSignature$) 
//----------------------------------------
]]></body>
  </use>

</skill>

<skill name="Flying">
		<group>
			<member name="ps" separator="#LF" sort="P"><![CDATA[        // SetPathData_$token:MEMBER_ID$(P[$NO$]); // $MEMBER_NAME$]]></member>
			<member name="members" separator="#LF" sort="!P"><![CDATA[        // SetPathData_$token:MEMBER_ID$($token:MEMBER_NAME$);]]></member>
			<body><![CDATA[ 
            
            private void Paint_$token:ID$($PaintSignature$)
            {
                // Transformation was = p.trans;
                // p.SetTransformation({0.120211,0,0,0.120211,75.112,210.67});
                // PathIF P[$ps_count$];
                // PathIF Time;
                // $ps$
$members$
                // p.PaintInterpolated(P,$ps_count$,Time,PulseRateHeart);//, jumpsback);    
                // p.trans = was; 
            }
            //----------------------------------------
]]>
			</body>
		</group>
</skill>

<skill name="StateControl">
		<template name="impl">
			<![CDATA[
                private void Paint_$token:ID$($PaintSignature$)
                {
                    // always hidden
                }
                //----------------------------------------
]]>
		</template>

		<path>
			<body>$recursive:impl$</body>
		</path>
		<group>
			<body>$recursive:impl$</body>
		</group>
		<use>
			<body>$recursive:impl$</body>
		</use>
</skill>

<skill name = "ColorFrom">
	<path>
		<body>
			<![CDATA[
        private void Paint_$token:ID$($PaintSignature$) //Path: $NAME$
        {
		    int colorWas = _patientAvatarRenderer.FillColor;
            SetColorFrom(_patientAvatarRenderer, p.TopicInfo.$SKILL_PARAMETERS$);
            _patientAvatarRenderer.FillColor = 0x$onlyhex:fill$;
			var tempRenderPath = new TemporaryRenderPath();
            SetPathData_$token:ID$(tempRenderPath);
			
            _patientAvatarRenderer.Fill(p,tempRenderPath);
            _patientAvatarRenderer.FillColor = colorWas;
		}
		private void SetPathColor_$token:ID$(ColorReceiver colorReceiver)
		{
		    // todo? use ColorFrom Topic
			colorReceiver.FillColor = 0x$onlyhex:fill$;
		}
		//----------------------------------------
]]>
		</body>

	</path>
	<use>
			<body><![CDATA[
        //Use (for ColorFrom)
        private void Paint_$token:ID$($PaintSignature$)
        {
            $recursive:PaintPushNoColor$
		    int colorWas = _patientAvatarRenderer.FillColor;
            SetColorFrom(_patientAvatarRenderer, p.TopicInfo.$SKILL_PARAMETERS$);
            Paint_$token:LINK$(p);
            _patientAvatarRenderer.FillColor = colorWas;
$recursive:PaintPopNoColor$
        }
		private void SetPathData_$token:ID$(IRenderPath path)
        {
            SetPathData_$token:LINK$(path);
        }

		private void SetPathColor_$token:ID$(ColorReceiver colorReceiver)
		{
			// todo
		}
        //----------------------------------------
]]></body>
		</use>
	</skill>
	<skill name = "ShadowColorFrom">
		<path>
			<body><![CDATA[
        private void Paint_$token:ID$($PaintSignature$) //Path: $NAME$
        {
		    int colorWas = _patientAvatarRenderer.FillColor;
            SetShadowColorFrom(_patientAvatarRenderer, p.TopicInfo.$SKILL_PARAMETERS$);
            _patientAvatarRenderer.FillColor = 0x$onlyhex:fill$;
			var tempRenderPath = new TemporaryRenderPath();
            SetPathData_$token:ID$(tempRenderPath);
			
            _patientAvatarRenderer.Fill(p,tempRenderPath);
            _patientAvatarRenderer.FillColor = colorWas;
		}
		private void SetPathColor_$token:ID$(ColorReceiver colorReceiver)
		{
		    // todo? use ShadowColorFrom Topic
			colorReceiver.FillColor = 0x$onlyhex:fill$;
		}
		//----------------------------------------
]]>
			</body>

		</path>
		<use>
			<body>
				<![CDATA[
        //Use (for ShadowColorFrom)
        private void Paint_$token:ID$($PaintSignature$)
        {
            $recursive:PaintPushNoColor$
		    int colorWas = _patientAvatarRenderer.FillColor;
            SetShadowColorFrom(_patientAvatarRenderer, p.TopicInfo.$SKILL_PARAMETERS$);
            Paint_$token:LINK$(p);
            _patientAvatarRenderer.FillColor = colorWas;
$recursive:PaintPopNoColor$
        }
		private void SetPathColor_$token:ID$(ColorReceiver colorReceiver)
		{
			// todo
		}
        //----------------------------------------
]]>
			</body>
		</use>
	</skill>


	<skill name="ShowAlways" alias="Default" />
<skill name="AlwaysHide" alias="HideAlways" />

</templates>