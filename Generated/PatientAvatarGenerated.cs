#region Header
// Â© 2024 Koninklijke Philips N.V.  All rights reserved.
// Reproduction or transmission in whole or in part, in any form or by any means, 
// electronic, mechanical or otherwise, is prohibited without the prior  written consent of 
// the owner.
// generated file
// from .\wuschel.svg
// using .\csharp.xml
// by C:\Users\dep05119\Documents\Code\svgcompiler\svgconverter.exe
#endregion

namespace Philips.PIC.CommonControls
{
  [global::System.CodeDom.Compiler.GeneratedCodeAttribute("C__Users_dep05119_Documents_Code_svgcompiler_svgconverter_exe", "1")]
  public class PaintAvatar: PatientAvatarBase
  {

    private void SetPathData_rect3267(IRenderPath path)
    { // Label: 4states
        path.Move(587.059125f, 197.790005f);
        path.Line(526.708268f, 197.790005f);
        path.Cubic(523.883951f, 197.790005f, 
                   521.464475f, 200.209481f, 
                   521.464475f, 203.033798f);
        path.Line(521.464475f, 254.645001f);
        path.Cubic(521.464475f, 257.469318f, 
                   523.883951f, 259.888794f, 
                   526.708268f, 259.888794f);
        path.Line(587.059125f, 259.888794f);
        path.Cubic(589.883442f, 259.888794f, 
                   592.302918f, 257.469318f, 
                   592.302918f, 254.645001f);
        path.Line(592.302918f, 203.033798f);
        path.Cubic(592.302918f, 200.209481f, 
                   589.883442f, 197.790005f, 
                   587.059125f, 197.790005f);
        path.Close();
        path.Move(587.059125f, 198.829315f);
        path.Cubic(589.452946f, 198.829315f, 
                   591.263608f, 200.639977f, 
                   591.263608f, 203.033798f);
        path.Line(591.263608f, 254.645001f);
        path.Cubic(591.263608f, 257.038822f, 
                   589.452946f, 258.849484f, 
                   587.059125f, 258.849484f);
        path.Line(526.708268f, 258.849484f);
        path.Cubic(524.314447f, 258.849484f, 
                   522.503785f, 257.038822f, 
                   522.503785f, 254.645001f);
        path.Line(522.503785f, 203.033798f);
        path.Cubic(522.503785f, 200.639977f, 
                   524.314447f, 198.829315f, 
                   526.708268f, 198.829315f);
        path.Line(587.059125f, 198.829315f);
        path.Close();
    }

    private void SetPathData_rect3269(IRenderPath path)
    { // Label: stateback
        path.Move(585.877186f, 215.282680f);
        path.Cubic(588.095365f, 215.282680f, 
                   589.893554f, 217.080869f, 
                   589.893554f, 219.299048f);
        path.Line(589.893554f, 221.313814f);
        path.Cubic(589.893554f, 223.531993f, 
                   588.095365f, 225.330182f, 
                   585.877186f, 225.330182f);
        path.Line(533.745558f, 225.330182f);
        path.Cubic(531.527379f, 225.330182f, 
                   529.729190f, 223.531993f, 
                   529.729190f, 221.313814f);
        path.Line(529.729190f, 219.299048f);
        path.Cubic(529.729190f, 217.080869f, 
                   531.527379f, 215.282680f, 
                   533.745558f, 215.282680f);
        path.Close();
    }

    private void SetPathData_circle3271(IRenderPath path)
    { // Label: 
        path.Move(534.883360f, 224.290906f);
        path.Cubic(537.067611f, 224.290906f, 
                   538.838296f, 222.520221f, 
                   538.838296f, 220.335970f);
        path.Cubic(538.838296f, 218.151719f, 
                   537.067611f, 216.381034f, 
                   534.883360f, 216.381034f);
        path.Cubic(532.699109f, 216.381034f, 
                   530.928424f, 218.151719f, 
                   530.928424f, 220.335970f);
        path.Cubic(530.928424f, 222.520221f, 
                   532.699109f, 224.290906f, 
                   534.883360f, 224.290906f);
        path.Close();
    }

    private void SetPathData_circle3273(IRenderPath path)
    { // Label: StateActive
        path.Move(534.883300f, 222.989211f);
        path.Cubic(536.332540f, 222.989211f, 
                   537.507381f, 221.814370f, 
                   537.507381f, 220.365130f);
        path.Cubic(537.507381f, 218.915890f, 
                   536.332540f, 217.741049f, 
                   534.883300f, 217.741049f);
        path.Cubic(533.434060f, 217.741049f, 
                   532.259219f, 218.915890f, 
                   532.259219f, 220.365130f);
        path.Cubic(532.259219f, 221.814370f, 
                   533.434060f, 222.989211f, 
                   534.883300f, 222.989211f);
        path.Close();
    }

    private void SetPathData_rect3281(IRenderPath path)
    { // Label: toprect
        path.Move(587.111801f, 200.341250f);
        path.Cubic(588.546789f, 200.341250f, 
                   589.710077f, 201.504538f, 
                   589.710077f, 202.939526f);
        path.Line(589.710077f, 211.561078f);
        path.Cubic(589.710077f, 212.996066f, 
                   588.546789f, 214.159354f, 
                   587.111801f, 214.159354f);
        path.Line(526.760936f, 214.159354f);
        path.Cubic(525.325948f, 214.159354f, 
                   524.162660f, 212.996066f, 
                   524.162660f, 211.561078f);
        path.Line(524.162660f, 202.939526f);
        path.Cubic(524.162660f, 201.504538f, 
                   525.325948f, 200.341250f, 
                   526.760936f, 200.341250f);
        path.Close();
    }

    private void SetPathData_rect1399_3_7_4_54_07_5(IRenderPath path)
    { // Label: 3states
        path.Move(587.282954f, 197.835705f);
        path.Line(526.292812f, 197.835705f);
        path.Cubic(523.716874f, 197.835705f, 
                   521.510175f, 200.042404f, 
                   521.510175f, 202.618342f);
        path.Line(521.510175f, 244.708585f);
        path.Cubic(521.510175f, 247.284523f, 
                   523.716874f, 249.491222f, 
                   526.292812f, 249.491222f);
        path.Line(587.282954f, 249.491222f);
        path.Cubic(589.858892f, 249.491222f, 
                   592.065591f, 247.284523f, 
                   592.065591f, 244.708585f);
        path.Line(592.065591f, 202.618342f);
        path.Cubic(592.065591f, 200.042404f, 
                   589.858892f, 197.835705f, 
                   587.282954f, 197.835705f);
        path.Close();
        path.Move(587.282954f, 198.783615f);
        path.Cubic(589.466255f, 198.783615f, 
                   591.117681f, 200.435041f, 
                   591.117681f, 202.618342f);
        path.Line(591.117681f, 244.708585f);
        path.Cubic(591.117681f, 246.891886f, 
                   589.466255f, 248.543312f, 
                   587.282954f, 248.543312f);
        path.Line(526.292812f, 248.543312f);
        path.Cubic(524.109511f, 248.543312f, 
                   522.458085f, 246.891886f, 
                   522.458085f, 244.708585f);
        path.Line(522.458085f, 202.618342f);
        path.Cubic(522.458085f, 200.435041f, 
                   524.109511f, 198.783615f, 
                   526.292812f, 198.783615f);
        path.Line(587.282954f, 198.783615f);
        path.Close();
    }

    private void SetPathData_rect2752(IRenderPath path)
    { // Label: 6states
        path.Move(587.282954f, 197.835705f);
        path.Line(526.292812f, 197.835705f);
        path.Cubic(523.716874f, 197.835705f, 
                   521.510175f, 200.042404f, 
                   521.510175f, 202.618342f);
        path.Line(521.510175f, 277.637498f);
        path.Cubic(521.510175f, 280.213436f, 
                   523.716874f, 282.420135f, 
                   526.292812f, 282.420135f);
        path.Line(587.282954f, 282.420135f);
        path.Cubic(589.858892f, 282.420135f, 
                   592.065591f, 280.213436f, 
                   592.065591f, 277.637498f);
        path.Line(592.065591f, 202.618342f);
        path.Cubic(592.065591f, 200.042404f, 
                   589.858892f, 197.835705f, 
                   587.282954f, 197.835705f);
        path.Close();
        path.Move(587.282954f, 198.783615f);
        path.Cubic(589.466255f, 198.783615f, 
                   591.117681f, 200.435041f, 
                   591.117681f, 202.618342f);
        path.Line(591.117681f, 277.637498f);
        path.Cubic(591.117681f, 279.820799f, 
                   589.466255f, 281.472225f, 
                   587.282954f, 281.472225f);
        path.Line(526.292812f, 281.472225f);
        path.Cubic(524.109511f, 281.472225f, 
                   522.458085f, 279.820799f, 
                   522.458085f, 277.637498f);
        path.Line(522.458085f, 202.618342f);
        path.Cubic(522.458085f, 200.435041f, 
                   524.109511f, 198.783615f, 
                   526.292812f, 198.783615f);
        path.Line(587.282954f, 198.783615f);
        path.Close();
    }

    private void SetPathData_path9(IRenderPath path)
    { // Label: standard
        path.Move(64.007999f, 234.661520f);
        path.Line(61.171666f, 252.319810f);
        path.Cubic(61.162766f, 252.651840f, 
                   61.230666f, 252.981440f, 
                   61.370103f, 253.282900f);
        path.Line(68.699061f, 265.250000f);
        path.Line(63.963020f, 273.343610f);
        path.Cubic(63.399948f, 274.651170f, 
                   63.466360f, 275.882460f, 
                   64.337044f, 276.817380f);
        path.Cubic(65.741637f, 278.136440f, 
                   67.742179f, 277.994090f, 
                   69.103874f, 276.965750f);
        path.Line(78.729417f, 269.692360f);
        path.Cubic(79.523167f, 268.898610f, 
                   79.726896f, 267.493670f, 
                   79.038979f, 265.866480f);
        path.Line(75.406250f, 254.952420f);
        path.Line(78.774396f, 249.052210f);
        path.Cubic(79.283352f, 248.265530f, 
                   79.829718f, 247.901700f, 
                   80.631681f, 247.889340f);
        path.Cubic(81.424369f, 247.916340f, 
                   82.055619f, 248.305030f, 
                   82.486500f, 249.155400f);
        path.Line(86.719834f, 257.415690f);
        path.Line(85.989584f, 269.292840f);
        path.Cubic(85.261880f, 270.800500f, 
                   84.902191f, 272.912750f, 
                   86.002814f, 273.692860f);
        path.Line(95.742126f, 280.185730f);
        path.Cubic(97.188745f, 281.200100f, 
                   100.083940f, 281.920340f, 
                   101.563680f, 280.372220f);
        path.Cubic(103.005680f, 278.725100f, 
                   102.130330f, 277.041820f, 
                   101.457120f, 276.021190f);
        path.Line(97.242314f, 269.451590f);
        path.Line(99.819355f, 257.434210f);
        path.Cubic(99.882155f, 257.107310f, 
                   99.867665f, 256.770260f, 
                   99.777025f, 256.449960f);
        path.Line(97.223796f, 242.927100f);
        path.Line(97.193816f, 223.503760f);
        path.Cubic(97.541061f, 223.643780f, 
                   104.809410f, 226.692270f, 
                   104.809410f, 226.692270f);
        path.Cubic(104.809410f, 226.692270f, 
                   107.817720f, 235.645770f, 
                   107.899740f, 235.828330f);
        path.Cubic(108.647850f, 237.806810f, 
                   111.285610f, 238.901810f, 
                   112.950630f, 238.897500f);
        path.Cubic(113.934620f, 238.880000f, 
                   114.897990f, 238.612330f, 
                   115.749930f, 238.119630f);
        path.Cubic(117.525280f, 237.056000f, 
                   118.689450f, 234.941980f, 
                   118.578320f, 232.970830f);
        path.Cubic(118.525420f, 232.073900f, 
                   113.152250f, 217.296140f, 
                   113.138490f, 217.265170f);
        path.Cubic(112.446440f, 215.707730f, 
                   111.478990f, 215.342620f, 
                   111.048280f, 215.148500f);
        path.Line(88.926464f, 205.263670f);
        path.Cubic(88.791788f, 205.179270f, 
                   87.872271f, 204.580580f, 
                   87.688965f, 203.556110f);
        path.Cubic(87.602185f, 203.071070f, 
                   87.346484f, 202.074020f, 
                   88.085089f, 201.824080f);
        path.Cubic(95.371236f, 199.358440f, 
                   100.670250f, 193.085950f, 
                   100.624070f, 185.394680f);
        path.Cubic(100.577870f, 177.703460f, 
                   95.343462f, 171.014480f, 
                   87.888978f, 169.118180f);
        path.Cubic(80.434494f, 167.221890f, 
                   72.640056f, 170.596560f, 
                   68.924284f, 177.330790f);
        path.Cubic(65.208484f, 184.065080f, 
                   67.023367f, 191.965750f, 
                   72.088380f, 197.754790f);
        path.Cubic(73.312718f, 199.154140f, 
                   72.775170f, 200.857370f, 
                   72.593570f, 201.876110f);
        path.Cubic(72.105324f, 204.615080f, 
                   69.638337f, 205.025540f, 
                   69.638337f, 205.025540f);
        path.Line(46.037504f, 212.002600f);
        path.Cubic(45.530374f, 212.120570f, 
                   44.585285f, 213.605650f, 
                   44.881275f, 214.860100f);
        path.Line(48.585441f, 230.999690f);
        path.Cubic(49.334765f, 233.404940f, 
                   51.913274f, 234.725810f, 
                   54.303087f, 233.928630f);
        path.Cubic(55.714758f, 233.329570f, 
                   57.034516f, 232.261690f, 
                   57.197629f, 230.724520f);
        path.Cubic(57.245259f, 227.991380f, 
                   56.610254f, 221.773670f, 
                   56.610254f, 221.773670f);
        path.Cubic(56.610254f, 221.773670f, 
                   63.339435f, 220.210310f, 
                   64.000893f, 219.929860f);
        path.Close();
    }

    private void SetPathData_path3852(IRenderPath path)
    { // Label: minimum
        path.Move(66.627240f, 234.521200f);
        path.Line(63.697363f, 251.548070f);
        path.Cubic(63.688463f, 251.880100f, 
                   63.756363f, 252.209700f, 
                   63.895800f, 252.511160f);
        path.Line(71.484576f, 265.108030f);
        path.Line(66.642577f, 273.211340f);
        path.Cubic(66.210492f, 273.934450f, 
                   65.410568f, 274.886220f, 
                   66.100500f, 275.523360f);
        path.Cubic(66.694695f, 276.072080f, 
                   67.902465f, 275.084150f, 
                   68.448298f, 274.670220f);
        path.Line(75.792338f, 269.100810f);
        path.Cubic(76.586088f, 268.307060f, 
                   77.233226f, 267.405040f, 
                   76.545309f, 265.777850f);
        path.Line(72.670078f, 254.671790f);
        path.Line(76.693035f, 247.672430f);
        path.Cubic(77.201991f, 246.885750f, 
                   79.736174f, 245.282460f, 
                   80.538137f, 245.270100f);
        path.Cubic(81.330825f, 245.297100f, 
                   84.183753f, 246.925250f, 
                   84.614634f, 247.775620f);
        path.Line(89.431813f, 256.522720f);
        path.Line(88.057170f, 269.421020f);
        path.Cubic(87.879757f, 271.085680f, 
                   87.424347f, 271.952670f, 
                   88.524969f, 272.732780f);
        path.Line(97.196988f, 278.356730f);
        path.Cubic(98.240156f, 279.033240f, 
                   99.591381f, 280.186450f, 
                   100.392740f, 279.313330f);
        path.Cubic(101.003070f, 278.648340f, 
                   99.530530f, 277.321830f, 
                   99.133215f, 276.682230f);
        path.Line(94.711462f, 269.564080f);
        path.Line(97.313972f, 257.409410f);
        path.Cubic(97.376772f, 257.082510f, 
                   97.362282f, 256.745460f, 
                   97.271642f, 256.425160f);
        path.Line(94.710253f, 243.224760f);
        path.Line(94.696803f, 219.749980f);
        path.Cubic(95.044048f, 219.890000f, 
                   106.828120f, 224.819540f, 
                   106.828120f, 224.819540f);
        path.Cubic(106.828120f, 224.819540f, 
                   109.754710f, 233.582940f, 
                   109.802120f, 233.706370f);
        path.Cubic(110.303220f, 235.010850f, 
                   112.125210f, 236.387280f, 
                   113.225210f, 236.384430f);
        path.Cubic(113.875290f, 236.372930f, 
                   114.362900f, 236.229110f, 
                   114.925740f, 235.903600f);
        path.Cubic(116.098630f, 235.200910f, 
                   115.955180f, 233.758350f, 
                   115.880700f, 232.456170f);
        path.Cubic(115.846800f, 231.863550f, 
                   112.447500f, 222.580570f, 
                   111.713160f, 220.452420f);
        path.Cubic(110.672840f, 217.437550f, 
                   107.445610f, 216.288940f, 
                   107.014890f, 216.094820f);
        path.Line(89.104989f, 208.063590f);
        path.Cubic(88.239306f, 207.640660f, 
                   85.663478f, 205.840770f, 
                   85.519312f, 203.974790f);
        path.Cubic(85.473142f, 203.377170f, 
                   85.232534f, 200.552950f, 
                   87.700618f, 199.752520f);
        path.Cubic(94.283816f, 197.617500f, 
                   98.294726f, 191.922430f, 
                   98.176662f, 185.493900f);
        path.Cubic(98.050007f, 178.597560f, 
                   93.165806f, 173.065640f, 
                   87.392877f, 171.598650f);
        path.Cubic(81.285718f, 170.046730f, 
                   74.735403f, 172.187890f, 
                   71.216113f, 178.406550f);
        path.Cubic(67.786619f, 184.466540f, 
                   69.355629f, 191.312760f, 
                   74.060338f, 196.885130f);
        path.Cubic(75.259830f, 198.305840f, 
                   75.492255f, 201.200280f, 
                   74.642193f, 203.099050f);
        path.Cubic(73.491041f, 205.670370f, 
                   70.383772f, 207.495970f, 
                   67.840815f, 208.116290f);
        path.Line(50.081299f, 213.266790f);
        path.Cubic(49.574169f, 213.384760f, 
                   47.248922f, 214.389710f, 
                   47.544912f, 215.644160f);
        path.Line(50.843980f, 229.519250f);
        path.Cubic(51.336057f, 231.526940f, 
                   52.642456f, 231.803530f, 
                   53.235273f, 231.712660f);
        path.Cubic(54.096867f, 231.580580f, 
                   54.649929f, 230.885760f, 
                   54.650003f, 229.815260f);
        path.Cubic(54.650192f, 227.081710f, 
                   53.967791f, 219.989290f, 
                   53.967791f, 219.989290f);
        path.Cubic(53.967791f, 219.989290f, 
                   65.845751f, 216.957990f, 
                   66.507209f, 216.677540f);
        path.Close();
    }

    private void SetPathData_path10268(IRenderPath path)
    { // Label: outside
        path.Move(59.937951f, 233.086870f);
        path.Line(51.727993f, 250.502310f);
        path.Cubic(50.852760f, 251.543340f, 
                   51.005116f, 253.204900f, 
                   51.826203f, 254.605820f);
        path.Line(57.589843f, 265.361330f);
        path.Line(54.362615f, 272.223590f);
        path.Cubic(53.533315f, 273.986980f, 
                   54.817800f, 281.562530f, 
                   58.678864f, 284.517260f);
        path.Cubic(61.522280f, 286.693220f, 
                   67.988732f, 288.487510f, 
                   70.996058f, 286.536520f);
        path.Line(79.822265f, 280.810550f);
        path.Cubic(80.357328f, 279.984460f, 
                   82.998640f, 268.326590f, 
                   82.386394f, 266.708860f);
        path.Line(81.241054f, 257.078460f);
        path.Line(80.641941f, 253.204910f);
        path.Cubic(80.648741f, 252.918310f, 
                   80.644841f, 252.689560f, 
                   80.663431f, 252.539290f);
        path.Cubic(80.658231f, 252.694420f, 
                   80.648391f, 252.918560f, 
                   80.641941f, 253.204910f);
        path.Line(81.241054f, 257.078460f);
        path.Line(82.386394f, 266.708860f);
        path.Cubic(82.593780f, 268.684060f, 
                   80.091087f, 280.715160f, 
                   79.822265f, 280.810550f);
        path.Line(90.455077f, 288.117190f);
        path.Cubic(94.751294f, 291.648500f, 
                   104.302540f, 292.035870f, 
                   108.745230f, 286.703320f);
        path.Cubic(110.872310f, 284.276620f, 
                   112.853200f, 277.660030f, 
                   111.545220f, 275.503510f);
        path.Line(107.384770f, 267.611330f);
        path.Line(109.527500f, 257.264380f);
        path.Cubic(109.590300f, 256.937480f, 
                   109.108090f, 253.393200f, 
                   109.017450f, 253.072900f);
        path.Line(104.974610f, 241.056210f);
        path.Line(100.735130f, 228.581880f);
        path.Cubic(101.082380f, 228.721900f, 
                   100.735130f, 228.581880f, 
                   100.735130f, 228.581880f);
        path.Cubic(100.735130f, 228.581880f, 
                   104.892590f, 240.873650f, 
                   104.974610f, 241.056210f);
        path.Cubic(105.722720f, 243.034690f, 
                   108.185000f, 248.295910f, 
                   114.955140f, 248.251930f);
        path.Cubic(118.085880f, 248.231630f, 
                   123.875330f, 245.187000f, 
                   125.572080f, 242.930480f);
        path.Cubic(127.512230f, 240.350260f, 
                   128.249420f, 235.711470f, 
                   128.066380f, 231.968570f);
        path.Cubic(127.779120f, 226.094600f, 
                   122.492000f, 215.229380f, 
                   122.492000f, 215.229380f);
        path.Cubic(121.827090f, 212.671770f, 
                   118.729860f, 208.584370f, 
                   117.227960f, 207.967770f);
        path.Line(106.332380f, 202.624390f);
        path.Cubic(106.197710f, 202.539990f, 
                   105.311600f, 202.375610f, 
                   105.128290f, 201.351140f);
        path.Cubic(105.041490f, 200.866100f, 
                   105.261230f, 200.427970f, 
                   105.701600f, 199.784480f);
        path.Cubic(108.577800f, 195.581580f, 
                   109.967830f, 191.932910f, 
                   110.178950f, 185.394680f);
        path.Cubic(110.555280f, 173.739910f, 
                   102.315060f, 163.349470f, 
                   88.623963f, 159.563290f);
        path.Cubic(81.210329f, 157.513100f, 
                   67.139744f, 161.225770f, 
                   61.641183f, 171.049960f);
        path.Cubic(57.157362f, 179.061130f, 
                   56.217443f, 188.838120f, 
                   59.307260f, 194.501000f);
        path.Cubic(59.973239f, 195.721580f, 
                   60.553060f, 196.166650f, 
                   60.337899f, 196.975800f);
        path.Cubic(60.202823f, 197.483780f, 
                   58.770602f, 198.302160f, 
                   58.770602f, 198.302160f);
        path.Line(40.691630f, 203.489450f);
        path.Cubic(37.928496f, 204.327730f, 
                   34.664805f, 208.621550f, 
                   34.991819f, 213.830500f);
        path.Line(39.865766f, 235.209190f);
        path.Cubic(40.435355f, 237.902020f, 
                   46.063285f, 242.624900f, 
                   49.784563f, 243.111750f);
        path.Cubic(55.266116f, 244.024150f, 
                   59.278752f, 235.382220f, 
                   59.937950f, 233.086870f);
        path.Cubic(59.985580f, 230.353730f, 
                   60.295516f, 223.474560f, 
                   60.295516f, 223.474560f);
        path.Cubic(60.295516f, 223.474560f, 
                   59.634058f, 223.755010f, 
                   60.295516f, 223.474560f);
        path.Close();
    }

    private void SetPathData_path11016(IRenderPath path)
    { // Label: absmini
        path.Move(67.189480f, 234.885000f);
        path.Line(64.473177f, 251.551300f);
        path.Cubic(64.464277f, 251.883330f, 
                   64.532177f, 252.212930f, 
                   64.671614f, 252.514390f);
        path.Line(72.349861f, 265.295120f);
        path.Line(67.644777f, 272.979830f);
        path.Cubic(67.465159f, 273.273200f, 
                   67.141679f, 273.663780f, 
                   67.423417f, 273.923950f);
        path.Cubic(67.666059f, 274.148030f, 
                   68.158639f, 273.743780f, 
                   68.382152f, 273.575570f);
        path.Line(74.899369f, 268.670860f);
        path.Cubic(75.693119f, 267.877110f, 
                   76.340257f, 266.975090f, 
                   75.652340f, 265.347900f);
        path.Line(71.968495f, 254.484700f);
        path.Line(76.412402f, 246.994230f);
        path.Cubic(77.086723f, 246.108330f, 
                   78.783514f, 244.963960f, 
                   80.538137f, 244.778990f);
        path.Cubic(82.015108f, 244.623290f, 
                   84.377935f, 246.073390f, 
                   85.162201f, 247.525220f);
        path.Line(90.013628f, 256.424680f);
        path.Line(88.945841f, 269.818580f);
        path.Cubic(88.852701f, 270.986820f, 
                   88.502834f, 271.590860f, 
                   89.273324f, 272.136980f);
        path.Line(96.998551f, 277.366030f);
        path.Cubic(97.563810f, 277.748640f, 
                   98.313053f, 278.370530f, 
                   98.752992f, 277.891190f);
        path.Cubic(99.088058f, 277.526120f, 
                   98.242434f, 276.818420f, 
                   98.061523f, 276.446740f);
        path.Line(93.818493f, 269.894810f);
        path.Line(96.708984f, 257.039060f);
        path.Cubic(96.771784f, 256.712160f, 
                   96.757294f, 256.375110f, 
                   96.666654f, 256.054810f);
        path.Line(94.055443f, 243.294920f);
        path.Line(93.995223f, 218.814540f);
        path.Cubic(94.342468f, 218.954560f, 
                   107.366000f, 224.375200f, 
                   107.366000f, 224.375200f);
        path.Cubic(107.366000f, 224.375200f, 
                   110.359050f, 233.483660f, 
                   110.397430f, 233.583590f);
        path.Cubic(110.803110f, 234.639650f, 
                   112.129300f, 235.605150f, 
                   113.019830f, 235.602840f);
        path.Cubic(113.546110f, 235.593840f, 
                   113.940870f, 235.477100f, 
                   114.396520f, 235.213580f);
        path.Cubic(115.346060f, 234.644700f, 
                   115.279540f, 233.476850f, 
                   115.219240f, 232.422650f);
        path.Cubic(115.191840f, 231.942880f, 
                   111.984480f, 223.175880f, 
                   111.250140f, 221.047730f);
        path.Cubic(110.209820f, 218.032860f, 
                   106.982590f, 216.884250f, 
                   106.551870f, 216.690130f);
        path.Line(89.104992f, 208.811940f);
        path.Cubic(88.063924f, 208.303330f, 
                   85.091370f, 206.717630f, 
                   84.652551f, 203.848000f);
        path.Cubic(84.421274f, 202.335570f, 
                   85.152124f, 199.614730f, 
                   87.416100f, 198.817080f);
        path.Cubic(93.647331f, 196.621680f, 
                   97.773091f, 190.863880f, 
                   97.614425f, 185.460830f);
        path.Cubic(97.421568f, 178.893430f, 
                   92.844936f, 173.644320f, 
                   87.322722f, 172.159920f);
        path.Cubic(82.381159f, 170.831600f, 
                   75.162429f, 172.364000f, 
                   71.660452f, 178.733960f);
        path.Cubic(68.461411f, 184.552890f, 
                   70.291075f, 190.961970f, 
                   74.995784f, 196.534340f);
        path.Cubic(76.195276f, 197.955050f, 
                   76.251417f, 201.423360f, 
                   75.297006f, 203.566770f);
        path.Cubic(73.637066f, 207.294650f, 
                   70.453933f, 208.150780f, 
                   67.910976f, 208.771100f);
        path.Line(50.378958f, 213.895180f);
        path.Cubic(49.871828f, 214.013150f, 
                   47.976529f, 214.753510f, 
                   48.272519f, 216.007960f);
        path.Line(51.307004f, 229.287740f);
        path.Cubic(51.716399f, 230.956430f, 
                   52.747063f, 231.029750f, 
                   53.235276f, 230.951980f);
        path.Cubic(53.656218f, 230.884880f, 
                   54.120765f, 230.488890f, 
                   54.120839f, 229.418390f);
        path.Cubic(54.121028f, 226.684840f, 
                   53.207117f, 219.427050f, 
                   53.207117f, 219.427050f);
        path.Cubic(53.207117f, 219.427050f, 
                   66.606431f, 216.230390f, 
                   67.267889f, 215.949940f);
        path.Close();
    }

    private void SetPathData_path5695(IRenderPath path)
    { // Label: lowMin
        path.Move(68.605438f, 234.661510f);
        path.Line(66.061296f, 251.265450f);
        path.Cubic(66.052396f, 251.597480f, 
                   66.120296f, 251.927080f, 
                   66.259733f, 252.228540f);
        path.Line(73.002145f, 264.298520f);
        path.Line(68.005212f, 272.606050f);
        path.Cubic(67.827908f, 272.900820f, 
                   67.502114f, 273.290000f, 
                   67.783852f, 273.550170f);
        path.Cubic(68.026494f, 273.774250f, 
                   68.539397f, 273.394060f, 
                   68.742587f, 273.201790f);
        path.Line(74.822040f, 267.449160f);
        path.Cubic(75.615790f, 266.655410f, 
                   75.049052f, 266.138220f, 
                   74.361135f, 264.511030f);
        path.Line(69.621308f, 253.457710f);
        path.Line(76.056785f, 245.201550f);
        path.Cubic(76.731106f, 244.315650f, 
                   78.615708f, 243.422610f, 
                   80.370331f, 243.237640f);
        path.Cubic(81.847302f, 243.081940f, 
                   84.664470f, 244.283930f, 
                   85.448736f, 245.735760f);
        path.Line(91.413474f, 256.148950f);
        path.Line(90.518306f, 270.105830f);
        path.Cubic(90.443296f, 271.275380f, 
                   90.075299f, 271.878110f, 
                   90.845789f, 272.424230f);
        path.Line(96.321878f, 276.774970f);
        path.Cubic(96.856309f, 277.199580f, 
                   97.636380f, 277.779470f, 
                   98.076319f, 277.300130f);
        path.Cubic(98.411385f, 276.935060f, 
                   97.597082f, 276.210410f, 
                   97.384850f, 275.855680f);
        path.Line(92.223929f, 270.276870f);
        path.Line(94.965279f, 256.592540f);
        path.Cubic(95.028079f, 256.265640f, 
                   95.013589f, 255.928590f, 
                   94.922949f, 255.608290f);
        path.Line(92.529010f, 242.999380f);
        path.Line(92.663975f, 216.963110f);
        path.Cubic(93.011220f, 217.103130f, 
                   108.352780f, 223.120850f, 
                   108.352780f, 223.120850f);
        path.Cubic(108.352780f, 223.120850f, 
                   111.816950f, 232.913870f, 
                   111.849690f, 233.015790f);
        path.Cubic(111.957870f, 233.352500f, 
                   112.494890f, 234.161560f, 
                   112.982190f, 234.196190f);
        path.Cubic(112.982190f, 234.196190f, 
                   113.136120f, 234.222490f, 
                   113.294100f, 234.119390f);
        path.Cubic(113.714930f, 233.849280f, 
                   113.492640f, 232.835510f, 
                   113.453330f, 232.510450f);
        path.Cubic(113.335170f, 231.533310f, 
                   110.934350f, 224.722820f, 
                   110.242350f, 222.580530f);
        path.Cubic(109.062030f, 218.926510f, 
                   107.821300f, 218.870820f, 
                   106.211430f, 218.006160f);
        path.Line(88.575825f, 210.293740f);
        path.Cubic(84.082336f, 208.030350f, 
                   84.101976f, 206.721700f, 
                   83.267897f, 203.812210f);
        path.Cubic(82.774431f, 202.090870f, 
                   82.479920f, 199.114560f, 
                   88.890613f, 196.571990f);
        path.Cubic(93.653036f, 194.683150f, 
                   96.534944f, 190.155380f, 
                   96.081712f, 184.853990f);
        path.Cubic(95.537216f, 178.485110f, 
                   90.673330f, 173.929550f, 
                   85.149872f, 173.331980f);
        path.Cubic(80.333461f, 172.810900f, 
                   74.557960f, 175.079570f, 
                   72.448695f, 180.636760f);
        path.Cubic(70.190908f, 186.585250f, 
                   72.653257f, 191.810150f, 
                   76.281227f, 195.694470f);
        path.Cubic(77.550386f, 197.053310f, 
                   77.845006f, 200.163930f, 
                   77.125786f, 202.397270f);
        path.Cubic(75.638983f, 207.014140f, 
                   75.318340f, 208.371750f, 
                   68.494200f, 210.163240f);
        path.Line(50.681845f, 215.314000f);
        path.Cubic(50.174715f, 215.431970f, 
                   49.436710f, 215.398100f, 
                   49.732700f, 216.652550f);
        path.Line(51.889653f, 227.670770f);
        path.Cubic(52.299048f, 229.339460f, 
                   52.517892f, 229.557510f, 
                   52.871952f, 229.481480f);
        path.Cubic(53.191714f, 229.412780f, 
                   53.143701f, 228.533760f, 
                   53.143775f, 227.463260f);
        path.Cubic(53.143964f, 224.729710f, 
                   52.322420f, 217.872570f, 
                   52.322420f, 217.872570f);
        path.Cubic(52.322420f, 217.872570f, 
                   67.991108f, 214.401850f, 
                   68.652566f, 214.121400f);
        path.Close();
    }

    private void SetPathData_path186011_3_6(IRenderPath path)
    { // Label: lowMax
        path.Move(67.330027f, 234.125790f);
        path.Line(64.505188f, 251.098130f);
        path.Cubic(64.496288f, 251.430160f, 
                   64.564418f, 251.759760f, 
                   64.704412f, 252.061220f);
        path.Line(71.484612f, 264.207700f);
        path.Line(66.613694f, 272.158300f);
        path.Cubic(66.566104f, 272.236000f, 
                   65.927450f, 273.580000f, 
                   66.899026f, 274.440400f);
        path.Cubic(67.505872f, 274.977810f, 
                   68.776362f, 274.740770f, 
                   69.318528f, 274.229530f);
        path.Line(75.375804f, 268.517740f);
        path.Cubic(76.172704f, 267.723990f, 
                   77.027141f, 267.348140f, 
                   76.336494f, 265.720950f);
        path.Line(71.050487f, 253.492240f);
        path.Line(76.650332f, 246.331560f);
        path.Cubic(77.952797f, 244.697280f, 
                   79.403264f, 244.468780f, 
                   80.587159f, 244.405310f);
        path.Cubic(81.911739f, 244.371110f, 
                   83.736473f, 245.194310f, 
                   84.679833f, 246.910830f);
        path.Line(90.154831f, 256.258460f);
        path.Line(89.234365f, 269.686700f);
        path.Cubic(89.119878f, 271.356900f, 
                   88.599031f, 272.218350f, 
                   89.704020f, 272.998460f);
        path.Line(96.276199f, 278.132840f);
        path.Cubic(97.019157f, 278.713260f, 
                   98.278010f, 278.901630f, 
                   99.022255f, 278.114940f);
        path.Cubic(99.643726f, 277.458030f, 
                   99.711144f, 276.466220f, 
                   98.872787f, 275.515610f);
        path.Line(93.624053f, 269.564070f);
        path.Line(96.293942f, 256.567780f);
        path.Cubic(96.356992f, 256.240880f, 
                   96.342442f, 255.903830f, 
                   96.251442f, 255.583530f);
        path.Line(93.849021f, 242.866640f);
        path.Line(94.036014f, 218.753700f);
        path.Cubic(94.384637f, 218.893720f, 
                   107.613580f, 224.058670f, 
                   107.613580f, 224.058670f);
        path.Cubic(107.613580f, 224.058670f, 
                   110.669850f, 233.094950f, 
                   110.717450f, 233.218380f);
        path.Cubic(111.220540f, 234.522860f, 
                   112.156050f, 235.302550f, 
                   113.214990f, 235.375050f);
        path.Cubic(113.459980f, 235.394650f, 
                   113.826070f, 235.326850f, 
                   114.047850f, 235.155250f);
        path.Cubic(115.335610f, 234.295740f, 
                   114.931630f, 232.574860f, 
                   114.806930f, 231.887560f);
        path.Cubic(114.700950f, 231.303430f, 
                   111.691800f, 222.722880f, 
                   110.954550f, 220.594730f);
        path.Cubic(109.910100f, 217.579860f, 
                   107.240960f, 216.883370f, 
                   106.808530f, 216.689250f);
        path.Line(88.674283f, 208.836710f);
        path.Cubic(84.778445f, 206.973760f, 
                   84.772356f, 204.582300f, 
                   84.585193f, 203.367080f);
        path.Cubic(84.110678f, 200.286120f, 
                   84.871148f, 199.620320f, 
                   88.135079f, 198.163490f);
        path.Cubic(96.425188f, 194.463280f, 
                   98.048266f, 189.679930f, 
                   97.209285f, 183.304850f);
        path.Cubic(96.380179f, 177.004820f, 
                   91.214311f, 172.803900f, 
                   85.294914f, 171.957760f);
        path.Cubic(78.423012f, 170.975460f, 
                   72.561427f, 175.579790f, 
                   71.100679f, 180.385150f);
        path.Cubic(69.074836f, 187.049480f, 
                   70.702978f, 190.935550f, 
                   75.851154f, 197.366950f);
        path.Cubic(76.118650f, 197.701120f, 
                   76.427359f, 200.105690f, 
                   75.948404f, 201.694050f);
        path.Cubic(74.377146f, 206.905310f, 
                   73.488823f, 207.336230f, 
                   68.103810f, 208.901140f);
        path.Line(50.135914f, 213.941950f);
        path.Cubic(49.513702f, 214.181000f, 
                   47.961239f, 214.659300f, 
                   48.064947f, 215.309950f);
        path.Line(50.888719f, 229.096180f);
        path.Cubic(51.314347f, 230.320830f, 
                   52.126304f, 230.743070f, 
                   52.880457f, 230.598490f);
        path.Cubic(53.739803f, 230.433750f, 
                   54.285412f, 229.396340f, 
                   54.274700f, 228.966250f);
        path.Cubic(54.206630f, 226.233540f, 
                   53.434911f, 218.798280f, 
                   53.434911f, 218.798280f);
        path.Cubic(53.434911f, 218.798280f, 
                   66.588734f, 216.008750f, 
                   67.252817f, 215.728300f);
        path.Close();
    }

    private void SetPathData_use5182(IRenderPath path)
    { // Label: 
        path.Move(82.587891f, 168.451170f);
        path.Cubic(81.115094f, 168.548170f, 
                   79.655784f, 168.837630f, 
                   78.257812f, 169.310550f);
        path.Line(78.375000f, 169.656250f);
        path.Cubic(79.742917f, 169.193500f, 
                   81.172424f, 168.909360f, 
                   82.613281f, 168.814450f);
        path.Close();
        path.Move(86.994141f, 168.730470f);
        path.Line(86.923831f, 169.089840f);
        path.Cubic(88.341235f, 169.365570f, 
                   89.725027f, 169.825610f, 
                   91.023440f, 170.457030f);
        path.Line(91.181644f, 170.128910f);
        path.Cubic(89.854316f, 169.483420f, 
                   88.442582f, 169.012240f, 
                   86.994144f, 168.730470f);
        path.Close();
        path.Move(74.292969f, 171.251950f);
        path.Cubic(73.061209f, 172.064730f, 
                   71.936329f, 173.038330f, 
                   70.957031f, 174.142580f);
        path.Line(71.228516f, 174.384770f);
        path.Cubic(72.186434f, 173.304620f, 
                   73.289031f, 172.349880f, 
                   74.494141f, 171.554690f);
        path.Close();
        path.Move(94.871094f, 172.552730f);
        path.Line(94.632812f, 172.830080f);
        path.Cubic(95.727693f, 173.771370f, 
                   96.699643f, 174.857410f, 
                   97.515625f, 176.048830f);
        path.Line(97.816406f, 175.841800f);
        path.Cubic(96.982580f, 174.624320f, 
                   95.990318f, 173.514950f, 
                   94.871094f, 172.552730f);
        path.Close();
        path.Move(68.474609f, 177.792970f);
        path.Cubic(67.808752f, 179.111000f, 
                   67.325904f, 180.522550f, 
                   67.052734f, 181.974610f);
        path.Line(67.412109f, 182.043010f);
        path.Cubic(67.678779f, 180.625500f, 
                   68.150210f, 179.246800f, 
                   68.800781f, 177.959020f);
        path.Close();
        path.Move(99.822266f, 179.775390f);
        path.Line(99.478516f, 179.898440f);
        path.Cubic(99.962899f, 181.258680f, 
                   100.268930f, 182.682000f, 
                   100.384770f, 184.121090f);
        path.Line(100.748050f, 184.091790f);
        path.Cubic(100.629620f, 182.620510f, 
                   100.317320f, 181.165570f, 
                   99.822266f, 179.775380f);
        path.Close();
        path.Move(67.197266f, 186.355470f);
        path.Line(66.833984f, 186.384770f);
        path.Cubic(66.956981f, 187.855800f, 
                   67.272995f, 189.308900f, 
                   67.750000f, 190.703120f);
        path.Line(68.095703f, 190.583980f);
        path.Cubic(67.627815f, 189.216400f, 
                   67.317590f, 187.794530f, 
                   67.197266f, 186.355470f);
        path.Close();
        path.Move(100.169920f, 188.435550f);
        path.Cubic(99.906742f, 189.854210f, 
                   99.446043f, 191.235610f, 
                   98.806641f, 192.529300f);
        path.Line(99.132812f, 192.691410f);
        path.Cubic(99.787032f, 191.367740f, 
                   100.259900f, 189.954110f, 
                   100.529300f, 188.501950f);
        path.Close();
        path.Move(69.933594f, 194.507810f);
        path.Line(69.621094f, 194.697270f);
        path.Cubic(70.301929f, 195.823020f, 
                   71.085507f, 196.885540f, 
                   71.951172f, 197.875000f);
        path.Cubic(72.048522f, 197.986760f, 
                   72.137723f, 198.102710f, 
                   72.214844f, 198.224610f);
        path.Line(72.523437f, 198.029300f);
        path.Cubic(72.434207f, 197.888260f, 
                   72.333458f, 197.757490f, 
                   72.226562f, 197.634770f);
        path.Cubic(71.374431f, 196.660770f, 
                   70.602993f, 195.614650f, 
                   69.933594f, 194.507810f);
        path.Close();
        path.Move(96.408203f, 196.123050f);
        path.Cubic(95.461060f, 197.214040f, 
                   94.376442f, 198.187110f, 
                   93.197266f, 199.023440f);
        path.Line(93.408203f, 199.322270f);
        path.Cubic(94.610175f, 198.469770f, 
                   95.716458f, 197.477310f, 
                   96.683594f, 196.363280f);
        path.Close();
        path.Move(89.410156f, 201.126950f);
        path.Cubic(89.066187f, 201.272960f, 
                   88.716215f, 201.406470f, 
                   88.363281f, 201.533200f);
        path.Line(88.353481f, 201.537200f);
        path.Line(88.345681f, 201.541200f);
        path.Cubic(88.221186f, 201.601500f, 
                   88.007866f, 201.621400f, 
                   87.800759f, 201.763850f);
        path.Cubic(87.578894f, 201.910770f, 
                   87.460808f, 202.149800f, 
                   87.419900f, 202.382990f);
        path.Cubic(87.344030f, 202.812180f, 
                   87.442170f, 203.221010f, 
                   87.509740f, 203.590020f);
        path.Cubic(87.569220f, 203.922840f, 
                   87.706478f, 204.235340f, 
                   87.892552f, 204.509950f);
        path.Line(88.193333f, 204.304870f);
        path.Cubic(88.032750f, 204.067880f, 
                   87.918358f, 203.800520f, 
                   87.869115f, 203.523620f);
        path.Cubic(87.799515f, 203.143530f, 
                   87.720285f, 202.779150f, 
                   87.779275f, 202.445490f);
        path.Cubic(87.807005f, 202.287430f, 
                   87.885592f, 202.142610f, 
                   88.001931f, 202.066590f);
        path.Line(88.003931f, 202.064590f);
        path.Line(88.005931f, 202.062590f);
        path.Cubic(88.105931f, 201.993390f, 
                   88.287373f, 201.968890f, 
                   88.486400f, 201.877040f);
        path.Line(88.503980f, 201.869040f);
        path.Cubic(88.856047f, 201.742310f, 
                   89.207153f, 201.609510f, 
                   89.552808f, 201.462790f);
        path.Close();
        path.Move(72.300781f, 202.324220f);
        path.Cubic(72.107768f, 202.990280f, 
                   71.726790f, 203.605140f, 
                   71.199219f, 204.050780f);
        path.Cubic(70.739599f, 204.439350f, 
                   70.185147f, 204.723060f, 
                   69.599609f, 204.847660f);
        path.Line(69.593709f, 204.847660f);
        path.Line(69.296834f, 204.935560f);
        path.Line(69.400350f, 205.287120f);
        path.Line(69.689412f, 205.201220f);
        path.Line(69.675742f, 205.203220f);
        path.Cubic(70.325400f, 205.064980f, 
                   70.932487f, 204.755440f, 
                   71.435508f, 204.330180f);
        path.Cubic(72.022916f, 203.833990f, 
                   72.438355f, 203.157460f, 
                   72.650352f, 202.425880f);
        path.Close();
        path.Move(65.095703f, 206.177730f);
        path.Line(60.896484f, 207.419920f);
        path.Line(61.000000f, 207.769530f);
        path.Line(65.199219f, 206.527340f);
        path.Close();
        path.Move(91.869141f, 206.378910f);
        path.Line(91.720703f, 206.710940f);
        path.Line(95.718750f, 208.498050f);
        path.Line(95.867187f, 208.166020f);
        path.Close();
        path.Move(56.695312f, 208.662110f);
        path.Line(52.496094f, 209.902340f);
        path.Line(52.599609f, 210.253910f);
        path.Line(56.798828f, 209.011720f);
        path.Close();
        path.Move(99.867187f, 209.953120f);
        path.Line(99.718750f, 210.285160f);
        path.Line(103.716800f, 212.072270f);
        path.Line(103.865230f, 211.738280f);
        path.Close();
        path.Move(48.294922f, 211.144530f);
        path.Line(45.986328f, 211.828120f);
        path.Cubic(45.748319f, 211.895220f, 
                   45.591000f, 212.064450f, 
                   45.466797f, 212.199220f);
        path.Line(45.464797f, 212.201220f);
        path.Line(45.462797f, 212.203220f);
        path.Cubic(45.132115f, 212.585710f, 
                   44.903975f, 213.046240f, 
                   44.765531f, 213.521580f);
        path.Line(45.117093f, 213.623150f);
        path.Cubic(45.242957f, 213.191000f, 
                   45.450684f, 212.778710f, 
                   45.740140f, 212.443460f);
        path.Cubic(45.740515f, 212.443030f, 
                   45.739765f, 212.441460f, 
                   45.740140f, 212.441460f);
        path.Cubic(45.857473f, 212.314600f, 
                   45.970137f, 212.209880f, 
                   46.085843f, 212.177780f);
        path.Line(46.087843f, 212.177780f);
        path.Line(48.398389f, 211.494190f);
        path.Close();
        path.Move(107.919920f, 213.564450f);
        path.Line(107.777090f, 213.843700f);
        path.Cubic(109.126130f, 214.503950f, 
                   110.396370f, 214.997280f, 
                   111.662110f, 215.677730f);
        path.Line(111.867190f, 215.375000f);
        path.Cubic(110.500640f, 214.739810f, 
                   109.146300f, 214.109660f, 
                   107.919920f, 213.564450f);
        path.Close();
        path.Move(45.748047f, 217.818360f);
        path.Line(45.390625f, 217.898460f);
        path.Line(46.371094f, 222.167990f);
        path.Line(46.726562f, 222.085990f);
        path.Close();
        path.Move(114.037110f, 219.208980f);
        path.Line(113.693360f, 219.333980f);
        path.Cubic(114.190270f, 220.706360f, 
                   114.682930f, 222.080200f, 
                   115.173830f, 223.455080f);
        path.Line(115.517580f, 223.332030f);
        path.Cubic(115.026610f, 221.956950f, 
                   114.534320f, 220.582180f, 
                   114.037110f, 219.208980f);
        path.Close();
        path.Move(61.699219f, 220.367190f);
        path.Cubic(60.283770f, 220.719720f, 
                   58.862322f, 221.056330f, 
                   57.441406f, 221.390620f);
        path.Line(57.525386f, 221.746090f);
        path.Cubic(58.946832f, 221.411670f, 
                   60.369109f, 221.073870f, 
                   61.787104f, 220.720700f);
        path.Close();
        path.Move(63.820312f, 221.968750f);
        path.Line(63.822312f, 226.349610f);
        path.Line(64.185593f, 226.347610f);
        path.Line(64.183593f, 221.968700f);
        path.Close();
        path.Move(97.011719f, 223.230470f);
        path.Line(97.011719f, 223.974610f);
        path.Line(97.376953f, 223.974610f);
        path.Line(97.376953f, 223.777340f);
        path.Line(98.458984f, 224.228520f);
        path.Line(100.730470f, 225.179690f);
        path.Line(100.871090f, 224.843750f);
        path.Line(98.601562f, 223.892580f);
        path.Close();
        path.Move(57.105469f, 225.228520f);
        path.Line(56.742187f, 225.255820f);
        path.Cubic(56.857332f, 226.710270f, 
                   56.962106f, 228.164760f, 
                   57.005859f, 229.619100f);
        path.Line(57.369141f, 229.607400f);
        path.Cubic(57.325081f, 228.142840f, 
                   57.220746f, 226.684620f, 
                   57.105469f, 225.228500f);
        path.Close();
        path.Move(47.707031f, 226.355470f);
        path.Line(47.351562f, 226.437470f);
        path.Line(48.330078f, 230.707000f);
        path.Line(48.687500f, 230.625000f);
        path.Close();
        path.Move(104.992190f, 226.664060f);
        path.Line(104.646480f, 226.781250f);
        path.Line(106.044920f, 230.931640f);
        path.Line(106.390630f, 230.816410f);
        path.Close();
        path.Move(116.978520f, 227.462890f);
        path.Line(116.632810f, 227.583980f);
        path.Cubic(117.112500f, 228.962980f, 
                   117.592430f, 230.339610f, 
                   118.039060f, 231.726560f);
        path.Line(118.386720f, 231.615230f);
        path.Cubic(117.938290f, 230.222700f, 
                   117.458130f, 228.841680f, 
                   116.978520f, 227.462890f);
        path.Close();
        path.Move(97.019531f, 228.355470f);
        path.Line(97.025431f, 232.734370f);
        path.Line(97.390665f, 232.734370f);
        path.Line(97.384765f, 228.355470f);
        path.Close();
        path.Move(63.824219f, 230.728520f);
        path.Line(63.826219f, 234.644530f);
        path.Line(63.132859f, 238.957030f);
        path.Line(63.494188f, 239.015630f);
        path.Line(64.187547f, 234.691420f);
        path.Line(64.007859f, 234.662120f);
        path.Line(64.191453f, 234.662120f);
        path.Line(64.189453f, 230.728530f);
        path.Close();
        path.Move(55.312500f, 233.183590f);
        path.Cubic(54.974372f, 233.409580f, 
                   54.611561f, 233.599200f, 
                   54.234375f, 233.759770f);
        path.Cubic(54.233843f, 233.759990f, 
                   54.232975f, 233.759540f, 
                   54.232375f, 233.759770f);
        path.Cubic(54.025046f, 233.828170f, 
                   53.812644f, 233.881440f, 
                   53.597609f, 233.917970f);
        path.Cubic(52.835091f, 234.048810f, 
                   52.034681f, 233.966370f, 
                   51.314406f, 233.683590f);
        path.Line(51.181594f, 234.023440f);
        path.Cubic(51.964684f, 234.330910f, 
                   52.828608f, 234.419690f, 
                   53.658156f, 234.277340f);
        path.Cubic(53.896565f, 234.236840f, 
                   54.132110f, 234.178040f, 
                   54.361281f, 234.101560f);
        path.Line(54.367181f, 234.099560f);
        path.Line(54.374981f, 234.095560f);
        path.Cubic(54.770510f, 233.927290f, 
                   55.155129f, 233.727110f, 
                   55.515606f, 233.486190f);
        path.Close();
        path.Move(107.792970f, 234.962890f);
        path.Line(107.449220f, 235.083980f);
        path.Cubic(107.553070f, 235.377370f, 
                   107.645810f, 235.684060f, 
                   107.767580f, 235.988280f);
        path.Line(107.767580f, 235.990280f);
        path.Cubic(108.078360f, 236.742680f, 
                   108.641420f, 237.354130f, 
                   109.279300f, 237.818410f);
        path.Line(109.281300f, 237.818410f);
        path.Cubic(109.594270f, 238.045810f, 
                   109.926560f, 238.243470f, 
                   110.275440f, 238.410210f);
        path.Line(110.433640f, 238.080130f);
        path.Cubic(110.104720f, 237.922930f, 
                   109.789000f, 237.735740f, 
                   109.494190f, 237.521530f);
        path.Cubic(108.897850f, 237.087220f, 
                   108.383180f, 236.524830f, 
                   108.105520f, 235.853570f);
        path.Line(108.105520f, 235.851570f);
        path.Cubic(107.991940f, 235.567530f, 
                   107.900450f, 235.266400f, 
                   107.793020f, 234.962900f);
        path.Close();
        path.Move(117.716800f, 235.789060f);
        path.Cubic(117.321570f, 236.510320f, 
                   116.777680f, 237.153270f, 
                   116.123050f, 237.648440f);
        path.Line(116.121050f, 237.648440f);
        path.Cubic(115.653870f, 238.006380f, 
                   115.114490f, 238.270540f, 
                   114.548790f, 238.451170f);
        path.Line(114.660120f, 238.798830f);
        path.Cubic(115.259310f, 238.607500f, 
                   115.836070f, 238.326600f, 
                   116.341760f, 237.939450f);
        path.Cubic(117.039890f, 237.411390f, 
                   117.616030f, 236.729650f, 
                   118.035120f, 235.964840f);
        path.Close();
        path.Move(97.033203f, 237.115230f);
        path.Line(97.039103f, 241.496090f);
        path.Line(97.404338f, 241.494090f);
        path.Line(97.396538f, 237.115180f);
        path.Close();
        path.Move(62.439453f, 243.281250f);
        path.Line(61.744141f, 247.605470f);
        path.Line(62.103516f, 247.664070f);
        path.Line(62.798828f, 243.339850f);
        path.Close();
        path.Move(97.949219f, 245.789060f);
        path.Line(97.591797f, 245.857460f);
        path.Line(98.404297f, 250.162150f);
        path.Line(98.761719f, 250.093750f);
        path.Close();
        path.Move(80.625000f, 247.707030f);
        path.Cubic(80.518226f, 247.711030f, 
                   80.401418f, 247.713030f, 
                   80.277344f, 247.736330f);
        path.Line(80.343754f, 248.095700f);
        path.Cubic(80.427764f, 248.080100f, 
                   80.524266f, 248.075900f, 
                   80.626957f, 248.072300f);
        path.Cubic(80.627592f, 248.072310f, 
                   80.628257f, 248.072280f, 
                   80.628957f, 248.072300f);
        path.Cubic(80.993543f, 248.082400f, 
                   81.356398f, 248.190090f, 
                   81.644582f, 248.400420f);
        path.Line(81.644582f, 248.402420f);
        path.Line(81.646582f, 248.402420f);
        path.Cubic(81.934344f, 248.609200f, 
                   82.158106f, 248.909130f, 
                   82.324317f, 249.238360f);
        path.Line(83.093848f, 250.740310f);
        path.Line(83.418067f, 250.574300f);
        path.Line(82.648535f, 249.072350f);
        path.Line(82.650535f, 249.072350f);
        path.Cubic(82.465369f, 248.705570f, 
                   82.209638f, 248.357140f, 
                   81.859519f, 248.105550f);
        path.Cubic(81.501778f, 247.844450f, 
                   81.067432f, 247.718660f, 
                   80.636863f, 247.707110f);
        path.Line(80.630963f, 247.707110f);
        path.Close();
        path.Move(77.423828f, 251.050780f);
        path.Line(75.251953f, 254.853520f);
        path.Line(75.568359f, 255.035160f);
        path.Line(77.740234f, 251.230470f);
        path.Close();
        path.Move(61.048828f, 251.931640f);
        path.Line(60.990238f, 252.302730f);
        path.Line(60.988238f, 252.314430f);
        path.Cubic(60.978338f, 252.673590f, 
                   61.053918f, 253.033370f, 
                   61.205035f, 253.359350f);
        path.Line(61.208935f, 253.369350f);
        path.Line(62.792920f, 255.957240f);
        path.Line(63.105420f, 255.765830f);
        path.Line(61.533154f, 253.201380f);
        path.Cubic(61.408663f, 252.930560f, 
                   61.348135f, 252.628280f, 
                   61.355420f, 252.330290f);
        path.Line(61.410110f, 251.988490f);
        path.Close();
        path.Move(99.576172f, 254.398440f);
        path.Line(99.216797f, 254.464840f);
        path.Line(99.599609f, 256.492190f);
        path.Line(99.601609f, 256.500190f);
        path.Cubic(99.684239f, 256.791190f, 
                   99.698009f, 257.103560f, 
                   99.640669f, 257.400580f);
        path.Line(99.361372f, 258.699410f);
        path.Line(99.718794f, 258.775610f);
        path.Line(99.998091f, 257.470920f);
        path.Line(99.998091f, 257.468920f);
        path.Cubic(100.066381f, 257.115100f, 
                   100.051591f, 256.747220f, 
                   99.953171f, 256.400560f);
        path.Close();
        path.Move(85.416016f, 254.470740f);
        path.Line(85.091797f, 254.638710f);
        path.Line(86.535156f, 257.455120f);
        path.Line(86.466796f, 258.568400f);
        path.Line(86.830077f, 258.589900f);
        path.Line(86.904297f, 257.377010f);
        path.Close();
        path.Move(76.958984f, 259.041060f);
        path.Line(76.613281f, 259.156290f);
        path.Line(77.996094f, 263.312540f);
        path.Line(78.343750f, 263.197310f);
        path.Close();
        path.Move(65.392578f, 259.501990f);
        path.Line(65.080078f, 259.691450f);
        path.Line(67.369141f, 263.427770f);
        path.Line(67.679687f, 263.236370f);
        path.Close();
        path.Move(86.197266f, 262.939490f);
        path.Line(85.927734f, 267.310590f);
        path.Line(86.292969f, 267.333990f);
        path.Line(86.562500f, 262.960950f);
        path.Close();
        path.Move(98.443359f, 262.980490f);
        path.Line(97.525391f, 267.263690f);
        path.Line(97.880859f, 267.339890f);
        path.Line(98.800781f, 263.058640f);
        path.Close();
        path.Move(67.464844f, 266.996110f);
        path.Line(65.253906f, 270.777360f);
        path.Line(65.568359f, 270.960960f);
        path.Line(67.781250f, 267.181660f);
        path.Close();
        path.Move(79.625000f, 267.421890f);
        path.Line(79.261719f, 267.451190f);
        path.Cubic(79.275749f, 267.619430f, 
                   79.277749f, 267.788950f, 
                   79.267619f, 267.957050f);
        path.Line(79.267619f, 267.959050f);
        path.Cubic(79.234659f, 268.553120f, 
                   79.017848f, 269.145890f, 
                   78.603557f, 269.558660f);
        path.Line(77.074260f, 270.714910f);
        path.Line(77.293010f, 271.005930f);
        path.Line(78.849650f, 269.830150f);
        path.Line(78.857450f, 269.822150f);
        path.Cubic(79.352536f, 269.331150f, 
                   79.595676f, 268.648210f, 
                   79.632840f, 267.978400f);
        path.Cubic(79.644090f, 267.792390f, 
                   79.640440f, 267.607010f, 
                   79.625040f, 267.421750f);
        path.Close();
        path.Move(98.574219f, 271.189470f);
        path.Line(98.267578f, 271.386740f);
        path.Line(100.632810f, 275.072290f);
        path.Line(100.939450f, 274.875020f);
        path.Close();
        path.Move(85.140625f, 271.576190f);
        path.Cubic(85.093865f, 272.109420f, 
                   85.116855f, 272.686100f, 
                   85.365234f, 273.205100f);
        path.Cubic(85.485524f, 273.454220f, 
                   85.666546f, 273.678640f, 
                   85.898437f, 273.841820f);
        path.Line(85.900437f, 273.843820f);
        path.Line(87.621140f, 274.992260f);
        path.Line(87.824265f, 274.687570f);
        path.Line(86.107468f, 273.543040f);
        path.Cubic(85.932200f, 273.419710f, 
                   85.790964f, 273.244950f, 
                   85.695358f, 273.046940f);
        path.Cubic(85.489254f, 272.616270f, 
                   85.462120f, 272.106790f, 
                   85.505905f, 271.607490f);
        path.Close();
        path.Move(73.580078f, 273.355490f);
        path.Line(70.083984f, 275.996110f);
        path.Line(70.304687f, 276.287130f);
        path.Line(73.798828f, 273.646500f);
        path.Close();
        path.Move(63.419922f, 274.794940f);
        path.Cubic(63.384052f, 275.452120f, 
                   63.569764f, 276.122210f, 
                   63.966797f, 276.656270f);
        path.Cubic(64.073235f, 276.797290f, 
                   64.192788f, 276.951850f, 
                   64.355469f, 277.078140f);
        path.Cubic(64.887467f, 277.534120f, 
                   65.549319f, 277.832830f, 
                   66.246094f, 277.921890f);
        path.Line(66.292964f, 277.560570f);
        path.Cubic(65.668122f, 277.480670f, 
                   65.068270f, 277.209930f, 
                   64.589839f, 276.798850f);
        path.Line(64.585939f, 276.794850f);
        path.Line(64.582039f, 276.792850f);
        path.Cubic(64.465291f, 276.703050f, 
                   64.364760f, 276.576480f, 
                   64.259774f, 276.437380f);
        path.Cubic(63.917929f, 275.977560f, 
                   63.753769f, 275.389480f, 
                   63.785164f, 274.814330f);
        path.Close();
        path.Move(91.468750f, 277.117210f);
        path.Line(91.265625f, 277.421890f);
        path.Line(94.910156f, 279.851580f);
        path.Line(95.113281f, 279.546890f);
        path.Close();
        path.Move(102.113280f, 278.925800f);
        path.Cubic(102.037380f, 279.323460f, 
                   101.852730f, 279.700700f, 
                   101.605470f, 280.031270f);
        path.Line(101.603470f, 280.033270f);
        path.Line(101.603470f, 280.035270f);
        path.Cubic(101.429240f, 280.280510f, 
                   101.196740f, 280.486800f, 
                   100.935500f, 280.646590f);
        path.Cubic(100.379390f, 280.987490f, 
                   99.698135f, 281.106540f, 
                   99.033153f, 281.084090f);
        path.Line(99.021433f, 281.449330f);
        path.Cubic(99.737965f, 281.473530f, 
                   100.490650f, 281.347180f, 
                   101.126900f, 280.957140f);
        path.Cubic(101.425270f, 280.774640f, 
                   101.693760f, 280.536990f, 
                   101.900340f, 280.246200f);
        path.Cubic(102.174000f, 279.879430f, 
                   102.382700f, 279.455120f, 
                   102.470650f, 278.994250f);
        path.Close();
    }

    private void SetPathData_use5001(IRenderPath path)
    { // Label: dashedLine
        path.Move(84.794486f, 168.547072f);
        path.Cubic(85.527594f, 168.593272f, 
                   86.253905f, 168.685744f, 
                   86.974699f, 168.828563f);
        path.Line(86.844874f, 168.972566f);
        path.Cubic(86.232176f, 168.850856f, 
                   85.507582f, 168.756358f, 
                   84.783629f, 168.710748f);
        path.Line(84.894126f, 168.553639f);
        path.Close();
        path.Move(84.807064f, 168.347468f);
        path.Line(84.700989f, 168.440831f);
        path.Line(84.677549f, 168.804111f);
        path.Line(84.771053f, 168.910352f);
        path.Cubic(85.488340f, 168.955542f, 
                   86.199774f, 169.048324f, 
                   86.904389f, 169.187933f);
        path.Line(87.021964f, 169.109041f);
        path.Line(87.092274f, 168.749671f);
        path.Line(87.013571f, 168.632377f);
        path.Cubic(86.286009f, 168.488216f, 
                   85.546532f, 168.394068f, 
                   84.807064f, 168.347468f);
        path.Close();
        path.Move(82.495100f, 168.557895f);
        path.Line(82.506549f, 168.721679f);
        path.Cubic(81.883027f, 168.762585f, 
                   81.157831f, 168.856518f, 
                   80.447049f, 168.999730f);
        path.Line(80.512443f, 168.818909f);
        path.Cubic(81.134616f, 168.693237f, 
                   81.861485f, 168.599447f, 
                   82.594479f, 168.551053f);
        path.Close();
        path.Move(82.687648f, 168.444297f);
        path.Line(82.581303f, 168.351487f);
        path.Cubic(81.842081f, 168.400293f, 
                   81.102028f, 168.495783f, 
                   80.374781f, 168.642300f);
        path.Line(80.296514f, 168.760148f);
        path.Line(80.368784f, 169.117578f);
        path.Line(80.486553f, 169.195790f);
        path.Cubic(81.190469f, 169.053962f, 
                   81.902485f, 168.961735f, 
                   82.619878f, 168.914332f);
        path.Line(82.713042f, 168.807577f);
        path.Line(82.687648f, 168.444297f);
        path.Close();
        path.Move(89.101403f, 169.389959f);
        path.Cubic(89.798956f, 169.620730f, 
                   90.477364f, 169.897184f, 
                   91.137849f, 170.218912f);
        path.Line(90.976831f, 170.323541f);
        path.Cubic(90.415335f, 170.049693f, 
                   89.737350f, 169.773508f, 
                   89.048986f, 169.545780f);
        path.Line(89.196033f, 169.421585f);
        path.Close();
        path.Move(89.164221f, 169.200081f);
        path.Line(89.037944f, 169.263397f);
        path.Line(88.922710f, 169.609097f);
        path.Line(88.986170f, 169.735660f);
        path.Cubic(89.668138f, 169.961272f, 
                   90.333729f, 170.232407f, 
                   90.979646f, 170.547032f);
        path.Line(91.113514f, 170.500561f);
        path.Line(91.271718f, 170.172441f);
        path.Line(91.225433f, 170.039108f);
        path.Cubic(90.558982f, 169.714476f, 
                   89.868180f, 169.432970f, 
                   89.164221f, 169.200081f);
        path.Close();
        path.Move(78.195253f, 169.437557f);
        path.Line(78.248235f, 169.593853f);
        path.Cubic(77.655748f, 169.793360f, 
                   76.979575f, 170.070881f, 
                   76.328923f, 170.390801f);
        path.Line(76.346627f, 170.198426f);
        path.Cubic(76.916435f, 169.917914f, 
                   77.593797f, 169.640094f, 
                   78.289769f, 169.405376f);
        path.Close();
        path.Move(78.352518f, 169.278516f);
        path.Line(78.225855f, 169.215864f);
        path.Cubic(77.523821f, 169.452626f, 
                   76.834269f, 169.735446f, 
                   76.168767f, 170.062671f);
        path.Line(76.123024f, 170.196273f);
        path.Line(76.283180f, 170.524403f);
        path.Line(76.417171f, 170.570279f);
        path.Cubic(77.061761f, 170.253339f, 
                   77.725746f, 169.980820f, 
                   78.406957f, 169.751076f);
        path.Line(78.469706f, 169.624216f);
        path.Line(78.352518f, 169.278516f);
        path.Close();
        path.Move(93.050510f, 171.304314f);
        path.Cubic(93.664108f, 171.707965f, 
                   94.250138f, 172.147318f, 
                   94.805628f, 172.628393f);
        path.Line(94.622180f, 172.689071f);
        path.Cubic(94.150296f, 172.279973f, 
                   93.567266f, 171.840604f, 
                   92.961208f, 171.441916f);
        path.Line(93.134135f, 171.359661f);
        path.Close();
        path.Move(93.160428f, 171.137226f);
        path.Line(93.021772f, 171.166045f);
        path.Line(92.822553f, 171.470735f);
        path.Line(92.851292f, 171.609004f);
        path.Cubic(93.452006f, 172.004176f, 
                   94.024500f, 172.435607f, 
                   94.567345f, 172.905742f);
        path.Line(94.708663f, 172.895316f);
        path.Line(94.946945f, 172.617966f);
        path.Line(94.936560f, 172.477207f);
        path.Cubic(94.375744f, 171.991522f, 
                   93.779160f, 171.544255f, 
                   93.160428f, 171.137226f);
        path.Close();
        path.Move(74.264456f, 171.388910f);
        path.Line(74.355918f, 171.528323f);
        path.Cubic(73.833574f, 171.871640f, 
                   73.252317f, 172.312770f, 
                   72.704051f, 172.787770f);
        path.Line(72.670804f, 172.598053f);
        path.Cubic(73.149879f, 172.182618f, 
                   73.734042f, 171.737528f, 
                   74.347935f, 171.333609f);
        path.Close();
        path.Move(74.376581f, 171.195216f);
        path.Line(74.238003f, 171.166531f);
        path.Cubic(73.618332f, 171.574252f, 
                   73.023669f, 172.027342f, 
                   72.463817f, 172.512380f);
        path.Line(72.453940f, 172.653697f);
        path.Line(72.694174f, 172.929087f);
        path.Line(72.835011f, 172.938930f);
        path.Cubic(73.378383f, 172.468170f, 
                   73.949124f, 172.035020f, 
                   74.549107f, 171.640249f);
        path.Line(74.577753f, 171.501856f);
        path.Line(74.376581f, 171.195216f);
        path.Close();
        path.Move(96.374842f, 174.168474f);
        path.Cubic(96.866029f, 174.715016f, 
                   97.318951f, 175.292322f, 
                   97.733893f, 175.898364f);
        path.Line(97.541255f, 175.909860f);
        path.Cubic(97.188365f, 175.393921f, 
                   96.736758f, 174.818197f, 
                   96.252111f, 174.278927f);
        path.Line(96.441481f, 174.243076f);
        path.Close();
        path.Move(96.523596f, 174.034786f);
        path.Line(96.382352f, 174.027274f);
        path.Line(96.110867f, 174.271414f);
        path.Line(96.103357f, 174.412613f);
        path.Cubic(96.583528f, 174.946903f, 
                   97.027001f, 175.512259f, 
                   97.433113f, 176.105395f);
        path.Line(97.572323f, 176.131273f);
        path.Line(97.873104f, 175.924243f);
        path.Line(97.898919f, 175.785376f);
        path.Cubic(97.480311f, 175.173978f, 
                   97.019253f, 174.586304f, 
                   96.523596f, 174.034786f);
        path.Close();
        path.Move(70.965293f, 174.284010f);
        path.Line(71.087535f, 174.393061f);
        path.Cubic(70.671116f, 174.859166f, 
                   70.221850f, 175.435200f, 
                   69.815605f, 176.035825f);
        path.Line(69.736804f, 175.862024f);
        path.Cubic(70.092134f, 175.336150f, 
                   70.542439f, 174.757328f, 
                   71.031637f, 174.209217f);
        path.Close();
        path.Move(71.023601f, 174.068008f);
        path.Line(70.882425f, 174.076043f);
        path.Cubic(70.388729f, 174.629192f, 
                   69.930196f, 175.218590f, 
                   69.514824f, 175.832694f);
        path.Line(69.541689f, 175.971592f);
        path.Line(69.842470f, 176.174722f);
        path.Line(69.981269f, 176.147875f);
        path.Cubic(70.383720f, 175.552860f, 
                   70.824744f, 174.987394f, 
                   71.303122f, 174.451408f);
        path.Line(71.295086f, 174.310198f);
        path.Line(71.023601f, 174.068008f);
        path.Close();
        path.Move(98.856342f, 177.789845f);
        path.Cubic(99.191915f, 178.443781f, 
                   99.482127f, 179.116937f, 
                   99.728039f, 179.808925f);
        path.Line(99.538898f, 179.770662f);
        path.Cubic(99.329848f, 179.181506f, 
                   99.041044f, 178.509539f, 
                   98.710063f, 177.864554f);
        path.Line(98.901689f, 177.878876f);
        path.Close();
        path.Move(99.034282f, 177.698535f);
        path.Line(98.899734f, 177.655181f);
        path.Line(98.575516f, 177.821201f);
        path.Line(98.532125f, 177.955866f);
        path.Cubic(98.859990f, 178.594781f, 
                   99.143554f, 179.254554f, 
                   99.384289f, 179.931975f);
        path.Line(99.512218f, 179.992640f);
        path.Line(99.855968f, 179.869590f);
        path.Line(99.916493f, 179.741955f);
        path.Cubic(99.668383f, 179.043783f, 
                   99.372917f, 178.358439f, 
                   99.034282f, 177.698535f);
        path.Close();
        path.Move(68.518829f, 177.927704f);
        path.Line(68.666758f, 178.002994f);
        path.Cubic(68.384026f, 178.560276f, 
                   68.102157f, 179.232646f, 
                   67.868238f, 179.918928f);
        path.Line(67.744445f, 179.771550f);
        path.Cubic(67.948916f, 179.170720f, 
                   68.231554f, 178.493944f, 
                   68.563812f, 177.838187f);
        path.Close();
        path.Move(68.519968f, 177.703869f);
        path.Line(68.385406f, 177.747793f);
        path.Cubic(68.049830f, 178.410096f, 
                   67.761776f, 179.099840f, 
                   67.522534f, 179.801738f);
        path.Line(67.585083f, 179.928706f);
        path.Line(67.930787f, 180.045896f);
        path.Line(68.057544f, 179.983452f);
        path.Cubic(68.289253f, 179.303654f, 
                   68.565688f, 178.644244f, 
                   68.889984f, 178.004197f);
        path.Line(68.846140f, 177.869879f);
        path.Line(68.519968f, 177.703869f);
        path.Close();
        path.Move(100.525780f, 181.982868f);
        path.Line(100.525780f, 181.902320f);
        path.Line(100.328029f, 181.923411f);
        path.Cubic(100.482945f, 182.641391f, 
                   100.590131f, 183.367110f, 
                   100.648364f, 184.099704f);
        path.Line(100.476205f, 184.013381f);
        path.Cubic(100.427012f, 183.390393f, 
                   100.319067f, 182.668254f, 
                   100.166110f, 181.959368f);
        path.Line(100.525780f, 181.982868f);
        path.Close();
        path.Move(100.325780f, 181.821852f);
        path.Line(100.047013f, 181.882765f);
        path.Line(99.970610f, 182.001552f);
        path.Cubic(100.122213f, 182.704166f, 
                   100.228188f, 183.413127f, 
                   100.285084f, 184.129003f);
        path.Line(100.392809f, 184.220756f);
        path.Line(100.756089f, 184.191456f);
        path.Line(100.847736f, 184.083856f);
        path.Cubic(100.788969f, 183.344550f, 
                   100.679835f, 182.605649f, 
                   100.523531f, 181.881229f);
        path.Line(100.325780f, 181.902320f);
        path.Line(100.325780f, 181.821852f);
        path.Close();
        path.Move(67.132414f, 182.091615f);
        path.Line(67.295312f, 182.122611f);
        path.Cubic(67.177022f, 182.735648f, 
                   67.091484f, 183.462354f, 
                   67.056367f, 184.186637f);
        path.Line(66.897993f, 184.078851f);
        path.Cubic(66.928438f, 183.444784f, 
                   67.012025f, 182.715552f, 
                   67.150933f, 181.993553f);
        path.Close();
        path.Move(67.071426f, 181.876423f);
        path.Line(66.954535f, 181.955767f);
        path.Cubic(66.814191f, 182.685228f, 
                   66.728990f, 183.428536f, 
                   66.693086f, 184.169037f);
        path.Line(66.788130f, 184.273763f);
        path.Line(67.151411f, 184.291363f);
        path.Line(67.256133f, 184.196323f);
        path.Cubic(67.290916f, 183.478906f, 
                   67.374798f, 182.766272f, 
                   67.510308f, 182.061933f);
        path.Line(67.430801f, 181.944803f);
        path.Line(67.071426f, 181.876423f);
        path.Close();
        path.Move(100.516865f, 186.391325f);
        path.Line(100.682274f, 186.398417f);
        path.Cubic(100.653422f, 187.032368f, 
                   100.566777f, 187.761285f, 
                   100.431021f, 188.483568f);
        path.Line(100.288256f, 188.354096f);
        path.Cubic(100.404074f, 187.739621f, 
                   100.488413f, 187.015768f, 
                   100.521774f, 186.291763f);
        path.Close();
        path.Move(100.426164f, 186.187252f);
        path.Line(100.321986f, 186.282557f);
        path.Cubic(100.288947f, 186.999572f, 
                   100.206226f, 187.709539f, 
                   100.073601f, 188.415168f);
        path.Line(100.153084f, 188.531858f);
        path.Line(100.510504f, 188.600258f);
        path.Line(100.627579f, 188.520512f);
        path.Cubic(100.764583f, 187.791595f, 
                   100.852878f, 187.048792f, 
                   100.887004f, 186.307418f);
        path.Line(100.791394f, 186.202912f);
        path.Line(100.426164f, 186.187252f);
        path.Close();
        path.Move(67.297266f, 186.447819f);
        path.Line(67.297266f, 186.355540f);
        path.Line(67.097602f, 186.363735f);
        path.Cubic(67.157015f, 187.086267f, 
                   67.266206f, 187.807389f, 
                   67.417832f, 188.517054f);
        path.Line(67.237303f, 188.453551f);
        path.Cubic(67.104550f, 187.833496f, 
                   66.993882f, 187.109137f, 
                   66.933648f, 186.376664f);
        path.Line(67.297266f, 186.447819f);
        path.Close();
        path.Move(67.097266f, 186.263301f);
        path.Line(66.825945f, 186.285184f);
        path.Line(66.734320f, 186.393056f);
        path.Cubic(66.795126f, 187.132463f, 
                   66.907734f, 187.869524f, 
                   67.062363f, 188.593254f);
        path.Line(67.181116f, 188.670139f);
        path.Line(67.536585f, 188.593939f);
        path.Line(67.613418f, 188.475266f);
        path.Cubic(67.463050f, 187.771491f, 
                   67.355783f, 187.063073f, 
                   67.296930f, 186.347345f);
        path.Line(67.097266f, 186.355540f);
        path.Line(67.097266f, 186.263301f);
        path.Close();
        path.Move(99.691907f, 190.655798f);
        path.Line(99.847878f, 190.707787f);
        path.Cubic(99.647739f, 191.310295f, 
                   99.369485f, 191.988484f, 
                   99.043205f, 192.647109f);
        path.Line(98.940289f, 192.484144f);
        path.Cubic(99.218032f, 191.924234f, 
                   99.494910f, 191.248882f, 
                   99.723792f, 190.560960f);
        path.Close();
        path.Move(99.660528f, 190.434521f);
        path.Line(99.534020f, 190.497820f);
        path.Cubic(99.307282f, 191.179298f, 
                   99.035670f, 191.841806f, 
                   98.717034f, 192.484999f);
        path.Line(98.762134f, 192.618940f);
        path.Line(99.088305f, 192.781050f);
        path.Line(99.222419f, 192.735891f);
        path.Cubic(99.551835f, 192.070936f, 
                   99.835359f, 191.379905f, 
                   100.069495f, 190.676190f);
        path.Line(100.006231f, 190.549751f);
        path.Line(99.660528f, 190.434521f);
        path.Close();
        path.Move(68.001000f, 190.618105f);
        path.Cubic(68.234070f, 191.305408f, 
                   68.510051f, 191.981815f, 
                   68.819710f, 192.638406f);
        path.Line(68.626379f, 192.617355f);
        path.Cubic(68.355568f, 192.043708f, 
                   68.080503f, 191.366419f, 
                   67.844703f, 190.671056f);
        path.Line(68.033374f, 190.712706f);
        path.Close();
        path.Move(68.190406f, 190.553875f);
        path.Line(68.063601f, 190.491283f);
        path.Line(67.717898f, 190.608463f);
        path.Line(67.655297f, 190.735284f);
        path.Cubic(67.892987f, 191.436221f, 
                   68.172334f, 192.124052f, 
                   68.487679f, 192.792706f);
        path.Line(68.620268f, 192.840736f);
        path.Line(68.952299f, 192.686436f);
        path.Line(69.000602f, 192.553094f);
        path.Cubic(68.693217f, 191.901325f, 
                   68.421534f, 191.235452f, 
                   68.190406f, 190.553875f);
        path.Close();
        path.Move(97.751840f, 194.543044f);
        path.Line(97.888505f, 194.634739f);
        path.Cubic(97.536092f, 195.162613f, 
                   97.091766f, 195.744378f, 
                   96.608300f, 196.297521f);
        path.Line(96.549143f, 196.113345f);
        path.Cubic(96.960742f, 195.642878f, 
                   97.404709f, 195.063038f, 
                   97.807753f, 194.459912f);
        path.Close();
        path.Move(97.780325f, 194.321309f);
        path.Line(97.641465f, 194.348788f);
        path.Cubic(97.241997f, 194.946562f, 
                   96.805886f, 195.516142f, 
                   96.332909f, 196.057291f);
        path.Line(96.342467f, 196.198458f);
        path.Line(96.617858f, 196.438688f);
        path.Line(96.758888f, 196.429139f);
        path.Cubic(97.246700f, 195.871022f, 
                   97.698870f, 195.278987f, 
                   98.110488f, 194.663032f);
        path.Line(98.083060f, 194.524429f);
        path.Line(97.780325f, 194.321309f);
        path.Close();
        path.Move(69.848045f, 194.559642f);
        path.Cubic(70.224254f, 195.181179f, 
                   70.634010f, 195.786348f, 
                   71.070465f, 196.366789f);
        path.Line(70.877631f, 196.385550f);
        path.Cubic(70.496389f, 195.878906f, 
                   70.086436f, 195.272986f, 
                   69.706643f, 194.645538f);
        path.Line(69.900065f, 194.645131f);
        path.Close();
        path.Move(70.019143f, 194.456078f);
        path.Line(69.881751f, 194.422348f);
        path.Line(69.569251f, 194.611808f);
        path.Line(69.535545f, 194.749102f);
        path.Cubic(69.917956f, 195.380874f, 
                   70.333537f, 195.995114f, 
                   70.777496f, 196.585539f);
        path.Line(70.917251f, 196.605568f);
        path.Line(71.210220f, 196.386818f);
        path.Line(71.230317f, 196.246591f);
        path.Cubic(70.796840f, 195.670112f, 
                   70.392716f, 195.073261f, 
                   70.019143f, 194.456078f);
        path.Close();
        path.Move(94.881323f, 197.810814f);
        path.Line(94.991205f, 197.932123f);
        path.Cubic(94.520397f, 198.356481f, 
                   93.950015f, 198.816783f, 
                   93.350473f, 199.240667f);
        path.Line(93.336426f, 199.047229f);
        path.Cubic(93.847431f, 198.686283f, 
                   94.416201f, 198.230069f, 
                   94.955594f, 197.744276f);
        path.Close();
        path.Move(94.962787f, 197.602836f);
        path.Line(94.821750f, 197.595664f);
        path.Cubic(94.286603f, 198.077631f, 
                   93.727021f, 198.526477f, 
                   93.139536f, 198.941837f);
        path.Line(93.115569f, 199.081158f);
        path.Line(93.326506f, 199.379988f);
        path.Line(93.465933f, 199.403973f);
        path.Cubic(94.070669f, 198.976417f, 
                   94.650215f, 198.508719f, 
                   95.199734f, 198.013806f);
        path.Line(95.206927f, 197.872366f);
        path.Line(94.962787f, 197.602836f);
        path.Close();
        path.Move(72.106675f, 198.418092f);
        path.Line(72.441158f, 197.967828f);
        path.Line(72.437945f, 198.082504f);
        path.Cubic(72.780525f, 198.602107f, 
                   72.936343f, 199.207727f, 
                   72.948797f, 199.820512f);
        path.Cubic(72.952259f, 199.957369f, 
                   72.949440f, 200.090728f, 
                   72.941162f, 200.226452f);
        path.Line(72.782379f, 200.117061f);
        path.Cubic(72.785563f, 200.086056f, 
                   72.786907f, 199.953508f, 
                   72.783561f, 199.823693f);
        path.Line(72.783594f, 199.824270f);
        path.Line(72.783573f, 199.822239f);
        path.Cubic(72.771843f, 199.244917f, 
                   72.616504f, 198.651179f, 
                   72.300284f, 198.171565f);
        path.Line(72.106675f, 198.418092f);
        path.Close();
        path.Move(72.936293f, 197.636688f);
        path.Line(72.162072f, 198.142913f);
        path.Line(72.133310f, 198.281655f);
        path.Cubic(72.431368f, 198.733721f, 
                   72.572365f, 199.272643f, 
                   72.583615f, 199.826301f);
        path.Line(72.583594f, 199.826270f);
        path.Line(72.583627f, 199.828847f);
        path.Cubic(72.586881f, 199.955072f, 
                   72.585625f, 200.078904f, 
                   72.577882f, 200.204907f);
        path.Line(72.671786f, 200.310865f);
        path.Line(73.035068f, 200.332365f);
        path.Line(73.140790f, 200.238628f);
        path.Cubic(73.149312f, 200.098932f, 
                   73.152313f, 199.956951f, 
                   73.148744f, 199.815950f);
        path.Cubic(73.135829f, 199.180413f, 
                   72.965891f, 198.519913f, 
                   72.604919f, 197.972416f);
        path.Line(72.601706f, 198.087092f);
        path.Line(72.936293f, 197.636688f);
        path.Close();
        path.Move(91.322584f, 200.315485f);
        path.Line(91.402828f, 200.459221f);
        path.Cubic(90.849077f, 200.767986f, 
                   90.190471f, 201.086598f, 
                   89.514007f, 201.370743f);
        path.Line(89.541327f, 201.180102f);
        path.Cubic(90.118332f, 200.938002f, 
                   90.775901f, 200.620327f, 
                   91.409993f, 200.267100f);
        path.Close();
        path.Move(91.448643f, 200.130994f);
        path.Line(91.312663f, 200.092380f);
        path.Cubic(90.683657f, 200.442773f, 
                   90.036048f, 200.755638f, 
                   89.371430f, 201.034803f);
        path.Line(89.318104f, 201.166068f);
        path.Line(89.460682f, 201.502008f);
        path.Line(89.591461f, 201.555137f);
        path.Cubic(90.272803f, 201.268942f, 
                   90.941367f, 200.945514f, 
                   91.587726f, 200.585460f);
        path.Line(91.626377f, 200.449354f);
        path.Line(91.448643f, 200.130994f);
        path.Close();
        path.Move(87.518577f, 202.382951f);
        path.Line(87.675241f, 202.426597f);
        path.Line(87.323628f, 203.581492f);
        path.Line(87.880852f, 202.438470f);
        path.Line(87.693510f, 202.372227f);
        path.Cubic(87.609201f, 202.738642f, 
                   87.698526f, 203.142995f, 
                   87.770696f, 203.541385f);
        path.Cubic(87.821889f, 203.829256f, 
                   87.944564f, 204.115975f, 
                   88.110527f, 204.360905f);
        path.Line(87.920632f, 204.369698f);
        path.Cubic(87.794053f, 204.186283f, 
                   87.665404f, 203.892294f, 
                   87.608174f, 203.570500f);
        path.Cubic(87.537437f, 203.179994f, 
                   87.432266f, 202.764132f, 
                   87.531002f, 202.335045f);
        path.Line(87.529265f, 202.344795f);
        path.Line(87.518577f, 202.382951f);
        path.Close();
        path.Move(87.379861f, 202.136689f);
        path.Line(87.341833f, 202.272445f);
        path.Line(87.344106f, 202.267899f);
        path.Line(87.336096f, 202.290195f);
        path.Cubic(87.226530f, 202.766348f, 
                   87.341861f, 203.222386f, 
                   87.411320f, 203.605834f);
        path.Cubic(87.472654f, 203.950706f, 
                   87.618187f, 204.283277f, 
                   87.809746f, 204.565984f);
        path.Line(87.948865f, 204.592512f);
        path.Line(88.249646f, 204.387432f);
        path.Line(88.276097f, 204.248715f);
        path.Cubic(88.120894f, 204.019665f, 
                   88.014785f, 203.771664f, 
                   87.967549f, 203.506051f);
        path.Cubic(87.894642f, 203.103585f, 
                   87.814221f, 202.739538f, 
                   87.888418f, 202.417073f);
        path.Line(87.701076f, 202.350830f);
        path.Line(88.250500f, 201.223808f);
        path.Line(87.926227f, 202.288903f);
        path.Line(87.379861f, 202.136689f);
        path.Close();
        path.Move(72.367668f, 202.447784f);
        path.Line(72.525341f, 202.493587f);
        path.Cubic(72.345284f, 203.118681f, 
                   71.943455f, 203.771114f, 
                   71.365313f, 204.257455f);
        path.Line(71.335124f, 204.065732f);
        path.Cubic(71.802230f, 203.674809f, 
                   72.199153f, 203.033558f, 
                   72.396822f, 202.352078f);
        path.Close();
        path.Move(72.328677f, 202.228190f);
        path.Line(72.204740f, 202.296362f);
        path.Cubic(72.014693f, 202.951562f, 
                   71.649006f, 203.542351f, 
                   71.130938f, 203.978166f);
        path.Line(71.118711f, 204.118972f);
        path.Line(71.353086f, 204.398262f);
        path.Line(71.494061f, 204.410505f);
        path.Cubic(72.096855f, 203.903426f, 
                   72.529808f, 203.200459f, 
                   72.746432f, 202.453638f);
        path.Line(72.678287f, 202.329750f);
        path.Line(72.328677f, 202.228190f);
        path.Close();
        path.Move(69.229228f, 205.059844f);
        path.Line(69.276229f, 205.219466f);
        path.Line(67.368307f, 205.782080f);
        path.Line(67.321549f, 205.624159f);
        path.Line(69.229228f, 205.059844f);
        path.Close();
        path.Move(69.364522f, 204.811256f);
        path.Line(67.072983f, 205.489121f);
        path.Line(67.233255f, 206.030420f);
        path.Line(69.524553f, 205.354754f);
        path.Line(69.364522f, 204.811256f);
        path.Close();
        path.Move(89.919813f, 205.616581f);
        path.Line(91.737043f, 206.429373f);
        path.Line(91.670198f, 206.578893f);
        path.Line(89.852635f, 205.767733f);
        path.Line(89.919813f, 205.616581f);
        path.Close();
        path.Move(89.818469f, 205.352159f);
        path.Line(89.588771f, 205.868987f);
        path.Line(91.771208f, 206.842987f);
        path.Line(92.001239f, 206.328447f);
        path.Line(89.818469f, 205.352159f);
        path.Close();
        path.Move(65.028201f, 206.301982f);
        path.Line(65.074936f, 206.459821f);
        path.Line(63.167111f, 207.024188f);
        path.Line(63.120377f, 206.866349f);
        path.Line(65.028201f, 206.301982f);
        path.Close();
        path.Move(65.163205f, 206.053478f);
        path.Line(62.871811f, 206.731311f);
        path.Line(63.032107f, 207.272692f);
        path.Line(65.323502f, 206.594859f);
        path.Line(65.163205f, 206.053478f);
        path.Close();
        path.Move(93.919353f, 207.403525f);
        path.Line(95.735104f, 208.216450f);
        path.Line(95.668245f, 208.366003f);
        path.Line(93.851127f, 207.555042f);
        path.Line(93.919353f, 207.403525f);
        path.Close();
        path.Move(93.818929f, 207.139435f);
        path.Line(93.586373f, 207.655898f);
        path.Line(95.769255f, 208.630097f);
        path.Line(95.999270f, 208.115590f);
        path.Line(93.818929f, 207.139435f);
        path.Close();
        path.Move(60.828982f, 207.544172f);
        path.Line(60.875717f, 207.702011f);
        path.Line(58.967892f, 208.266369f);
        path.Line(58.921159f, 208.108538f);
        path.Line(60.828982f, 207.544172f);
        path.Close();
        path.Move(60.963986f, 207.295668f);
        path.Line(58.672591f, 207.973502f);
        path.Line(58.832890f, 208.514871f);
        path.Line(61.124283f, 207.837049f);
        path.Line(60.963986f, 207.295668f);
        path.Close();
        path.Move(56.627810f, 208.786361f);
        path.Line(56.674545f, 208.944201f);
        path.Line(54.766721f, 209.508559f);
        path.Line(54.719986f, 209.350719f);
        path.Line(56.627810f, 208.786361f);
        path.Close();
        path.Move(56.762814f, 208.537859f);
        path.Line(54.471420f, 209.215681f);
        path.Line(54.631717f, 209.757061f);
        path.Line(56.923111f, 209.079239f);
        path.Line(56.762814f, 208.537859f);
        path.Close();
        path.Move(97.917859f, 209.190801f);
        path.Line(99.735090f, 210.003584f);
        path.Line(99.668244f, 210.153113f);
        path.Line(97.850682f, 209.341953f);
        path.Line(97.917859f, 209.190801f);
        path.Close();
        path.Move(97.816515f, 208.926379f);
        path.Line(97.586818f, 209.443207f);
        path.Line(99.769256f, 210.417207f);
        path.Line(99.999284f, 209.902656f);
        path.Line(97.816515f, 208.926379f);
        path.Close();
        path.Move(52.428439f, 210.026611f);
        path.Line(52.475440f, 210.186242f);
        path.Line(50.565580f, 210.748905f);
        path.Line(50.518821f, 210.590983f);
        path.Line(52.428439f, 210.026611f);
        path.Close();
        path.Move(52.563749f, 209.778069f);
        path.Line(50.270241f, 210.455897f);
        path.Line(50.430514f, 210.997195f);
        path.Line(52.723778f, 210.321578f);
        path.Line(52.563749f, 209.778069f);
        path.Close();
        path.Move(101.917436f, 210.977671f);
        path.Line(103.733315f, 211.788874f);
        path.Line(103.666093f, 211.940133f);
        path.Line(101.849177f, 211.129262f);
        path.Line(101.917436f, 210.977671f);
        path.Close();
        path.Move(101.816944f, 210.713729f);
        path.Line(101.584423f, 211.230118f);
        path.Line(103.767507f, 212.204407f);
        path.Line(103.997145f, 211.687686f);
        path.Line(101.816944f, 210.713729f);
        path.Close();
        path.Move(48.227420f, 211.268781f);
        path.Line(48.274154f, 211.426621f);
        path.Line(46.366330f, 211.990979f);
        path.Line(46.319595f, 211.833139f);
        path.Line(48.227420f, 211.268781f);
        path.Close();
        path.Move(48.362424f, 211.020279f);
        path.Line(46.071029f, 211.698101f);
        path.Line(46.231326f, 212.239481f);
        path.Line(48.522720f, 211.561659f);
        path.Line(48.362424f, 211.020279f);
        path.Close();
        path.Move(105.915937f, 212.764947f);
        path.Line(107.732852f, 213.575818f);
        path.Line(107.664595f, 213.727400f);
        path.Line(105.848716f, 212.916205f);
        path.Line(105.915937f, 212.764947f);
        path.Close();
        path.Move(105.814523f, 212.500673f);
        path.Line(105.584884f, 213.017395f);
        path.Line(107.765085f, 213.991340f);
        path.Line(107.997608f, 213.474962f);
        path.Line(105.814523f, 212.500673f);
        path.Close();
        path.Move(44.835590f, 213.645249f);
        path.Line(44.994944f, 213.690413f);
        path.Cubic(44.905394f, 213.996270f, 
                   44.866998f, 214.439308f, 
                   44.961234f, 214.841218f);
        path.Line(45.137933f, 215.608648f);
        path.Line(44.977299f, 215.645703f);
        path.Line(44.800564f, 214.879854f);
        path.Line(44.800485f, 214.879513f);
        path.Cubic(44.695605f, 214.432197f, 
                   44.738191f, 213.979234f, 
                   44.861739f, 213.549086f);
        path.Close();
        path.Move(44.792893f, 213.425270f);
        path.Line(44.669511f, 213.493874f);
        path.Cubic(44.540815f, 213.941946f, 
                   44.493423f, 214.446023f, 
                   44.605765f, 214.925167f);
        path.Line(44.827389f, 215.885537f);
        path.Line(45.377691f, 215.758592f);
        path.Line(45.156044f, 214.795952f);
        path.Line(45.155954f, 214.795562f);
        path.Cubic(45.069010f, 214.424752f, 
                   45.102974f, 214.032850f, 
                   45.213298f, 213.648725f);
        path.Line(45.144452f, 213.524910f);
        path.Line(44.792893f, 213.425270f);
        path.Close();
        path.Move(109.831480f, 214.515511f);
        path.Cubic(110.433396f, 214.875517f, 
                   111.184613f, 215.026600f, 
                   111.812564f, 215.457457f);
        path.Line(111.635255f, 215.538423f);
        path.Cubic(111.138605f, 215.195318f, 
                   110.391876f, 215.042280f, 
                   109.746639f, 214.656369f);
        path.Line(109.918038f, 214.565341f);
        path.Close();
        path.Move(109.934140f, 214.343869f);
        path.Line(109.797061f, 214.378240f);
        path.Line(109.609561f, 214.690740f);
        path.Line(109.643981f, 214.828011f);
        path.Cubic(110.318404f, 215.231380f, 
                   111.058815f, 215.383122f, 
                   111.605534f, 215.758237f);
        path.Line(111.744483f, 215.732478f);
        path.Line(111.951513f, 215.431698f);
        path.Line(111.925716f, 215.292543f);
        path.Cubic(111.264087f, 214.838580f, 
                   110.506544f, 214.686223f, 
                   109.934140f, 214.343869f);
        path.Close();
        path.Move(113.231200f, 217.271660f);
        path.Line(113.213870f, 217.232928f);
        path.Line(113.450895f, 217.883782f);
        path.Line(113.909056f, 219.149168f);
        path.Line(113.753385f, 219.205775f);
        path.Line(113.297091f, 217.940508f);
        path.Line(113.061343f, 217.296137f);
        path.Line(113.081411f, 217.340390f);
        path.Line(113.231200f, 217.271660f);
        path.Close();
        path.Move(113.331300f, 217.005680f);
        path.Line(112.817029f, 217.241650f);
        path.Line(112.876097f, 217.371903f);
        path.Line(113.109109f, 218.008792f);
        path.Line(113.633275f, 219.462265f);
        path.Line(114.165104f, 219.268872f);
        path.Line(113.638885f, 217.815518f);
        path.Line(113.399350f, 217.157772f);
        path.Line(113.331300f, 217.005680f);
        path.Close();
        path.Move(45.672782f, 217.937708f);
        path.Line(46.116571f, 219.876219f);
        path.Line(45.955918f, 219.913279f);
        path.Line(45.510588f, 217.974056f);
        path.Line(45.672782f, 217.937708f);
        path.Close();
        path.Move(45.823312f, 217.699012f);
        path.Line(45.270662f, 217.822864f);
        path.Line(45.805800f, 220.153161f);
        path.Line(46.356085f, 220.026221f);
        path.Line(45.823312f, 217.699012f);
        path.Close();
        path.Move(63.738157f, 219.935509f);
        path.Line(63.789725f, 220.091032f);
        path.Line(63.847075f, 220.071890f);
        path.Line(63.861323f, 220.071890f);
        path.Line(63.832556f, 220.076117f);
        path.Cubic(63.146343f, 220.282229f, 
                   62.453009f, 220.449713f, 
                   61.762658f, 220.623754f);
        path.Line(61.818871f, 220.439724f);
        path.Cubic(62.411756f, 220.290200f, 
                   63.103011f, 220.123397f, 
                   63.780695f, 219.920020f);
        path.Line(63.785859f, 219.918316f);
        path.Line(63.738157f, 219.935509f);
        path.Close();
        path.Move(63.863405f, 219.677771f);
        path.Line(63.720605f, 219.729241f);
        path.Cubic(63.050771f, 219.930263f, 
                   62.363850f, 220.096020f, 
                   61.672817f, 220.270244f);
        path.Line(61.600345f, 220.391841f);
        path.Line(61.690185f, 220.745351f);
        path.Line(61.811550f, 220.817686f);
        path.Cubic(62.500937f, 220.643887f, 
                   63.198629f, 220.475351f, 
                   63.890090f, 220.267663f);
        path.Line(63.861323f, 220.271890f);
        path.Line(63.879571f, 220.271890f);
        path.Line(64.042381f, 220.217548f);
        path.Line(63.863405f, 219.677771f);
        path.Close();
        path.Move(59.498533f, 221.005337f);
        path.Line(59.537470f, 221.166393f);
        path.Cubic(58.924961f, 221.313666f, 
                   58.213800f, 221.482444f, 
                   57.502623f, 221.648716f);
        path.Line(57.563215f, 221.465274f);
        path.Cubic(58.176669f, 221.321872f, 
                   58.886016f, 221.152599f, 
                   59.595641f, 220.982000f);
        path.Close();
        path.Move(59.669466f, 220.861271f);
        path.Line(59.548891f, 220.787540f);
        path.Cubic(58.839430f, 220.958101f, 
                   58.130691f, 221.127228f, 
                   57.420593f, 221.293246f);
        path.Line(57.345920f, 221.413106f);
        path.Line(57.427950f, 221.768576f);
        path.Line(57.548155f, 221.843464f);
        path.Cubic(58.259658f, 221.677116f, 
                   58.971429f, 221.508194f, 
                   59.681577f, 221.337459f);
        path.Line(59.755401f, 221.216731f);
        path.Line(59.669466f, 220.861271f);
        path.Close();
        path.Move(114.685213f, 221.303407f);
        path.Cubic(114.932534f, 221.990295f, 
                   115.178639f, 222.677554f, 
                   115.423363f, 223.365544f);
        path.Line(115.234453f, 223.327165f);
        path.Cubic(115.023456f, 222.733954f, 
                   114.776901f, 222.047393f, 
                   114.529637f, 221.360653f);
        path.Line(114.719190f, 221.397795f);
        path.Close();
        path.Move(114.873387f, 221.235653f);
        path.Line(114.745126f, 221.175551f);
        path.Line(114.401376f, 221.300551f);
        path.Line(114.341463f, 221.428407f);
        path.Cubic(114.588699f, 222.115067f, 
                   114.835124f, 222.801266f, 
                   115.079613f, 223.488594f);
        path.Line(115.207532f, 223.549230f);
        path.Line(115.551282f, 223.426180f);
        path.Line(115.611797f, 223.298516f);
        path.Cubic(115.367001f, 222.610326f, 
                   115.120766f, 221.922705f, 
                   114.873387f, 221.235653f);
        path.Close();
        path.Move(63.920312f, 222.068750f);
        path.Line(64.083638f, 222.068750f);
        path.Line(64.085456f, 224.058200f);
        path.Line(63.920312f, 224.058200f);
        path.Line(63.920312f, 222.068750f);
        path.Close();
        path.Move(63.720312f, 221.868750f);
        path.Line(63.720312f, 224.258200f);
        path.Line(64.285638f, 224.258200f);
        path.Line(64.283456f, 221.868750f);
        path.Line(63.720312f, 221.868750f);
        path.Close();
        path.Move(46.651503f, 222.205881f);
        path.Line(47.096974f, 224.145715f);
        path.Line(46.936387f, 224.182759f);
        path.Line(46.490917f, 222.242925f);
        path.Line(46.651503f, 222.205881f);
        path.Close();
        path.Move(46.801621f, 221.965999f);
        path.Line(46.251271f, 222.092955f);
        path.Line(46.786269f, 224.422641f);
        path.Line(47.336620f, 224.295685f);
        path.Line(46.801621f, 221.965999f);
        path.Close();
        path.Move(56.816016f, 223.153128f);
        path.Line(56.816016f, 223.043020f);
        path.Line(56.816453f, 223.052359f);
        path.Cubic(56.884675f, 223.779668f, 
                   56.947103f, 224.506576f, 
                   57.005792f, 225.234645f);
        path.Line(56.833802f, 225.148196f);
        path.Cubic(56.783243f, 224.520639f, 
                   56.720420f, 223.795117f, 
                   56.652297f, 223.068831f);
        path.Line(56.816016f, 223.153128f);
        path.Close();
        path.Move(57.016016f, 222.932812f);
        path.Line(56.543090f, 222.978636f);
        path.Line(56.453171f, 223.087509f);
        path.Cubic(56.521228f, 223.813083f, 
                   56.583937f, 224.537301f, 
                   56.642510f, 225.263945f);
        path.Line(56.750226f, 225.355586f);
        path.Line(57.113508f, 225.326286f);
        path.Line(57.205146f, 225.218575f);
        path.Cubic(57.146415f, 224.489984f, 
                   57.083875f, 223.761772f, 
                   57.015579f, 223.033681f);
        path.Line(57.016016f, 223.043020f);
        path.Line(57.016016f, 222.932812f);
        path.Close();
        path.Move(97.111719f, 223.380442f);
        path.Line(98.562774f, 223.984752f);
        path.Line(98.718966f, 224.051165f);
        path.Line(98.655461f, 224.202868f);
        path.Line(98.497661f, 224.136302f);
        path.Line(97.276953f, 223.627297f);
        path.Line(97.276953f, 223.874610f);
        path.Line(97.111719f, 223.874610f);
        path.Line(97.111719f, 223.380442f);
        path.Close();
        path.Move(96.911719f, 223.080498f);
        path.Line(96.911719f, 224.074610f);
        path.Line(97.476953f, 224.074610f);
        path.Line(97.476953f, 223.927383f);
        path.Line(98.420307f, 224.320738f);
        path.Line(98.762507f, 224.465092f);
        path.Line(98.980252f, 223.944935f);
        path.Line(98.640350f, 223.800408f);
        path.Line(96.911719f, 223.080498f);
        path.Close();
        path.Move(100.924754f, 224.974532f);
        path.Line(101.164540f, 225.074674f);
        path.Line(102.759973f, 225.743130f);
        path.Line(102.696215f, 225.896321f);
        path.Line(101.099264f, 225.226158f);
        path.Line(100.861277f, 225.126177f);
        path.Line(100.924754f, 224.974532f);
        path.Close();
        path.Move(100.817426f, 224.712968f);
        path.Line(100.599663f, 225.233203f);
        path.Line(101.021836f, 225.410562f);
        path.Line(102.803785f, 226.158359f);
        path.Line(103.021287f, 225.635770f);
        path.Line(101.241720f, 224.890166f);
        path.Line(100.817426f, 224.712968f);
        path.Close();
        path.Move(116.188963f, 225.524007f);
        path.Line(116.425200f, 226.193353f);
        path.Line(116.849136f, 227.401753f);
        path.Line(116.694025f, 227.456393f);
        path.Line(116.270110f, 226.248057f);
        path.Line(116.033850f, 225.578652f);
        path.Line(116.188963f, 225.524007f);
        path.Close();
        path.Move(116.311037f, 225.268953f);
        path.Line(115.778650f, 225.456508f);
        path.Line(116.081450f, 226.314443f);
        path.Line(116.571595f, 227.711567f);
        path.Line(117.103984f, 227.524027f);
        path.Line(116.613860f, 226.126967f);
        path.Line(116.311037f, 225.268953f);
        path.Close();
        path.Move(97.281038f, 226.264608f);
        path.Line(97.284582f, 228.255510f);
        path.Line(97.119347f, 228.255510f);
        path.Line(97.115802f, 226.265513f);
        path.Line(97.281038f, 226.264608f);
        path.Close();
        path.Move(97.480680f, 226.063512f);
        path.Line(96.915448f, 226.066607f);
        path.Line(96.919703f, 228.455510f);
        path.Line(97.484938f, 228.455510f);
        path.Line(97.480680f, 226.063512f);
        path.Close();
        path.Move(64.085637f, 226.448212f);
        path.Line(64.087411f, 228.439110f);
        path.Line(63.922266f, 228.439110f);
        path.Line(63.922266f, 226.449111f);
        path.Line(64.085637f, 226.448212f);
        path.Close();
        path.Move(64.285457f, 226.247108f);
        path.Line(63.722266f, 226.250209f);
        path.Line(63.722266f, 228.639110f);
        path.Line(64.287589f, 228.639110f);
        path.Line(64.285457f, 226.247108f);
        path.Close();
        path.Move(47.631972f, 226.475601f);
        path.Line(48.077443f, 228.415445f);
        path.Line(47.916856f, 228.452489f);
        path.Line(47.471385f, 226.512645f);
        path.Line(47.631972f, 226.475601f);
        path.Close();
        path.Move(47.782090f, 226.235719f);
        path.Line(47.231739f, 226.362675f);
        path.Line(47.766738f, 228.692371f);
        path.Line(48.317089f, 228.565415f);
        path.Line(47.782090f, 226.235719f);
        path.Close();
        path.Move(104.929400f, 226.791124f);
        path.Line(105.564786f, 228.677754f);
        path.Line(105.408490f, 228.730736f);
        path.Line(104.773104f, 226.844106f);
        path.Line(104.929400f, 226.791124f);
        path.Close();
        path.Move(105.054980f, 226.537376f);
        path.Line(104.519856f, 226.718774f);
        path.Line(105.282910f, 228.984484f);
        path.Line(105.818034f, 228.803086f);
        path.Line(105.054980f, 226.537376f);
        path.Close();
        path.Move(57.363672f, 227.508016f);
        path.Line(57.363672f, 227.413980f);
        path.Line(57.163868f, 227.420239f);
        path.Cubic(57.209588f, 228.149327f, 
                   57.248656f, 228.880431f, 
                   57.269180f, 229.612094f);
        path.Line(57.102899f, 229.516581f);
        path.Cubic(57.085405f, 228.888639f, 
                   57.045841f, 228.159342f, 
                   57.000195f, 227.431392f);
        path.Line(57.363672f, 227.508016f);
        path.Close();
        path.Move(57.163672f, 227.320484f);
        path.Line(56.893963f, 227.337857f);
        path.Line(56.800587f, 227.443908f);
        path.Cubic(56.846181f, 228.171018f, 
                   56.885557f, 228.896861f, 
                   56.905898f, 229.622094f);
        path.Line(57.008611f, 229.719252f);
        path.Line(57.371893f, 229.709252f);
        path.Line(57.469102f, 229.606486f);
        path.Cubic(57.448506f, 228.872289f, 
                   57.409254f, 228.137733f, 
                   57.363476f, 227.407721f);
        path.Line(57.163672f, 227.413980f);
        path.Line(57.163672f, 227.320484f);
        path.Close();
        path.Move(117.598787f, 229.567846f);
        path.Cubic(117.836139f, 230.258612f, 
                   118.068065f, 230.949927f, 
                   118.291505f, 231.645985f);
        path.Line(118.103676f, 231.601056f);
        path.Cubic(117.911475f, 231.002115f, 
                   117.679312f, 230.310020f, 
                   117.442233f, 229.620035f);
        path.Line(117.631117f, 229.662037f);
        path.Close();
        path.Move(117.787933f, 229.502854f);
        path.Line(117.661258f, 229.440643f);
        path.Line(117.315558f, 229.557823f);
        path.Line(117.253087f, 229.685025f);
        path.Cubic(117.489928f, 230.374320f, 
                   117.721445f, 231.064485f, 
                   117.943845f, 231.757314f);
        path.Line(118.069557f, 231.821986f);
        path.Line(118.417217f, 231.710656f);
        path.Line(118.481935f, 231.584855f);
        path.Cubic(118.258095f, 230.887553f, 
                   118.025521f, 230.194308f, 
                   117.787933f, 229.502854f);
        path.Close();
        path.Move(97.121662f, 230.645110f);
        path.Line(97.286896f, 230.645110f);
        path.Line(97.290440f, 232.634560f);
        path.Line(97.125206f, 232.634560f);
        path.Line(97.121662f, 230.645110f);
        path.Close();
        path.Move(96.921306f, 230.445110f);
        path.Line(96.925562f, 232.834560f);
        path.Line(97.490796f, 232.834560f);
        path.Line(97.486540f, 230.445110f);
        path.Line(96.921306f, 230.445110f);
        path.Close();
        path.Move(48.612019f, 230.745125f);
        path.Line(48.662165f, 230.967617f);
        path.Line(48.663935f, 230.974365f);
        path.Cubic(48.683518f, 231.039641f, 
                   48.685490f, 231.039834f, 
                   48.666152f, 230.977078f);
        path.Cubic(48.844504f, 231.549957f, 
                   49.144625f, 232.097466f, 
                   49.537769f, 232.550289f);
        path.Line(49.348788f, 232.581352f);
        path.Cubic(48.999571f, 232.180808f, 
                   48.694655f, 231.627522f, 
                   48.507606f, 231.025384f);
        path.Line(48.501996f, 231.011230f);
        path.Line(48.503105f, 231.013504f);
        path.Line(48.449952f, 230.782306f);
        path.Line(48.612019f, 230.745125f);
        path.Close();
        path.Move(48.762981f, 230.505295f);
        path.Line(48.210204f, 230.632114f);
        path.Line(48.313311f, 231.080596f);
        path.Line(48.318893f, 231.092044f);
        path.Cubic(48.509687f, 231.706258f, 
                   48.834645f, 232.295912f, 
                   49.262378f, 232.788579f);
        path.Line(49.403323f, 232.798641f);
        path.Line(49.678713f, 232.560351f);
        path.Line(49.688791f, 232.419171f);
        path.Cubic(49.309701f, 231.982534f, 
                   49.029510f, 231.471383f, 
                   48.857198f, 230.917905f);
        path.Cubic(48.837416f, 230.853706f, 
                   48.836518f, 230.853619f, 
                   48.855501f, 230.916895f);
        path.Line(48.762981f, 230.505295f);
        path.Close();
        path.Move(63.924219f, 230.828730f);
        path.Line(64.089453f, 230.828730f);
        path.Line(64.089453f, 232.818180f);
        path.Line(63.924219f, 232.818180f);
        path.Line(63.924219f, 230.828730f);
        path.Close();
        path.Move(63.724219f, 230.628730f);
        path.Line(63.724219f, 233.018180f);
        path.Line(64.289453f, 233.018180f);
        path.Line(64.289453f, 230.628730f);
        path.Line(63.724219f, 230.628730f);
        path.Close();
        path.Move(106.327382f, 230.943120f);
        path.Line(106.401285f, 231.164841f);
        path.Line(106.963132f, 232.828204f);
        path.Line(106.806845f, 232.881184f);
        path.Line(106.245225f, 231.218495f);
        path.Line(106.171237f, 230.995165f);
        path.Line(106.327382f, 230.943120f);
        path.Close();
        path.Move(106.453878f, 230.690140f);
        path.Line(105.918603f, 230.868555f);
        path.Line(106.055555f, 231.281945f);
        path.Line(106.681435f, 233.134876f);
        path.Line(107.216548f, 232.953476f);
        path.Line(106.590895f, 231.101219f);
        path.Line(106.453878f, 230.690140f);
        path.Close();
        path.Move(56.773561f, 231.805705f);
        path.Line(56.921211f, 231.879975f);
        path.Cubic(56.627880f, 232.469229f, 
                   56.076536f, 232.993274f, 
                   55.460235f, 233.403292f);
        path.Line(55.450977f, 233.210718f);
        path.Cubic(55.961750f, 232.871986f, 
                   56.502746f, 232.350361f, 
                   56.819890f, 231.716855f);
        path.Close();
        path.Move(56.775406f, 231.582755f);
        path.Line(56.641048f, 231.627325f);
        path.Cubic(56.339250f, 232.230179f, 
                   55.835932f, 232.715474f, 
                   55.257110f, 233.100552f);
        path.Line(55.229460f, 233.239526f);
        path.Line(55.432585f, 233.542266f);
        path.Line(55.571015f, 233.569808f);
        path.Cubic(56.201754f, 233.150186f, 
                   56.791046f, 232.590071f, 
                   57.146061f, 231.880926f);
        path.Line(57.101578f, 231.746825f);
        path.Line(56.775406f, 231.582755f);
        path.Close();
        path.Move(51.277940f, 233.776906f);
        path.Cubic(51.940947f, 234.036942f, 
                   52.681640f, 234.132399f, 
                   53.388701f, 234.048747f);
        path.Line(53.308738f, 234.224065f);
        path.Cubic(52.664908f, 234.301333f, 
                   51.914693f, 234.203700f, 
                   51.218148f, 233.930562f);
        path.Line(51.371584f, 233.812353f);
        path.Close();
        path.Move(51.350966f, 233.590714f);
        path.Line(51.221313f, 233.647411f);
        path.Line(51.088501f, 233.987261f);
        path.Line(51.145134f, 234.116758f);
        path.Cubic(51.864537f, 234.398860f, 
                   52.663732f, 234.502867f, 
                   53.431669f, 234.412028f);
        path.Line(53.519230f, 234.300974f);
        path.Line(53.476260f, 233.937694f);
        path.Line(53.365203f, 233.850133f);
        path.Cubic(52.682688f, 233.930881f, 
                   51.990993f, 233.841738f, 
                   51.350966f, 233.590714f);
        path.Close();
        path.Move(118.455995f, 233.897770f);
        path.Line(118.620590f, 233.916351f);
        path.Cubic(118.547293f, 234.557871f, 
                   118.303384f, 235.266191f, 
                   117.947423f, 235.917078f);
        path.Line(117.849779f, 235.749262f);
        path.Cubic(118.146419f, 235.208539f, 
                   118.386235f, 234.509043f, 
                   118.468476f, 233.798833f);
        path.Close();
        path.Move(118.380358f, 233.687961f);
        path.Line(118.269804f, 233.775827f);
        path.Cubic(118.190045f, 234.464597f, 
                   117.962761f, 235.127541f, 
                   117.627103f, 235.741298f);
        path.Line(117.666731f, 235.876947f);
        path.Line(117.987051f, 236.052727f);
        path.Line(118.122897f, 236.013042f);
        path.Cubic(118.486976f, 235.347309f, 
                   118.743467f, 234.602449f, 
                   118.831757f, 233.839840f);
        path.Line(118.743638f, 233.728971f);
        path.Line(118.380358f, 233.687961f);
        path.Close();
        path.Move(63.910946f, 234.747856f);
        path.Line(64.073014f, 234.774283f);
        path.Line(63.758875f, 236.738985f);
        path.Line(63.595055f, 236.712417f);
        path.Line(63.910946f, 234.747856f);
        path.Close();
        path.Move(63.745304f, 234.518204f);
        path.Line(63.365883f, 236.877863f);
        path.Line(63.924719f, 236.968495f);
        path.Line(64.301986f, 234.608977f);
        path.Line(63.745304f, 234.518204f);
        path.Close();
        path.Move(97.294620f, 235.024599f);
        path.Line(97.296389f, 237.015500f);
        path.Line(97.133019f, 237.015500f);
        path.Line(97.129474f, 235.025503f);
        path.Line(97.294620f, 235.024599f);
        path.Close();
        path.Move(97.494442f, 234.823501f);
        path.Line(96.929120f, 234.826597f);
        path.Line(96.933375f, 237.215500f);
        path.Line(97.496567f, 237.215500f);
        path.Line(97.494442f, 234.823501f);
        path.Close();
        path.Move(107.692970f, 235.104399f);
        path.Line(107.692970f, 234.963160f);
        path.Line(107.698701f, 234.996528f);
        path.Cubic(107.805376f, 235.297895f, 
                   107.897451f, 235.600950f, 
                   108.012618f, 235.888959f);
        path.Line(108.005470f, 235.851830f);
        path.Line(108.005470f, 235.853830f);
        path.Line(108.013094f, 235.892127f);
        path.Cubic(108.165911f, 236.260735f, 
                   108.392106f, 236.606529f, 
                   108.659956f, 236.904991f);
        path.Line(108.471351f, 236.940245f);
        path.Cubic(108.254316f, 236.700204f, 
                   108.023211f, 236.346644f, 
                   107.859977f, 235.952294f);
        path.Line(107.867580f, 235.990540f);
        path.Line(107.867580f, 235.988540f);
        path.Line(107.860419f, 235.951379f);
        path.Cubic(107.740268f, 235.651205f, 
                   107.648116f, 235.346457f, 
                   107.543489f, 235.050872f);
        path.Line(107.692970f, 235.104399f);
        path.Close();
        path.Move(107.892970f, 234.821901f);
        path.Line(107.415995f, 234.989921f);
        path.Line(107.354951f, 235.117608f);
        path.Cubic(107.458024f, 235.408803f, 
                   107.551352f, 235.717435f, 
                   107.674741f, 236.025701f);
        path.Line(107.667580f, 235.988540f);
        path.Line(107.667580f, 235.990540f);
        path.Line(107.675183f, 236.028786f);
        path.Cubic(107.845569f, 236.440416f, 
                   108.095264f, 236.822416f, 
                   108.388465f, 237.149130f);
        path.Line(108.529756f, 237.156697f);
        path.Line(108.801246f, 236.912557f);
        path.Line(108.808804f, 236.771409f);
        path.Cubic(108.551134f, 236.484291f, 
                   108.343509f, 236.166885f, 
                   108.197846f, 235.815533f);
        path.Line(108.205470f, 235.853830f);
        path.Line(108.205470f, 235.851830f);
        path.Line(108.198322f, 235.814701f);
        path.Cubic(108.086329f, 235.534630f, 
                   107.995424f, 235.235425f, 
                   107.887239f, 234.929792f);
        path.Line(107.892970f, 234.963160f);
        path.Line(107.892970f, 234.821901f);
        path.Close();
        path.Move(116.378194f, 237.572632f);
        path.Line(116.484282f, 237.699031f);
        path.Line(116.437101f, 237.738841f);
        path.Line(116.243750f, 237.888683f);
        path.Line(116.243750f, 237.939700f);
        path.Line(116.282930f, 237.860321f);
        path.Cubic(115.784968f, 238.241858f, 
                   115.222689f, 238.514488f, 
                   114.629742f, 238.703818f);
        path.Line(114.674335f, 238.515447f);
        path.Cubic(115.151050f, 238.364105f, 
                   115.705289f, 238.093240f, 
                   116.179910f, 237.730057f);
        path.Line(116.180744f, 237.729411f);
        path.Line(116.334367f, 237.609268f);
        path.Line(116.378194f, 237.572632f);
        path.Close();
        path.Move(116.403066f, 237.291168f);
        path.Line(116.208593f, 237.453732f);
        path.Line(116.057953f, 237.571542f);
        path.Cubic(115.599571f, 237.922300f, 
                   115.076330f, 238.178015f, 
                   114.518413f, 238.356158f);
        path.Line(114.453594f, 238.481917f);
        path.Line(114.564924f, 238.829577f);
        path.Line(114.690578f, 238.894342f);
        path.Cubic(115.297111f, 238.700672f, 
                   115.890492f, 238.412962f, 
                   116.404570f, 238.019079f);
        path.Line(116.443750f, 237.939700f);
        path.Line(116.443750f, 237.986717f);
        path.Line(116.562899f, 237.894379f);
        path.Line(116.765718f, 237.723249f);
        path.Line(116.403066f, 237.291168f);
        path.Close();
        path.Move(110.592818f, 237.982290f);
        path.Line(110.433580f, 237.982290f);
        path.Line(110.390087f, 238.172337f);
        path.Cubic(111.036851f, 238.484725f, 
                   111.741589f, 238.704109f, 
                   112.453249f, 238.787087f);
        path.Line(112.335871f, 238.937314f);
        path.Cubic(111.696808f, 238.863611f, 
                   110.985044f, 238.642123f, 
                   110.318882f, 238.320373f);
        path.Line(110.592818f, 237.982290f);
        path.Close();
        path.Move(110.274362f, 238.182290f);
        path.Line(110.185313f, 238.366991f);
        path.Line(110.231898f, 238.500467f);
        path.Cubic(110.911436f, 238.828677f, 
                   111.655152f, 239.060109f, 
                   112.412244f, 239.148417f);
        path.Line(112.523192f, 239.060365f);
        path.Line(112.564192f, 238.699035f);
        path.Line(112.476411f, 238.588433f);
        path.Cubic(111.783251f, 238.507611f, 
                   111.110469f, 238.298175f, 
                   110.477073f, 237.992243f);
        path.Line(110.433580f, 238.182290f);
        path.Line(110.274362f, 238.182290f);
        path.Close();
        path.Move(63.215647f, 239.072031f);
        path.Line(63.379555f, 239.098613f);
        path.Line(63.063649f, 241.063259f);
        path.Line(62.899742f, 241.036677f);
        path.Line(63.215647f, 239.072031f);
        path.Close();
        path.Move(63.049977f, 238.842549f);
        path.Line(62.670570f, 241.202123f);
        path.Line(63.229319f, 241.292741f);
        path.Line(63.608727f, 238.933167f);
        path.Line(63.049977f, 238.842549f);
        path.Close();
        path.Move(97.135334f, 239.404936f);
        path.Line(97.300569f, 239.404914f);
        path.Line(97.304114f, 241.394897f);
        path.Line(97.138877f, 241.395802f);
        path.Line(97.135334f, 239.404936f);
        path.Close();
        path.Move(96.934978f, 239.204964f);
        path.Line(96.939235f, 241.596898f);
        path.Line(97.504468f, 241.593803f);
        path.Line(97.500213f, 239.204886f);
        path.Line(96.934978f, 239.204964f);
        path.Close();
        path.Move(62.522274f, 243.396336f);
        path.Line(62.684256f, 243.422748f);
        path.Line(62.368351f, 245.387394f);
        path.Line(62.206369f, 245.360982f);
        path.Line(62.522274f, 243.396336f);
        path.Close();
        path.Move(62.356632f, 243.166684f);
        path.Line(61.977225f, 245.526258f);
        path.Line(62.533993f, 245.617046f);
        path.Line(62.913400f, 243.257472f);
        path.Line(62.356632f, 243.166684f);
        path.Close();
        path.Move(97.463215f, 243.755457f);
        path.Line(97.832437f, 245.709804f);
        path.Line(97.671468f, 245.740609f);
        path.Line(97.302413f, 243.785330f);
        path.Line(97.463215f, 243.755457f);
        path.Close();
        path.Move(97.622723f, 243.522403f);
        path.Line(97.068681f, 243.625330f);
        path.Line(97.512126f, 245.974731f);
        path.Line(98.066001f, 245.868736f);
        path.Line(97.622723f, 243.522403f);
        path.Close();
        path.Move(61.826978f, 247.720544f);
        path.Line(61.989028f, 247.746946f);
        path.Line(61.674805f, 249.712168f);
        path.Line(61.511142f, 249.686531f);
        path.Line(61.826978f, 247.720544f);
        path.Close();
        path.Move(61.661304f, 247.490916f);
        path.Line(61.281826f, 249.853049f);
        path.Line(61.840819f, 249.940612f);
        path.Line(62.218004f, 247.581614f);
        path.Line(61.661304f, 247.490916f);
        path.Close();
        path.Move(80.626189f, 247.807055f);
        path.Line(80.630241f, 247.807110f);
        path.Line(80.635463f, 247.807110f);
        path.Cubic(81.051886f, 247.818280f, 
                   81.457001f, 247.935605f, 
                   81.800519f, 248.186324f);
        path.Cubic(81.993041f, 248.324844f, 
                   82.152054f, 248.490671f, 
                   82.290728f, 248.678596f);
        path.Line(82.097469f, 248.697375f);
        path.Cubic(82.031670f, 248.604512f, 
                   81.876240f, 248.444470f, 
                   81.704987f, 248.321249f);
        path.Line(81.646582f, 248.302420f);
        path.Line(81.744582f, 248.302420f);
        path.Line(81.744582f, 248.400420f);
        path.Line(81.703535f, 248.319645f);
        path.Cubic(81.401404f, 248.099136f, 
                   81.009422f, 247.982802f, 
                   80.631726f, 247.972338f);
        path.Cubic(80.627431f, 247.972216f, 
                   80.626125f, 247.972274f, 
                   80.628532f, 247.972312f);
        path.Cubic(80.520340f, 247.975976f, 
                   80.416406f, 247.980500f, 
                   80.325497f, 247.997381f);
        path.Line(80.394541f, 247.820225f);
        path.Cubic(80.411574f, 247.812871f, 
                   80.520954f, 247.810998f, 
                   80.628744f, 247.806960f);
        path.Close();
        path.Move(80.626352f, 247.607039f);
        path.Line(80.621256f, 247.607100f);
        path.Cubic(80.515498f, 247.611062f, 
                   80.391262f, 247.613189f, 
                   80.258888f, 247.638048f);
        path.Line(80.179009f, 247.754502f);
        path.Line(80.245419f, 248.113872f);
        path.Line(80.362011f, 248.194019f);
        path.Cubic(80.439122f, 248.179700f, 
                   80.528192f, 248.175824f, 
                   80.630461f, 248.172239f);
        path.Cubic(80.629059f, 248.172346f, 
                   80.629083f, 248.172344f, 
                   80.626101f, 248.172259f);
        path.Cubic(80.977664f, 248.181998f, 
                   81.311392f, 248.281044f, 
                   81.585629f, 248.481195f);
        path.Line(81.544582f, 248.400420f);
        path.Line(81.544582f, 248.502420f);
        path.Line(81.613824f, 248.502420f);
        path.Cubic(81.745082f, 248.596490f, 
                   81.878772f, 248.734148f, 
                   81.997758f, 248.895396f);
        path.Line(82.137708f, 248.916404f);
        path.Line(82.430677f, 248.699604f);
        path.Line(82.451656f, 248.559844f);
        path.Cubic(82.305330f, 248.361549f, 
                   82.124717f, 248.173196f, 
                   81.917876f, 248.024377f);
        path.Cubic(81.546463f, 247.753295f, 
                   81.082886f, 247.619040f, 
                   80.639499f, 247.607146f);
        path.Line(80.636817f, 247.607110f);
        path.Line(80.631593f, 247.607110f);
        path.Line(80.626352f, 247.607039f);
        path.Close();
        path.Move(98.275798f, 248.058471f);
        path.Line(98.644954f, 250.014281f);
        path.Line(98.483968f, 250.045089f);
        path.Line(98.114812f, 248.089279f);
        path.Line(98.275798f, 248.058471f);
        path.Close();
        path.Move(98.435140f, 247.824349f);
        path.Line(97.881282f, 247.930341f);
        path.Line(98.324626f, 250.279211f);
        path.Line(98.878484f, 250.173219f);
        path.Line(98.435140f, 247.824349f);
        path.Close();
        path.Move(78.546916f, 249.285073f);
        path.Line(78.689832f, 249.367118f);
        path.Line(77.702892f, 251.094262f);
        path.Line(77.560360f, 251.013317f);
        path.Line(78.546916f, 249.285073f);
        path.Close();
        path.Move(78.472616f, 249.011807f);
        path.Line(77.287296f, 251.088243f);
        path.Line(77.777576f, 251.366678f);
        path.Line(78.962512f, 249.293042f);
        path.Line(78.472616f, 249.011807f);
        path.Close();
        path.Move(83.374605f, 250.708770f);
        path.Line(84.283201f, 252.479825f);
        path.Line(84.135342f, 252.555080f);
        path.Line(83.228336f, 250.783665f);
        path.Line(83.374605f, 250.708770f);
        path.Close();
        path.Move(83.461333f, 250.439670f);
        path.Line(82.959164f, 250.696795f);
        path.Line(84.048252f, 252.823820f);
        path.Line(84.552737f, 252.567055f);
        path.Line(83.461333f, 250.439670f);
        path.Close();
        path.Move(61.132017f, 252.045961f);
        path.Line(61.295526f, 252.071690f);
        path.Line(61.256676f, 252.314490f);
        path.Line(61.255450f, 252.327846f);
        path.Cubic(61.247892f, 252.636982f, 
                   61.312910f, 252.961682f, 
                   61.442294f, 253.243147f);
        path.Line(61.447914f, 253.253670f);
        path.Line(61.823468f, 253.865879f);
        path.Line(61.683243f, 253.952305f);
        path.Line(61.298864f, 253.324717f);
        path.Line(61.298200f, 253.323015f);
        path.Line(61.295760f, 253.317292f);
        path.Cubic(61.149438f, 253.001655f, 
                   61.078625f, 252.664565f, 
                   61.088200f, 252.317185f);
        path.Line(61.088915f, 252.318953f);
        path.Line(61.132017f, 252.045961f);
        path.Close();
        path.Move(60.965639f, 251.817319f);
        path.Line(60.891561f, 252.286507f);
        path.Line(60.889668f, 252.297580f);
        path.Line(60.888276f, 252.311675f);
        path.Cubic(60.878051f, 252.682615f, 
                   60.958398f, 253.065085f, 
                   61.114310f, 253.401408f);
        path.Line(61.119006f, 253.413983f);
        path.Line(61.617441f, 254.227795f);
        path.Line(62.098308f, 253.931421f);
        path.Line(61.621559f, 253.154251f);
        path.Cubic(61.504416f, 252.899438f, 
                   61.448378f, 252.619578f, 
                   61.455390f, 252.332734f);
        path.Line(61.524694f, 251.905290f);
        path.Line(60.965639f, 251.817319f);
        path.Close();
        path.Move(99.090232f, 252.363053f);
        path.Line(99.459289f, 254.318383f);
        path.Line(99.296570f, 254.348448f);
        path.Line(98.927347f, 252.394055f);
        path.Line(99.090232f, 252.363053f);
        path.Close();
        path.Move(99.249612f, 252.129127f);
        path.Line(98.693747f, 252.234925f);
        path.Line(99.137024f, 254.581312f);
        path.Line(99.693055f, 254.478577f);
        path.Line(99.249612f, 252.129127f);
        path.Close();
        path.Move(76.375041f, 253.087803f);
        path.Line(76.517996f, 253.169870f);
        path.Line(75.531209f, 254.898527f);
        path.Line(75.388254f, 254.816460f);
        path.Line(76.375041f, 253.087803f);
        path.Close();
        path.Move(76.300741f, 252.814537f);
        path.Line(75.115652f, 254.890580f);
        path.Line(75.605509f, 255.171793f);
        path.Line(76.790598f, 253.095750f);
        path.Line(76.300741f, 252.814537f);
        path.Close();
        path.Move(85.372799f, 254.605713f);
        path.Line(86.279694f, 256.376910f);
        path.Line(86.133060f, 256.452877f);
        path.Line(85.226166f, 254.681680f);
        path.Line(85.372799f, 254.605713f);
        path.Close();
        path.Move(85.459233f, 254.335687f);
        path.Line(84.957428f, 254.595660f);
        path.Line(86.046628f, 256.722903f);
        path.Line(86.548430f, 256.462930f);
        path.Line(85.459233f, 254.335687f);
        path.Close();
        path.Move(63.072389f, 255.903149f);
        path.Line(64.110722f, 257.599983f);
        path.Line(63.970368f, 257.686492f);
        path.Line(62.930504f, 255.990056f);
        path.Line(63.072389f, 255.903149f);
        path.Close();
        path.Move(63.138549f, 255.628091f);
        path.Line(62.655434f, 255.924004f);
        path.Line(63.904632f, 257.961948f);
        path.Line(64.385372f, 257.665637f);
        path.Line(63.138549f, 255.628091f);
        path.Close();
        path.Move(100.088281f, 256.623479f);
        path.Line(100.088281f, 256.542930f);
        path.Line(99.890585f, 256.564272f);
        path.Cubic(99.954806f, 256.858253f, 
                   99.956594f, 257.154572f, 
                   99.899876f, 257.449847f);
        path.Line(99.898081f, 257.468710f);
        path.Line(99.898081f, 257.460126f);
        path.Line(99.641915f, 258.656765f);
        path.Line(99.480187f, 258.622285f);
        path.Line(99.738424f, 257.421393f);
        path.Line(99.738866f, 257.419223f);
        path.Cubic(99.790062f, 257.152529f, 
                   99.786329f, 256.864310f, 
                   99.728557f, 256.599737f);
        path.Line(100.088281f, 256.623479f);
        path.Close();
        path.Move(99.888281f, 256.462461f);
        path.Line(99.609512f, 256.523375f);
        path.Line(99.533161f, 256.642403f);
        path.Cubic(99.586609f, 256.887170f, 
                   99.589816f, 257.134791f, 
                   99.542452f, 257.381517f);
        path.Line(99.242537f, 258.776115f);
        path.Line(99.795653f, 258.894035f);
        path.Line(100.098081f, 257.481294f);
        path.Line(100.098081f, 257.468710f);
        path.Line(100.096286f, 257.487573f);
        path.Cubic(100.156708f, 257.173008f, 
                   100.154676f, 256.836067f, 
                   100.085977f, 256.521588f);
        path.Line(99.888281f, 256.542930f);
        path.Line(99.888281f, 256.462461f);
        path.Close();
        path.Move(76.204306f, 257.091341f);
        path.Line(76.832519f, 258.977764f);
        path.Line(76.676554f, 259.029751f);
        path.Line(76.048339f, 257.143333f);
        path.Line(76.204306f, 257.091341f);
        path.Close();
        path.Move(76.330850f, 256.838339f);
        path.Line(75.795411f, 257.016827f);
        path.Line(76.550008f, 259.282749f);
        path.Line(77.085449f, 259.104276f);
        path.Line(76.330850f, 256.838339f);
        path.Close();
        path.Move(86.560468f, 258.674079f);
        path.Line(86.724098f, 258.683763f);
        path.Line(86.601641f, 260.669691f);
        path.Line(86.438011f, 260.660007f);
        path.Line(86.560468f, 258.674079f);
        path.Close();
        path.Move(86.373126f, 258.462641f);
        path.Line(86.226051f, 260.847813f);
        path.Line(86.788983f, 260.881129f);
        path.Line(86.936058f, 258.495957f);
        path.Line(86.373126f, 258.462641f);
        path.Close();
        path.Move(65.359261f, 259.639092f);
        path.Line(66.397592f, 261.335922f);
        path.Line(66.257717f, 261.421253f);
        path.Line(65.217852f, 259.724824f);
        path.Line(65.359261f, 259.639092f);
        path.Close();
        path.Move(65.425895f, 259.364808f);
        path.Line(64.942304f, 259.657996f);
        path.Line(66.191501f, 261.695927f);
        path.Line(66.672720f, 261.402358f);
        path.Line(65.425895f, 259.364808f);
        path.Close();
        path.Move(98.979183f, 260.958458f);
        path.Line(99.141015f, 260.992941f);
        path.Line(98.724032f, 262.939440f);
        path.Line(98.562020f, 262.904039f);
        path.Line(98.979183f, 260.958458f);
        path.Close();
        path.Move(98.825505f, 260.721222f);
        path.Line(98.324698f, 263.056901f);
        path.Line(98.877530f, 263.177700f);
        path.Line(99.378517f, 260.839059f);
        path.Line(98.825505f, 260.721222f);
        path.Close();
        path.Move(77.588991f, 261.245488f);
        path.Line(78.217259f, 263.133845f);
        path.Line(78.059447f, 263.186152f);
        path.Line(77.431178f, 261.297795f);
        path.Line(77.588991f, 261.245488f);
        path.Close();
        path.Move(77.715697f, 260.992792f);
        path.Line(77.178196f, 261.170945f);
        path.Line(77.932741f, 263.438848f);
        path.Line(78.470241f, 263.260695f);
        path.Line(77.715697f, 260.992792f);
        path.Close();
        path.Move(86.290940f, 263.045124f);
        path.Line(86.456523f, 263.054848f);
        path.Line(86.334087f, 265.042195f);
        path.Line(86.168450f, 265.031583f);
        path.Line(86.290940f, 263.045124f);
        path.Close();
        path.Move(86.103592f, 262.833776f);
        path.Line(85.956550f, 265.218417f);
        path.Line(86.521381f, 265.254605f);
        path.Line(86.668477f, 262.866952f);
        path.Line(86.103592f, 262.833776f);
        path.Close();
        path.Move(67.646818f, 263.374056f);
        path.Line(68.686682f, 265.070492f);
        path.Line(68.544800f, 265.157393f);
        path.Line(67.506467f, 263.460559f);
        path.Line(67.646818f, 263.374056f);
        path.Close();
        path.Move(67.712556f, 263.098604f);
        path.Line(67.231815f, 263.394901f);
        path.Line(68.478638f, 265.432447f);
        path.Line(68.961756f, 265.136548f);
        path.Line(67.712556f, 263.098604f);
        path.Close();
        path.Move(98.061212f, 265.241678f);
        path.Line(98.222944f, 265.276159f);
        path.Line(97.804131f, 267.221150f);
        path.Line(97.644135f, 267.186853f);
        path.Line(98.061212f, 265.241678f);
        path.Close();
        path.Move(97.907538f, 265.004422f);
        path.Line(97.406647f, 267.340487f);
        path.Line(97.957587f, 267.458590f);
        path.Line(98.460650f, 265.122341f);
        path.Line(97.907538f, 265.004422f);
        path.Close();
        path.Move(78.971634f, 265.401794f);
        path.Line(79.112082f, 265.826460f);
        path.Line(79.114892f, 265.833940f);
        path.Cubic(79.329137f, 266.341631f, 
                   79.480528f, 266.874396f, 
                   79.525316f, 267.430044f);
        path.Line(79.352113f, 267.343694f);
        path.Cubic(79.318869f, 266.915807f, 
                   79.170476f, 266.389894f, 
                   78.963219f, 265.898760f);
        path.Line(78.954931f, 265.883141f);
        path.Line(78.958038f, 265.887920f);
        path.Line(78.813942f, 265.454061f);
        path.Line(78.971634f, 265.401794f);
        path.Close();
        path.Move(79.098678f, 265.148986f);
        path.Line(78.561058f, 265.327179f);
        path.Line(78.776336f, 265.975360f);
        path.Line(78.782386f, 265.984668f);
        path.Cubic(78.981372f, 266.456186f, 
                   79.121085f, 266.951333f, 
                   79.162035f, 267.459345f);
        path.Line(79.269751f, 267.550986f);
        path.Line(79.633032f, 267.521686f);
        path.Line(79.724670f, 267.413976f);
        path.Cubic(79.678298f, 266.838684f, 
                   79.518169f, 266.275169f, 
                   79.299156f, 265.756180f);
        path.Line(79.098678f, 265.148986f);
        path.Close();
        path.Move(67.500630f, 267.133003f);
        path.Line(67.644407f, 267.217318f);
        path.Line(66.638050f, 268.933626f);
        path.Line(66.496210f, 268.850814f);
        path.Line(67.500630f, 267.133003f);
        path.Close();
        path.Move(67.429058f, 266.859177f);
        path.Line(66.222540f, 268.922626f);
        path.Line(66.709606f, 269.206994f);
        path.Line(67.918093f, 267.145962f);
        path.Line(67.429058f, 266.859177f);
        path.Close();
        path.Move(86.021386f, 267.416761f);
        path.Line(86.187041f, 267.427383f);
        path.Line(86.071283f, 269.312577f);
        path.Line(85.996579f, 269.470882f);
        path.Line(86.013964f, 269.429769f);
        path.Line(85.863204f, 269.362764f);
        path.Line(85.847173f, 269.400174f);
        path.Line(85.907242f, 269.271128f);
        path.Line(86.021386f, 267.416761f);
        path.Close();
        path.Move(85.834082f, 267.204339f);
        path.Line(85.709946f, 269.221052f);
        path.Line(85.664555f, 269.318566f);
        path.Line(85.601644f, 269.465376f);
        path.Line(86.118852f, 269.695251f);
        path.Line(86.179197f, 269.552538f);
        path.Line(86.268553f, 269.363183f);
        path.Line(86.398889f, 267.240557f);
        path.Line(85.834082f, 267.204339f);
        path.Close();
        path.Move(78.767917f, 269.530637f);
        path.Line(78.899920f, 269.631513f);
        path.Cubic(78.908638f, 269.626150f, 
                   78.849051f, 269.688027f, 
                   78.788129f, 269.749944f);
        path.Line(78.787988f, 269.750087f);
        path.Line(78.783398f, 269.754771f);
        path.Line(77.312679f, 270.865652f);
        path.Line(77.214097f, 270.734500f);
        path.Line(78.667698f, 269.636432f);
        path.Line(78.678917f, 269.626557f);
        path.Cubic(78.733909f, 269.570324f, 
                   78.787169f, 269.511206f, 
                   78.831416f, 269.453289f);
        path.Close();
        path.Move(78.812673f, 269.313125f);
        path.Line(78.672490f, 269.331871f);
        path.Cubic(78.633157f, 269.383354f, 
                   78.588057f, 269.433416f, 
                   78.535927f, 269.486723f);
        path.Line(76.934341f, 270.695180f);
        path.Line(77.273259f, 271.146068f);
        path.Line(78.915820f, 269.905389f);
        path.Line(78.930830f, 269.890073f);
        path.Line(78.930689f, 269.890216f);
        path.Cubic(78.992367f, 269.827533f, 
                   79.060626f, 269.756650f, 
                   79.122465f, 269.675711f);
        path.Line(79.103723f, 269.535545f);
        path.Line(78.812673f, 269.313125f);
        path.Close();
        path.Move(97.143115f, 269.523517f);
        path.Line(97.496634f, 269.601180f);
        path.Line(97.480733f, 269.668733f);
        path.Line(98.436153f, 271.159314f);
        path.Line(98.297692f, 271.248389f);
        path.Line(97.155239f, 269.466968f);
        path.Line(97.143115f, 269.523517f);
        path.Close();
        path.Move(96.989697f, 269.285043f);
        path.Line(96.942413f, 269.505592f);
        path.Line(98.237460f, 271.524951f);
        path.Line(98.712281f, 271.219486f);
        path.Line(97.394263f, 269.163207f);
        path.Line(97.347102f, 269.363560f);
        path.Line(96.989697f, 269.285043f);
        path.Close();
        path.Move(65.289722f, 270.914029f);
        path.Line(65.431525f, 270.996824f);
        path.Line(64.426872f, 272.715026f);
        path.Line(64.283522f, 272.631849f);
        path.Line(65.289722f, 270.914029f);
        path.Close();
        path.Move(65.218090f, 270.640611f);
        path.Line(64.009446f, 272.704051f);
        path.Line(64.498910f, 272.988054f);
        path.Line(65.705193f, 270.925016f);
        path.Line(65.218090f, 270.640611f);
        path.Close();
        path.Move(85.232384f, 271.684365f);
        path.Line(85.398530f, 271.698579f);
        path.Cubic(85.361888f, 272.104983f, 
                   85.390456f, 272.641385f, 
                   85.605156f, 273.090018f);
        path.Cubic(85.690128f, 273.264966f, 
                   85.812988f, 273.431640f, 
                   85.958968f, 273.554905f);
        path.Line(85.779207f, 273.614026f);
        path.Cubic(85.682052f, 273.536520f, 
                   85.553949f, 273.360588f, 
                   85.457185f, 273.161369f);
        path.Line(85.367234f, 273.105060f);
        path.Line(85.365234f, 273.105060f);
        path.Line(85.455436f, 273.161892f);
        path.Cubic(85.215955f, 272.661483f, 
                   85.194040f, 272.111766f, 
                   85.240243f, 271.584886f);
        path.Close();
        path.Move(85.149149f, 271.476514f);
        path.Line(85.041007f, 271.567414f);
        path.Cubic(84.993690f, 272.106994f, 
                   85.017755f, 272.710637f, 
                   85.275032f, 273.248228f);
        path.Line(85.365234f, 273.305060f);
        path.Line(85.367234f, 273.305060f);
        path.Line(85.277283f, 273.248751f);
        path.Cubic(85.381811f, 273.463952f, 
                   85.534580f, 273.673760f, 
                   85.724596f, 273.834197f);
        path.Line(85.865710f, 273.822072f);
        path.Line(86.100085f, 273.542782f);
        path.Line(86.088000f, 273.402095f);
        path.Cubic(85.960008f, 273.294020f, 
                   85.862010f, 273.161074f, 
                   85.785310f, 273.003160f);
        path.Cubic(85.588054f, 272.590975f, 
                   85.562354f, 272.108417f, 
                   85.605524f, 271.616136f);
        path.Line(85.514430f, 271.507764f);
        path.Line(85.149149f, 271.476514f);
        path.Close();
        path.Move(75.306836f, 272.175131f);
        path.Line(75.406651f, 272.306743f);
        path.Line(73.818538f, 273.506254f);
        path.Line(73.719929f, 273.375072f);
        path.Line(75.306836f, 272.175131f);
        path.Close();
        path.Move(75.345508f, 271.895149f);
        path.Line(73.440227f, 273.335828f);
        path.Line(73.779118f, 273.786666f);
        path.Line(75.687099f, 272.345557f);
        path.Line(75.345508f, 271.895149f);
        path.Close();
        path.Move(99.725821f, 273.171410f);
        path.Line(100.801288f, 274.844957f);
        path.Line(100.662848f, 274.934020f);
        path.Line(99.587381f, 273.260473f);
        path.Line(99.725821f, 273.171410f);
        path.Close();
        path.Move(99.785897f, 272.894950f);
        path.Line(99.311057f, 273.200427f);
        path.Line(100.602772f, 275.210480f);
        path.Line(101.077612f, 274.905003f);
        path.Line(99.785897f, 272.894950f);
        path.Close();
        path.Move(71.812661f, 274.815709f);
        path.Line(71.912511f, 274.947372f);
        path.Line(70.324057f, 276.147141f);
        path.Line(70.224207f, 276.015478f);
        path.Line(71.812661f, 274.815709f);
        path.Close();
        path.Move(71.851401f, 274.535811f);
        path.Line(69.943761f, 275.976662f);
        path.Line(70.285317f, 276.427039f);
        path.Line(72.192957f, 274.986188f);
        path.Line(71.851401f, 274.535811f);
        path.Close();
        path.Move(87.851954f, 274.826135f);
        path.Line(89.507809f, 275.930035f);
        path.Line(89.415624f, 276.068315f);
        path.Line(87.759769f, 274.964415f);
        path.Line(87.851954f, 274.826135f);
        path.Close();
        path.Move(87.796484f, 274.548785f);
        path.Line(87.482419f, 275.019885f);
        path.Line(89.471094f, 276.345665f);
        path.Line(89.785159f, 275.874565f);
        path.Line(87.796484f, 274.548785f);
        path.Close();
        path.Move(63.516033f, 274.900148f);
        path.Line(63.681805f, 274.908990f);
        path.Cubic(63.653011f, 275.400519f, 
                   63.826594f, 276.022355f, 
                   64.179514f, 276.497072f);
        path.Line(64.159766f, 276.439410f);
        path.Line(64.179027f, 276.498412f);
        path.Cubic(64.243578f, 276.586743f, 
                   64.316252f, 276.672820f, 
                   64.389710f, 276.751701f);
        path.Line(64.201629f, 276.789385f);
        path.Cubic(64.188696f, 276.777707f, 
                   64.116026f, 276.690843f, 
                   64.047509f, 276.597172f);
        path.Cubic(63.661148f, 276.077462f, 
                   63.484797f, 275.441146f, 
                   63.519773f, 274.800330f);
        path.Close();
        path.Move(63.425248f, 274.695022f);
        path.Line(63.320071f, 274.789430f);
        path.Cubic(63.283307f, 275.462974f, 
                   63.478380f, 276.166838f, 
                   63.886544f, 276.715872f);
        path.Cubic(63.958448f, 276.814177f, 
                   64.038690f, 276.910093f, 
                   64.122109f, 276.999727f);
        path.Line(64.263296f, 277.004936f);
        path.Line(64.530875f, 276.756886f);
        path.Line(64.536072f, 276.615399f);
        path.Cubic(64.465930f, 276.540080f, 
                   64.400918f, 276.463077f, 
                   64.340505f, 276.380408f);
        path.Line(64.359766f, 276.439410f);
        path.Line(64.359766f, 276.437410f);
        path.Line(64.340018f, 276.377748f);
        path.Cubic(64.009248f, 275.932825f, 
                   63.854511f, 275.378501f, 
                   63.885007f, 274.819810f);
        path.Line(63.790482f, 274.714502f);
        path.Line(63.425248f, 274.695022f);
        path.Close();
        path.Move(102.193750f, 276.819739f);
        path.Line(102.193750f, 276.757750f);
        path.Line(102.004081f, 276.802016f);
        path.Cubic(102.332268f, 277.466822f, 
                   102.527590f, 278.221984f, 
                   102.372745f, 278.975911f);
        path.Line(102.229185f, 278.843760f);
        path.Cubic(102.353035f, 278.251535f, 
                   102.170717f, 277.510656f, 
                   101.857250f, 276.875617f);
        path.Line(102.193750f, 276.819739f);
        path.Close();
        path.Move(101.993750f, 276.695801f);
        path.Line(101.723073f, 276.830330f);
        path.Line(101.677910f, 276.964143f);
        path.Cubic(101.981723f, 277.579624f, 
                   102.148045f, 278.255505f, 
                   102.015325f, 278.901712f);
        path.Line(102.092953f, 279.019742f);
        path.Line(102.450373f, 279.093942f);
        path.Line(102.568655f, 279.016149f);
        path.Cubic(102.732830f, 278.216796f, 
                   102.520732f, 277.396778f, 
                   102.183419f, 276.713484f);
        path.Line(101.993750f, 276.757750f);
        path.Line(101.993750f, 276.695801f);
        path.Close();
        path.Move(91.496484f, 277.255824f);
        path.Line(93.152341f, 278.359725f);
        path.Line(93.060156f, 278.498005f);
        path.Line(91.404301f, 277.394096f);
        path.Line(91.496484f, 277.255824f);
        path.Close();
        path.Move(91.441016f, 276.978476f);
        path.Line(91.126949f, 277.449564f);
        path.Line(93.115626f, 278.775355f);
        path.Line(93.429691f, 278.304255f);
        path.Line(91.441016f, 276.978476f);
        path.Close();
        path.Move(68.274641f, 277.358520f);
        path.Line(68.346452f, 277.508344f);
        path.Cubic(67.760931f, 277.788724f, 
                   67.006620f, 277.922239f, 
                   66.259301f, 277.822705f);
        path.Line(66.379426f, 277.671374f);
        path.Cubic(66.981767f, 277.753119f, 
                   67.725173f, 277.621815f, 
                   68.365283f, 277.316795f);
        path.Close();
        path.Move(68.412443f, 277.183298f);
        path.Line(68.279249f, 277.136245f);
        path.Cubic(67.663649f, 277.429585f, 
                   66.977473f, 277.550781f, 
                   66.306169f, 277.461385f);
        path.Line(66.193800f, 277.547646f);
        path.Line(66.146930f, 277.908966f);
        path.Line(66.232897f, 278.020955f);
        path.Cubic(67.010948f, 278.124581f, 
                   67.822491f, 277.980936f, 
                   68.523494f, 277.646873f);
        path.Line(68.570651f, 277.513378f);
        path.Line(68.412443f, 277.183298f);
        path.Close();
        path.Move(95.141016f, 279.685506f);
        path.Line(95.789365f, 280.117747f);
        path.Cubic(96.139418f, 280.361863f, 
                   96.529965f, 280.563376f, 
                   96.929575f, 280.723634f);
        path.Line(96.775027f, 280.838158f);
        path.Cubic(96.456013f, 280.710960f, 
                   96.064030f, 280.510917f, 
                   95.697783f, 280.255795f);
        path.Line(95.696044f, 280.254611f);
        path.Line(95.048865f, 279.823734f);
        path.Line(95.141016f, 279.685506f);
        path.Close();
        path.Move(95.085546f, 279.408154f);
        path.Line(94.771447f, 279.879306f);
        path.Line(95.584335f, 280.420509f);
        path.Cubic(95.960936f, 280.682843f, 
                   96.373167f, 280.893220f, 
                   96.792857f, 281.061525f);
        path.Line(96.922777f, 281.006218f);
        path.Line(97.059496f, 280.668328f);
        path.Line(97.004019f, 280.538006f);
        path.Cubic(96.613229f, 280.381284f, 
                   96.242928f, 280.190217f, 
                   95.902904f, 279.953096f);
        path.Line(95.901174f, 279.951915f);
        path.Line(95.085546f, 279.408154f);
        path.Close();
        path.Move(100.989069f, 280.730697f);
        path.Line(101.080877f, 280.867528f);
        path.Cubic(100.529150f, 281.238748f, 
                   99.766092f, 281.374183f, 
                   99.024847f, 281.349237f);
        path.Line(99.129974f, 281.186161f);
        path.Cubic(99.738267f, 281.207750f, 
                   100.487021f, 281.068950f, 
                   101.073182f, 280.676827f);
        path.Close();
        path.Move(101.100620f, 280.537993f);
        path.Line(100.961978f, 280.510593f);
        path.Cubic(100.410059f, 280.879810f, 
                   99.723231f, 281.007130f, 
                   99.036570f, 280.983997f);
        path.Line(98.933254f, 281.080733f);
        path.Line(98.921534f, 281.445973f);
        path.Line(99.018119f, 281.549123f);
        path.Cubic(99.780360f, 281.574777f, 
                   100.605450f, 281.428332f, 
                   101.276302f, 280.979557f);
        path.Line(101.303740f, 280.840723f);
        path.Line(101.100620f, 280.537993f);
        path.Close();
    }

    private void SetPathData_use3865(IRenderPath path)
    { // Label: line
        path.Move(64.140296f, 234.672045f);
        path.Line(64.133184f, 219.929796f);
        path.Line(63.949253f, 219.808064f);
        path.Cubic(63.517832f, 219.990981f, 
                   61.065393f, 220.602813f, 
                   56.580317f, 221.644810f);
        path.Cubic(56.901740f, 225.929865f, 
                   57.097015f, 228.905611f, 
                   57.065358f, 230.722215f);
        path.Cubic(56.908740f, 232.193287f, 
                   55.645982f, 233.215045f, 
                   54.251408f, 233.806850f);
        path.Cubic(51.924129f, 234.582732f, 
                   49.444540f, 233.312535f, 
                   48.711745f, 230.960342f);
        path.Line(45.010214f, 214.830507f);
        path.Line(45.010031f, 214.829720f);
        path.Cubic(44.726858f, 213.629590f, 
                   45.612973f, 212.237179f, 
                   46.067478f, 212.131451f);
        path.Line(46.075008f, 212.129464f);
        path.Line(69.668112f, 205.154689f);
        path.Cubic(71.348847f, 204.875053f, 
                   72.391419f, 203.763972f, 
                   72.723808f, 201.899326f);
        path.Cubic(72.903905f, 200.889018f, 
                   73.461265f, 199.123015f, 
                   72.187943f, 197.667679f);
        path.Cubic(67.144848f, 191.903691f, 
                   65.348735f, 184.084731f, 
                   69.040113f, 177.394701f);
        path.Cubic(72.734065f, 170.700016f, 
                   80.445629f, 167.361227f, 
                   87.856364f, 169.246388f);
        path.Cubic(95.267099f, 171.131559f, 
                   100.445852f, 177.749419f, 
                   100.491781f, 185.395475f);
        path.Cubic(100.537668f, 193.037894f, 
                   95.293946f, 199.244934f, 
                   88.042684f, 201.698769f);
        path.Cubic(87.187860f, 201.988037f, 
                   87.472824f, 203.099190f, 
                   87.558741f, 203.579409f);
        path.Cubic(87.752128f, 204.660217f, 
                   88.720566f, 205.290759f, 
                   88.856214f, 205.375768f);
        path.Line(88.872494f, 205.384452f);
        path.Line(110.994310f, 215.269282f);
        path.Line(110.993922f, 215.269108f);
        path.Cubic(111.428406f, 215.464929f, 
                   112.347999f, 215.811978f, 
                   113.017596f, 217.318889f);
        path.Cubic(113.029490f, 217.345659f, 
                   118.394495f, 232.100962f, 
                   118.446258f, 232.978619f);
        path.Cubic(118.555228f, 234.911468f, 
                   117.426636f, 236.960882f, 
                   115.681941f, 238.006146f);
        path.Cubic(114.846343f, 238.489377f, 
                   113.915430f, 238.748029f, 
                   112.948278f, 238.765229f);
        path.Cubic(111.311813f, 238.769450f, 
                   108.751371f, 237.706547f, 
                   108.023481f, 235.781541f);
        path.Cubic(107.968339f, 235.658210f, 
                   106.940310f, 232.619008f, 
                   104.934812f, 226.650136f);
        path.Cubic(100.014973f, 224.537932f, 
                   97.475597f, 223.474741f, 
                   97.243289f, 223.381068f);
        path.Line(97.061525f, 223.503964f);
        path.Line(97.091524f, 242.939581f);
        path.Line(99.647030f, 256.474504f);
        path.Line(99.649732f, 256.485982f);
        path.Cubic(99.736160f, 256.791397f, 
                   99.749321f, 257.097540f, 
                   99.689439f, 257.409252f);
        path.Line(97.101534f, 269.477148f);
        path.Line(101.345774f, 276.092626f);
        path.Line(101.346688f, 276.094031f);
        path.Cubic(102.016123f, 277.108938f, 
                   102.846615f, 278.705956f, 
                   101.464144f, 280.285079f);
        path.Cubic(100.041363f, 281.773424f, 
                   97.244554f, 281.077660f, 
                   95.818077f, 280.077414f);
        path.Line(95.815508f, 280.075657f);
        path.Line(86.077808f, 273.583861f);
        path.Cubic(85.046573f, 272.852934f, 
                   85.389153f, 270.841154f, 
                   86.108723f, 269.350345f);
        path.Line(86.121626f, 269.300958f);
        path.Line(86.854101f, 257.387620f);
        path.Line(82.604368f, 249.095332f);
        path.Cubic(82.156759f, 248.211948f, 
                   81.463894f, 247.785318f, 
                   80.636184f, 247.757125f);
        path.Cubic(79.788777f, 247.770024f, 
                   79.187186f, 248.170629f, 
                   78.663323f, 248.980350f);
        path.Line(78.659506f, 248.986625f);
        path.Line(75.262071f, 254.938143f);
        path.Line(78.913458f, 265.908259f);
        path.Line(78.917129f, 265.917994f);
        path.Cubic(79.590679f, 267.511200f, 
                   79.398551f, 268.836138f, 
                   78.635873f, 269.598816f);
        path.Line(69.024134f, 276.860192f);
        path.Cubic(67.693715f, 277.864913f, 
                   65.789996f, 278.000373f, 
                   64.427606f, 276.720946f);
        path.Cubic(63.595875f, 275.827418f, 
                   63.533718f, 274.675011f, 
                   64.084524f, 273.395933f);
        path.Line(68.853243f, 265.248453f);
        path.Line(61.487000f, 253.220473f);
        path.Cubic(61.357152f, 252.939776f, 
                   61.295419f, 252.640112f, 
                   61.303910f, 252.323355f);
        path.Line(64.140296f, 234.672045f);
        path.Close();
        path.Move(63.875702f, 234.650995f);
        path.Line(61.041049f, 252.298830f);
        path.Line(61.039422f, 252.316265f);
        path.Cubic(61.030113f, 252.663568f, 
                   61.104180f, 253.023104f, 
                   61.250033f, 253.338437f);
        path.Line(61.257287f, 253.351991f);
        path.Line(68.544879f, 265.251547f);
        path.Line(63.848840f, 273.276797f);
        path.Line(63.841516f, 273.291287f);
        path.Cubic(63.266178f, 274.627329f, 
                   63.336845f, 275.937502f, 
                   64.240233f, 276.907539f);
        path.Cubic(65.693278f, 278.272507f, 
                   67.790643f, 278.123267f, 
                   69.183599f, 277.071320f);
        path.Line(69.183629f, 277.071297f);
        path.Line(78.809172f, 269.797907f);
        path.Line(78.822961f, 269.785904f);
        path.Cubic(79.647783f, 268.961082f, 
                   79.863113f, 267.476140f, 
                   79.160829f, 265.814966f);
        path.Line(75.550429f, 254.966697f);
        path.Line(78.887453f, 249.121005f);
        path.Cubic(79.379518f, 248.360431f, 
                   79.870659f, 248.033376f, 
                   80.633720f, 248.021616f);
        path.Cubic(81.384844f, 248.047362f, 
                   81.954479f, 248.398112f, 
                   82.368493f, 249.215194f);
        path.Line(82.368769f, 249.215736f);
        path.Line(86.585567f, 257.443760f);
        path.Line(85.859130f, 269.258890f);
        path.Cubic(85.134607f, 270.759846f, 
                   84.757809f, 272.972566f, 
                   85.926314f, 273.800790f);
        path.Line(85.929432f, 273.802933f);
        path.Line(95.667459f, 280.294947f);
        path.Cubic(97.132936f, 281.322540f, 
                   100.126517f, 282.067256f, 
                   101.659312f, 280.463628f);
        path.Cubic(103.164745f, 278.744244f, 
                   102.244537f, 276.974702f, 
                   101.567552f, 275.948349f);
        path.Line(101.568466f, 275.949754f);
        path.Line(97.383094f, 269.426032f);
        path.Line(99.948706f, 257.461948f);
        path.Line(99.949271f, 257.459168f);
        path.Cubic(100.014989f, 257.117080f, 
                   99.999170f, 256.749123f, 
                   99.904318f, 256.413938f);
        path.Line(97.356068f, 242.914619f);
        path.Line(97.326413f, 223.701555f);
        path.Cubic(97.375028f, 223.719472f, 
                   99.912715f, 224.781955f, 
                   104.758243f, 226.814266f);
        path.Cubic(106.689590f, 232.703532f, 
                   107.721781f, 235.755037f, 
                   107.779068f, 235.882545f);
        path.Cubic(108.544329f, 237.907073f, 
                   111.259407f, 239.034170f, 
                   112.950972f, 239.029791f);
        path.Cubic(113.953810f, 239.011971f, 
                   114.949637f, 238.735283f, 
                   115.816160f, 238.234149f);
        path.Cubic(117.623924f, 237.151118f, 
                   118.823672f, 234.972492f, 
                   118.710402f, 232.963383f);
        path.Cubic(118.656345f, 232.046838f, 
                   113.275010f, 217.246621f, 
                   113.259386f, 217.211456f);
        path.Cubic(112.544881f, 215.603482f, 
                   111.529574f, 215.220311f, 
                   111.102638f, 215.027892f);
        path.Line(111.102250f, 215.027718f);
        path.Line(88.989011f, 205.146721f);
        path.Cubic(88.863010f, 205.067781f, 
                   87.992414f, 204.500943f, 
                   87.819188f, 203.532809f);
        path.Cubic(87.731546f, 203.042950f, 
                   87.505108f, 202.160003f, 
                   88.127494f, 201.949391f);
        path.Cubic(95.448526f, 199.471946f, 
                   100.802832f, 193.134006f, 
                   100.756359f, 185.393886f);
        path.Cubic(100.709888f, 177.657501f, 
                   95.419825f, 170.897401f, 
                   87.921592f, 168.989972f);
        path.Cubic(80.423359f, 167.082553f, 
                   72.546047f, 170.493104f, 
                   68.808455f, 177.266879f);
        path.Cubic(65.068233f, 184.045429f, 
                   66.901886f, 192.027809f, 
                   71.988817f, 197.841901f);
        path.Cubic(73.164171f, 199.185265f, 
                   72.646435f, 200.825722f, 
                   72.463332f, 201.852894f);
        path.Cubic(72.144727f, 203.640208f, 
                   71.217143f, 204.628747f, 
                   69.616625f, 204.895042f);
        path.Line(69.600833f, 204.898676f);
        path.Line(46.003339f, 211.874749f);
        path.Cubic(45.447775f, 212.003961f, 
                   44.443712f, 213.581710f, 
                   44.752519f, 214.890480f);
        path.Line(44.752336f, 214.889693f);
        path.Line(48.456502f, 231.029283f);
        path.Line(48.459137f, 231.039038f);
        path.Cubic(49.224990f, 233.497345f, 
                   51.902419f, 234.868888f, 
                   54.344948f, 234.054124f);
        path.Cubic(55.783534f, 233.444095f, 
                   57.160292f, 232.330093f, 
                   57.329182f, 230.738479f);
        path.Cubic(57.361749f, 228.899242f, 
                   57.165441f, 225.907755f, 
                   56.741861f, 221.760229f);
        path.Cubic(61.127357f, 220.860047f, 
                   63.602010f, 220.242673f, 
                   64.052533f, 220.051656f);
        path.Line(63.875702f, 234.650995f);
        path.Close();
    }

    private void SetPathData_use4828(IRenderPath path)
    { // Label: dashedLine
        path.Move(82.863281f, 168.484370f);
        path.Cubic(81.797929f, 168.536670f, 
                   80.737213f, 168.691770f, 
                   79.701172f, 168.945310f);
        path.Line(79.763672f, 169.203120f);
        path.Cubic(80.783315f, 168.953600f, 
                   81.828494f, 168.801490f, 
                   82.876953f, 168.750000f);
        path.Close();
        path.Move(86.054687f, 168.625000f);
        path.Line(86.019527f, 168.886720f);
        path.Cubic(87.059496f, 169.029940f, 
                   88.085664f, 169.272970f, 
                   89.080074f, 169.609370f);
        path.Line(89.166014f, 169.357420f);
        path.Cubic(88.155704f, 169.015640f, 
                   87.111229f, 168.770510f, 
                   86.054685f, 168.625000f);
        path.Close();
        path.Move(76.681641f, 169.986330f);
        path.Cubic(75.710045f, 170.426380f, 
                   74.779868f, 170.959470f, 
                   73.908203f, 171.574220f);
        path.Line(74.060547f, 171.791020f);
        path.Cubic(74.918527f, 171.185920f, 
                   75.834625f, 170.661680f, 
                   76.791016f, 170.228520f);
        path.Close();
        path.Move(92.083984f, 170.656250f);
        path.Line(91.955078f, 170.886720f);
        path.Cubic(92.870513f, 171.400360f, 
                   93.735374f, 172.003790f, 
                   94.537109f, 172.681640f);
        path.Line(94.708984f, 172.480470f);
        path.Cubic(93.894560f, 171.791890f, 
                   93.014339f, 171.178260f, 
                   92.083984f, 170.656250f);
        path.Close();
        path.Move(71.480469f, 173.650390f);
        path.Cubic(70.737779f, 174.415980f, 
                   70.068066f, 175.253740f, 
                   69.484375f, 176.146480f);
        path.Line(69.707031f, 176.291020f);
        path.Cubic(70.281464f, 175.412430f, 
                   70.939013f, 174.589380f, 
                   71.669922f, 173.835940f);
        path.Close();
        path.Move(96.945312f, 174.759770f);
        path.Line(96.740234f, 174.927730f);
        path.Cubic(97.402281f, 175.742680f, 
                   97.989648f, 176.620150f, 
                   98.486328f, 177.544920f);
        path.Line(98.718750f, 177.417970f);
        path.Cubic(98.213984f, 176.478140f, 
                   97.617716f, 175.587460f, 
                   96.945312f, 174.759770f);
        path.Close();
        path.Move(67.994141f, 178.972660f);
        path.Cubic(67.589596f, 179.960220f, 
                   67.285246f, 180.989300f, 
                   67.091797f, 182.039060f);
        path.Line(67.351562f, 182.087860f);
        path.Cubic(67.541664f, 181.056270f, 
                   67.840601f, 180.043040f, 
                   68.238281f, 179.072240f);
        path.Close();
        path.Move(99.964844f, 180.361330f);
        path.Line(99.712891f, 180.441430f);
        path.Cubic(100.030990f, 181.441750f, 
                   100.252900f, 182.473030f, 
                   100.375000f, 183.515640f);
        path.Line(100.636720f, 183.484440f);
        path.Cubic(100.512660f, 182.425080f, 
                   100.288090f, 181.377920f, 
                   99.964844f, 180.361400f);
        path.Close();
        path.Move(67.089844f, 185.220700f);
        path.Line(66.824219f, 185.224700f);
        path.Cubic(66.840939f, 186.291300f, 
                   66.960615f, 187.356010f, 
                   67.175781f, 188.400480f);
        path.Line(67.433594f, 188.345780f);
        path.Cubic(67.221722f, 187.317310f, 
                   67.106299f, 186.270540f, 
                   67.089844f, 185.220780f);
        path.Close();
        path.Move(100.449220f, 186.660160f);
        path.Cubic(100.376020f, 187.706880f, 
                   100.196990f, 188.746880f, 
                   99.916016f, 189.757810f);
        path.Line(100.171880f, 189.828110f);
        path.Cubic(100.457640f, 188.799970f, 
                   100.638430f, 187.742180f, 
                   100.712890f, 186.677720f);
        path.Close();
        path.Move(68.326172f, 191.367190f);
        path.Line(68.080078f, 191.462890f);
        path.Cubic(68.465382f, 192.456430f, 
                   68.932092f, 193.417180f, 
                   69.466797f, 194.337890f);
        path.Line(69.697266f, 194.205080f);
        path.Cubic(69.169108f, 193.295640f, 
                   68.706206f, 192.347130f, 
                   68.326172f, 191.367190f);
        path.Close();
        path.Move(98.783203f, 192.689450f);
        path.Cubic(98.310581f, 193.626800f, 
                   97.747276f, 194.518800f, 
                   97.105469f, 195.349610f);
        path.Line(97.314453f, 195.511720f);
        path.Cubic(97.966508f, 194.667650f, 
                   98.539258f, 193.761110f, 
                   99.019531f, 192.808590f);
        path.Close();
        path.Move(71.474609f, 196.808590f);
        path.Line(71.265625f, 196.972660f);
        path.Cubic(71.499058f, 197.268770f, 
                   71.740708f, 197.558360f, 
                   71.988281f, 197.841800f);
        path.Cubic(72.316525f, 198.213230f, 
                   72.551771f, 198.670390f, 
                   72.656250f, 199.154300f);
        path.Cubic(72.690340f, 199.310680f, 
                   72.714010f, 199.468770f, 
                   72.724610f, 199.626950f);
        path.Line(72.988282f, 199.609350f);
        path.Cubic(72.976702f, 199.436570f, 
                   72.950602f, 199.265250f, 
                   72.914062f, 199.097640f);
        path.Cubic(72.799689f, 198.567900f, 
                   72.545577f, 198.073140f, 
                   72.187500f, 197.667950f);
        path.Cubic(71.942387f, 197.387330f, 
                   71.704857f, 197.100640f, 
                   71.474609f, 196.808570f);
        path.Close();
        path.Move(94.970703f, 197.662110f);
        path.Cubic(94.193635f, 198.369200f, 
                   93.353378f, 199.008400f, 
                   92.468750f, 199.576170f);
        path.Line(92.611328f, 199.798830f);
        path.Cubic(93.507870f, 199.223410f, 
                   94.359910f, 198.576900f, 
                   95.148437f, 197.859370f);
        path.Close();
        path.Move(89.689453f, 201.060550f);
        path.Cubic(89.149914f, 201.296680f, 
                   88.600974f, 201.510330f, 
                   88.042969f, 201.699220f);
        path.Cubic(87.830609f, 201.767620f, 
                   87.647564f, 201.921030f, 
                   87.552734f, 202.128910f);
        path.Cubic(87.417916f, 202.421190f, 
                   87.433220f, 202.738040f, 
                   87.464844f, 203.017580f);
        path.Line(87.726562f, 202.988280f);
        path.Cubic(87.696582f, 202.723270f, 
                   87.692722f, 202.457570f, 
                   87.792972f, 202.240230f);
        path.Line(87.792972f, 202.238230f);
        path.Cubic(87.854262f, 202.103150f, 
                   87.980232f, 201.995220f, 
                   88.125003f, 201.949170f);
        path.Line(88.127003f, 201.949170f);
        path.Cubic(88.692050f, 201.757900f, 
                   89.250266f, 201.543890f, 
                   89.796925f, 201.304640f);
        path.Close();
        path.Move(72.228516f, 202.685550f);
        path.Cubic(71.962107f, 203.369220f, 
                   71.476990f, 203.967880f, 
                   70.861328f, 204.367190f);
        path.Line(70.859328f, 204.367190f);
        path.Cubic(70.619164f, 204.524610f, 
                   70.362592f, 204.655620f, 
                   70.093703f, 204.755860f);
        path.Line(70.185503f, 205.003910f);
        path.Cubic(70.472298f, 204.896990f, 
                   70.747942f, 204.757360f, 
                   71.003862f, 204.589840f);
        path.Line(71.005862f, 204.587840f);
        path.Cubic(71.668061f, 204.157630f, 
                   72.188046f, 203.518560f, 
                   72.474612f, 202.783150f);
        path.Close();
        path.Move(89.388672f, 205.324220f);
        path.Line(89.279297f, 205.566410f);
        path.Line(92.179687f, 206.861330f);
        path.Line(92.287109f, 206.621090f);
        path.Close();
        path.Move(67.056641f, 205.650390f);
        path.Line(64.011719f, 206.550780f);
        path.Line(64.087889f, 206.804690f);
        path.Line(67.132810f, 205.904300f);
        path.Close();
        path.Move(60.968750f, 207.451170f);
        path.Line(57.923828f, 208.351560f);
        path.Line(57.998048f, 208.605470f);
        path.Line(61.042970f, 207.705080f);
        path.Close();
        path.Move(95.185547f, 207.916020f);
        path.Line(95.078125f, 208.156250f);
        path.Line(97.976562f, 209.453120f);
        path.Line(98.083984f, 209.210940f);
        path.Close();
        path.Move(54.878906f, 209.251950f);
        path.Line(51.833984f, 210.150390f);
        path.Line(51.908204f, 210.404300f);
        path.Line(54.953126f, 209.503910f);
        path.Close();
        path.Move(100.982420f, 210.505860f);
        path.Line(100.875000f, 210.748050f);
        path.Line(103.773440f, 212.042970f);
        path.Line(103.880860f, 211.800780f);
        path.Close();
        path.Move(48.789062f, 211.050780f);
        path.Line(46.000000f, 211.875000f);
        path.Line(46.005900f, 211.875000f);
        path.Cubic(45.891832f, 211.903300f, 
                   45.799773f, 211.963700f, 
                   45.722697f, 212.025390f);
        path.Line(45.886760f, 212.230470f);
        path.Cubic(45.947630f, 212.181770f, 
                   46.011200f, 212.145570f, 
                   46.070353f, 212.130870f);
        path.Line(46.072353f, 212.130870f);
        path.Line(48.863368f, 211.304700f);
        path.Close();
        path.Move(106.781250f, 213.095700f);
        path.Line(106.671880f, 213.337890f);
        path.Line(109.572270f, 214.632810f);
        path.Line(109.679690f, 214.392580f);
        path.Close();
        path.Move(45.046875f, 214.992190f);
        path.Line(44.789062f, 215.050790f);
        path.Line(45.500000f, 218.146490f);
        path.Line(45.757812f, 218.087890f);
        path.Close();
        path.Move(112.468750f, 215.962890f);
        path.Line(112.273440f, 216.142580f);
        path.Cubic(112.584880f, 216.485450f, 
                   112.826940f, 216.889800f, 
                   113.017580f, 217.318360f);
        path.Line(113.250000f, 217.957030f);
        path.Line(113.605470f, 218.939450f);
        path.Line(113.853520f, 218.849650f);
        path.Line(113.498050f, 217.867230f);
        path.Line(113.261720f, 217.214880f);
        path.Line(113.259720f, 217.210880f);
        path.Cubic(113.060490f, 216.763010f, 
                   112.804050f, 216.332020f, 
                   112.468700f, 215.962830f);
        path.Close();
        path.Move(64.132812f, 219.734370f);
        path.Line(63.951172f, 219.806670f);
        path.Cubic(63.886252f, 219.832470f, 
                   63.820345f, 219.855770f, 
                   63.753906f, 219.875070f);
        path.Line(63.828126f, 220.128980f);
        path.Cubic(63.842066f, 220.124980f, 
                   63.855306f, 220.119980f, 
                   63.869146f, 220.115280f);
        path.Line(63.869146f, 222.882860f);
        path.Line(64.134771f, 222.882860f);
        path.Close();
        path.Move(60.685547f, 220.667970f);
        path.Cubic(59.658548f, 220.920310f, 
                   58.629623f, 221.163170f, 
                   57.599609f, 221.406250f);
        path.Line(57.660159f, 221.664060f);
        path.Cubic(58.690209f, 221.420980f, 
                   59.721468f, 221.176540f, 
                   60.750003f, 220.923830f);
        path.Close();
        path.Move(46.468750f, 221.181640f);
        path.Line(46.208984f, 221.240240f);
        path.Line(46.919922f, 224.335950f);
        path.Line(47.177734f, 224.275350f);
        path.Close();
        path.Move(114.929690f, 221.837890f);
        path.Line(114.681640f, 221.927690f);
        path.Cubic(115.039270f, 222.923500f, 
                   115.394080f, 223.920630f, 
                   115.748050f, 224.917930f);
        path.Line(115.996090f, 224.828130f);
        path.Cubic(115.642080f, 223.830690f, 
                   115.287480f, 222.834180f, 
                   114.929690f, 221.837900f);
        path.Close();
        path.Move(97.060547f, 223.304690f);
        path.Line(97.066447f, 226.195310f);
        path.Line(97.330119f, 226.195310f);
        path.Line(97.326219f, 223.701170f);
        path.Line(97.589891f, 223.812500f);
        path.Line(97.691453f, 223.568360f);
        path.Close();
        path.Move(56.941406f, 223.880860f);
        path.Line(56.677734f, 223.904260f);
        path.Cubic(56.770014f, 224.958030f, 
                   56.856638f, 226.011720f, 
                   56.925781f, 227.066370f);
        path.Line(57.189453f, 227.048770f);
        path.Cubic(57.120123f, 225.991270f, 
                   57.033771f, 224.935580f, 
                   56.941406f, 223.880800f);
        path.Close();
        path.Move(100.621090f, 224.792970f);
        path.Line(100.517580f, 225.037110f);
        path.Line(101.080080f, 225.273440f);
        path.Line(103.447270f, 226.263670f);
        path.Line(103.548830f, 226.019530f);
        path.Line(101.183590f, 225.029300f);
        path.Close();
        path.Move(63.871094f, 226.058590f);
        path.Line(63.873094f, 229.234370f);
        path.Line(64.136766f, 229.234370f);
        path.Line(64.136766f, 226.058590f);
        path.Close();
        path.Move(47.888672f, 227.371090f);
        path.Line(47.630859f, 227.429690f);
        path.Line(48.339844f, 230.523440f);
        path.Line(48.597656f, 230.464840f);
        path.Close();
        path.Move(117.050780f, 227.824220f);
        path.Line(116.800780f, 227.912120f);
        path.Cubic(117.148750f, 228.911410f, 
                   117.493520f, 229.910590f, 
                   117.826170f, 230.914070f);
        path.Line(118.078130f, 230.830070f);
        path.Cubic(117.744750f, 229.824400f, 
                   117.398860f, 228.823830f, 
                   117.050780f, 227.824210f);
        path.Close();
        path.Move(105.494140f, 228.310550f);
        path.Line(105.242190f, 228.396450f);
        path.Line(106.199220f, 231.234340f);
        path.Line(106.255820f, 231.404270f);
        path.Line(106.505820f, 231.320270f);
        path.Line(106.449220f, 231.150350f);
        path.Close();
        path.Move(97.335937f, 229.369140f);
        path.Line(97.070312f, 229.371140f);
        path.Line(97.076212f, 232.544970f);
        path.Line(97.339884f, 232.544970f);
        path.Close();
        path.Move(57.066406f, 230.228520f);
        path.Line(57.068406f, 230.464840f);
        path.Line(57.068406f, 230.468840f);
        path.Cubic(57.085066f, 230.678080f, 
                   57.047526f, 230.894520f, 
                   56.994186f, 231.113370f);
        path.Cubic(56.817803f, 231.810830f, 
                   56.361343f, 232.418860f, 
                   55.802779f, 232.880950f);
        path.Line(55.970748f, 233.084070f);
        path.Cubic(56.562864f, 232.594230f, 
                   57.056441f, 231.945380f, 
                   57.250045f, 231.177820f);
        path.Line(57.250045f, 231.175820f);
        path.Cubic(57.305885f, 230.946710f, 
                   57.352351f, 230.701910f, 
                   57.332075f, 230.447310f);
        path.Line(57.332075f, 230.228560f);
        path.Close();
        path.Move(63.875000f, 232.408200f);
        path.Line(63.875000f, 234.652340f);
        path.Line(63.373047f, 237.775390f);
        path.Line(63.634766f, 237.816390f);
        path.Line(64.138672f, 234.681620f);
        path.Line(64.013672f, 234.662120f);
        path.Line(64.140625f, 234.662120f);
        path.Line(64.138625f, 232.408210f);
        path.Close();
        path.Move(50.140625f, 233.062500f);
        path.Line(49.974609f, 233.267580f);
        path.Cubic(50.690124f, 233.845550f, 
                   51.579268f, 234.201840f, 
                   52.496094f, 234.277340f);
        path.Cubic(52.665734f, 234.291240f, 
                   52.836198f, 234.296740f, 
                   53.007812f, 234.291040f);
        path.Line(53.000000f, 234.027340f);
        path.Cubic(52.840018f, 234.032340f, 
                   52.678543f, 234.026870f, 
                   52.517578f, 234.013640f);
        path.Cubic(51.654804f, 233.942640f, 
                   50.814064f, 233.606450f, 
                   50.140625f, 233.062470f);
        path.Close();
        path.Move(118.400390f, 233.931640f);
        path.Cubic(118.250090f, 234.953840f, 
                   117.795850f, 235.928600f, 
                   117.142580f, 236.730470f);
        path.Line(117.347660f, 236.896480f);
        path.Cubic(118.029150f, 236.059980f, 
                   118.504180f, 235.044810f, 
                   118.662110f, 233.970700f);
        path.Close();
        path.Move(107.523440f, 234.328120f);
        path.Line(107.273440f, 234.412120f);
        path.Line(107.619140f, 235.425790f);
        path.Line(107.617140f, 235.425790f);
        path.Cubic(107.719670f, 235.729520f, 
                   107.824630f, 236.046400f, 
                   107.994090f, 236.341810f);
        path.Cubic(108.186000f, 236.684490f, 
                   108.430140f, 236.994930f, 
                   108.708930f, 237.267590f);
        path.Line(108.894480f, 237.080090f);
        path.Cubic(108.631480f, 236.822880f, 
                   108.403020f, 236.530180f, 
                   108.224560f, 236.210950f);
        path.Line(108.222560f, 236.210950f);
        path.Line(108.222560f, 236.208950f);
        path.Cubic(108.070830f, 235.944460f, 
                   107.971980f, 235.646690f, 
                   107.869040f, 235.341770f);
        path.Close();
        path.Move(97.080078f, 235.720700f);
        path.Line(97.085978f, 238.894530f);
        path.Line(97.349650f, 238.894530f);
        path.Line(97.345750f, 235.720700f);
        path.Close();
        path.Move(114.632810f, 238.476560f);
        path.Cubic(114.204660f, 238.620650f, 
                   113.759640f, 238.710880f, 
                   113.308590f, 238.748050f);
        path.Line(113.306590f, 238.748050f);
        path.Cubic(112.733610f, 238.803450f, 
                   112.149070f, 238.718650f, 
                   111.585890f, 238.566410f);
        path.Line(111.517490f, 238.822270f);
        path.Cubic(112.101320f, 238.980050f, 
                   112.716460f, 239.071180f, 
                   113.331940f, 239.011720f);
        path.Cubic(113.802810f, 238.972820f, 
                   114.269840f, 238.877600f, 
                   114.718660f, 238.726560f);
        path.Close();
        path.Move(62.871094f, 240.910160f);
        path.Line(62.367187f, 244.044920f);
        path.Line(62.628906f, 244.087920f);
        path.Line(63.130859f, 240.951200f);
        path.Close();
        path.Move(97.089844f, 242.070310f);
        path.Line(97.091844f, 242.939450f);
        path.Line(97.523484f, 245.228520f);
        path.Line(97.783250f, 245.179720f);
        path.Line(97.355516f, 242.914090f);
        path.Line(97.355516f, 242.070340f);
        path.Close();
        path.Move(61.863281f, 247.179690f);
        path.Line(61.359375f, 250.314450f);
        path.Line(61.621094f, 250.357450f);
        path.Line(62.125000f, 247.222690f);
        path.Close();
        path.Move(81.630859f, 248.019530f);
        path.Line(81.503906f, 248.251950f);
        path.Cubic(81.882147f, 248.460260f, 
                   82.170854f, 248.819420f, 
                   82.369141f, 249.214840f);
        path.Line(83.181641f, 250.802730f);
        path.Line(83.417969f, 250.681640f);
        path.Line(82.603516f, 249.095700f);
        path.Line(82.605516f, 249.095700f);
        path.Cubic(82.390165f, 248.666250f, 
                   82.071291f, 248.262060f, 
                   81.630906f, 248.019530f);
        path.Close();
        path.Move(98.373047f, 248.300780f);
        path.Line(98.113281f, 248.349580f);
        path.Line(98.701172f, 251.468720f);
        path.Line(98.962891f, 251.419920f);
        path.Close();
        path.Move(78.720703f, 248.894530f);
        path.Line(78.662113f, 248.982430f);
        path.Line(77.134770f, 251.656260f);
        path.Line(77.365238f, 251.787120f);
        path.Line(78.886723f, 249.121100f);
        path.Line(78.939453f, 249.043000f);
        path.Close();
        path.Move(61.574219f, 253.361330f);
        path.Line(61.347656f, 253.500000f);
        path.Line(63.005859f, 256.207030f);
        path.Line(63.232422f, 256.068360f);
        path.Close();
        path.Move(84.865234f, 253.505860f);
        path.Line(84.628906f, 253.626950f);
        path.Line(86.078125f, 256.453120f);
        path.Line(86.312500f, 256.332030f);
        path.Close();
        path.Move(75.560547f, 254.414060f);
        path.Line(75.261719f, 254.937500f);
        path.Line(76.111328f, 257.490230f);
        path.Line(76.363281f, 257.406230f);
        path.Line(75.550781f, 254.966780f);
        path.Line(75.791016f, 254.544900f);
        path.Close();
        path.Move(99.291016f, 254.541020f);
        path.Cubic(99.202246f, 255.031210f, 
                   99.341306f, 255.487230f, 
                   99.480469f, 255.919920f);
        path.Cubic(99.619632f, 256.352610f, 
                   99.758829f, 256.764430f, 
                   99.720703f, 257.175780f);
        path.Line(99.720703f, 257.177780f);
        path.Cubic(99.710213f, 257.334060f, 
                   99.672723f, 257.494550f, 
                   99.634763f, 257.660210f);
        path.Line(99.892575f, 257.720710f);
        path.Cubic(99.930415f, 257.555580f, 
                   99.971865f, 257.382560f, 
                   99.984375f, 257.199230f);
        path.Cubic(100.029295f, 256.714610f, 
                   99.870407f, 256.266930f, 
                   99.732422f, 255.837900f);
        path.Cubic(99.594437f, 255.408870f, 
                   99.475938f, 255.001200f, 
                   99.550781f, 254.587900f);
        path.Close();
        path.Move(64.890625f, 258.777340f);
        path.Line(64.664062f, 258.916020f);
        path.Line(66.322266f, 261.623050f);
        path.Line(66.548828f, 261.484370f);
        path.Close();
        path.Move(86.462891f, 259.429690f);
        path.Line(86.269531f, 262.597660f);
        path.Line(86.533203f, 262.615260f);
        path.Line(86.728516f, 259.445340f);
        path.Close();
        path.Move(77.365234f, 260.419920f);
        path.Line(77.115234f, 260.501920f);
        path.Line(78.117187f, 263.515590f);
        path.Line(78.367187f, 263.431590f);
        path.Close();
        path.Move(98.968750f, 260.767580f);
        path.Line(98.302734f, 263.871090f);
        path.Line(98.562500f, 263.927690f);
        path.Line(99.228516f, 260.822230f);
        path.Close();
        path.Move(68.207031f, 264.191410f);
        path.Line(67.980469f, 264.330080f);
        path.Line(68.544922f, 265.251950f);
        path.Line(67.566406f, 266.921870f);
        path.Line(67.794922f, 267.056640f);
        path.Line(68.853516f, 265.248050f);
        path.Close();
        path.Move(86.074219f, 265.767580f);
        path.Line(85.878906f, 268.935550f);
        path.Line(86.142578f, 268.953150f);
        path.Line(86.337891f, 265.783230f);
        path.Close();
        path.Move(79.386719f, 266.443360f);
        path.Line(79.132812f, 266.517560f);
        path.Cubic(79.248931f, 266.907460f, 
                   79.320111f, 267.311560f, 
                   79.324219f, 267.714820f);
        path.Cubic(79.332319f, 268.327650f, 
                   79.171198f, 268.956540f, 
                   78.789062f, 269.427710f);
        path.Line(78.994141f, 269.595680f);
        path.Cubic(79.425039f, 269.064380f, 
                   79.596271f, 268.373720f, 
                   79.587891f, 267.712870f);
        path.Line(79.587891f, 267.710870f);
        path.Cubic(79.583291f, 267.279340f, 
                   79.508541f, 266.852360f, 
                   79.386719f, 266.443290f);
        path.Close();
        path.Move(97.638672f, 266.976560f);
        path.Line(97.101562f, 269.476560f);
        path.Line(97.494141f, 270.087890f);
        path.Line(97.716797f, 269.945310f);
        path.Line(97.382812f, 269.425780f);
        path.Line(97.896484f, 267.031250f);
        path.Close();
        path.Move(65.962891f, 269.662110f);
        path.Line(64.359375f, 272.404300f);
        path.Line(64.587891f, 272.537110f);
        path.Line(66.191406f, 269.796870f);
        path.Close();
        path.Move(76.310547f, 271.355470f);
        path.Line(73.777344f, 273.269530f);
        path.Line(73.935547f, 273.480470f);
        path.Line(76.468750f, 271.566410f);
        path.Close();
        path.Move(85.173828f, 272.011720f);
        path.Cubic(85.175828f, 272.488700f, 
                   85.258848f, 272.997320f, 
                   85.546875f, 273.416020f);
        path.Cubic(85.732915f, 273.693810f, 
                   86.006036f, 273.869080f, 
                   86.271484f, 274.025390f);
        path.Cubic(86.536933f, 274.181700f, 
                   86.795950f, 274.320150f, 
                   86.976562f, 274.498050f);
        path.Line(87.162109f, 274.310550f);
        path.Cubic(86.941784f, 274.093540f, 
                   86.662040f, 273.948650f, 
                   86.404297f, 273.796870f);
        path.Cubic(86.146554f, 273.645100f, 
                   85.913206f, 273.487940f, 
                   85.765625f, 273.267580f);
        path.Cubic(85.521165f, 272.912210f, 
                   85.439410f, 272.457800f, 
                   85.437500f, 272.011720f);
        path.Close();
        path.Move(99.431641f, 272.617190f);
        path.Line(99.208984f, 272.759770f);
        path.Line(100.921880f, 275.433590f);
        path.Line(101.144530f, 275.289060f);
        path.Close();
        path.Move(71.281250f, 275.164060f);
        path.Cubic(70.194425f, 275.540680f, 
                   69.581324f, 276.552360f, 
                   68.710937f, 277.072270f);
        path.Line(68.847656f, 277.298830f);
        path.Cubic(69.796092f, 276.732300f, 
                   70.394177f, 275.751240f, 
                   71.367187f, 275.414060f);
        path.Close();
        path.Move(63.775391f, 275.429690f);
        path.Line(63.513672f, 275.474590f);
        path.Cubic(63.606472f, 276.013520f, 
                   63.868605f, 276.513480f, 
                   64.240234f, 276.908180f);
        path.Line(64.244134f, 276.910180f);
        path.Line(64.246134f, 276.914180f);
        path.Cubic(64.653937f, 277.298000f, 
                   65.148419f, 277.593490f, 
                   65.689493f, 277.752070f);
        path.Line(65.765663f, 277.498170f);
        path.Cubic(65.269272f, 277.352680f, 
                   64.810264f, 277.078200f, 
                   64.431679f, 276.722780f);
        path.Cubic(64.095577f, 276.364600f, 
                   63.858426f, 275.911790f, 
                   63.775429f, 275.429810f);
        path.Close();
        path.Move(89.785156f, 276.054690f);
        path.Line(89.638672f, 276.275390f);
        path.Line(92.279297f, 278.037110f);
        path.Line(92.427734f, 277.816410f);
        path.Close();
        path.Move(102.464840f, 278.205080f);
        path.Line(102.203130f, 278.230480f);
        path.Cubic(102.213130f, 278.327680f, 
                   102.211130f, 278.430650f, 
                   102.209130f, 278.537120f);
        path.Cubic(102.193030f, 279.085010f, 
                   101.979480f, 279.620080f, 
                   101.646630f, 280.060560f);
        path.Line(101.644630f, 280.062560f);
        path.Line(101.644630f, 280.064560f);
        path.Cubic(101.441080f, 280.350840f, 
                   101.161730f, 280.584170f, 
                   100.849710f, 280.754020f);
        path.Line(100.976660f, 280.986440f);
        path.Cubic(101.319900f, 280.799600f, 
                   101.629390f, 280.540510f, 
                   101.859480f, 280.216910f);
        path.Cubic(102.220000f, 279.738470f, 
                   102.454790f, 279.154870f, 
                   102.472760f, 278.545030f);
        path.Line(102.472760f, 278.543030f);
        path.Cubic(102.474760f, 278.434520f, 
                   102.476760f, 278.322180f, 
                   102.464760f, 278.205140f);
        path.Close();
        path.Move(95.068359f, 279.578120f);
        path.Line(94.921875f, 279.798830f);
        path.Line(95.666016f, 280.294920f);
        path.Cubic(96.306470f, 280.737540f, 
                   97.037101f, 281.038660f, 
                   97.785156f, 281.224610f);
        path.Line(97.847656f, 280.966800f);
        path.Cubic(97.125352f, 280.787250f, 
                   96.425621f, 280.497200f, 
                   95.816406f, 280.076170f);
        path.Close();
    }

    private void SetPathData_path4873(IRenderPath path)
    { // Label: outside
        path.Move(116.610190f, 239.028280f);
        path.Cubic(125.595010f, 241.591200f, 
                   131.229220f, 235.709900f, 
                   133.576070f, 230.517130f);
        path.Cubic(135.227450f, 227.523270f, 
                   134.731860f, 221.195810f, 
                   133.475850f, 219.182840f);
        path.Cubic(132.584690f, 217.683580f, 
                   132.911820f, 218.349300f, 
                   132.245100f, 216.999310f);
        path.Cubic(131.967290f, 216.856440f, 
                   128.645860f, 212.959390f, 
                   127.567870f, 211.888020f);
        path.Cubic(126.964430f, 211.314950f, 
                   126.424010f, 210.929230f, 
                   125.705040f, 210.364830f);
        path.Cubic(125.292210f, 210.040750f, 
                   124.435500f, 209.526790f, 
                   123.588580f, 209.126210f);
        path.Cubic(122.542250f, 208.631310f, 
                   121.933000f, 208.218840f, 
                   120.714940f, 207.805800f);
        path.Cubic(110.692520f, 203.572470f, 
                   103.382120f, 200.765810f, 
                   103.382120f, 200.765810f);
        path.Cubic(102.847430f, 200.465690f, 
                   102.496520f, 200.388490f, 
                   101.980470f, 200.136720f);
        path.Cubic(102.289500f, 199.661970f, 
                   102.751320f, 198.832360f, 
                   103.015810f, 198.318790f);
        path.Cubic(106.005790f, 193.457440f, 
                   107.910840f, 186.565790f, 
                   106.047690f, 179.069110f);
        path.Cubic(104.071220f, 171.116480f, 
                   95.321738f, 159.351160f, 
                   80.650292f, 159.332130f);
        path.Cubic(69.192320f, 159.317230f, 
                   58.315427f, 168.170370f, 
                   56.058756f, 176.844570f);
        path.Cubic(53.792212f, 185.556710f, 
                   54.516063f, 190.762480f, 
                   57.713643f, 197.379750f);
        path.Cubic(57.785083f, 197.467050f, 
                   57.859238f, 197.605040f, 
                   58.087891f, 198.113280f);
        path.Cubic(57.741188f, 198.387510f, 
                   58.078991f, 198.160580f, 
                   57.369604f, 198.297030f);
        path.Cubic(56.351645f, 198.532910f, 
                   54.954239f, 198.807930f, 
                   50.411923f, 199.969860f);
        path.Cubic(49.072733f, 200.197800f, 
                   48.056285f, 200.572560f, 
                   46.458024f, 200.622020f);
        path.Cubic(43.577659f, 200.711120f, 
                   41.845624f, 201.556990f, 
                   39.515239f, 202.722210f);
        path.Cubic(38.148937f, 203.405370f, 
                   37.574575f, 203.733820f, 
                   36.417969f, 204.218750f);
        path.Cubic(36.186181f, 204.268850f, 
                   34.030138f, 206.096200f, 
                   33.718384f, 206.396150f);
        path.Cubic(30.692752f, 209.307250f, 
                   29.716837f, 215.219490f, 
                   30.511448f, 218.208920f);
        path.Cubic(31.613888f, 222.356440f, 
                   33.337713f, 226.712200f, 
                   41.265202f, 229.406610f);
        path.Cubic(42.039415f, 229.729520f, 
                   44.557566f, 229.847870f, 
                   45.326172f, 229.798830f);
        path.Line(54.906250f, 229.460940f);
        path.Line(54.992190f, 260.517580f);
        path.Line(50.995415f, 267.576450f);
        path.Cubic(50.264101f, 268.407490f, 
                   50.057772f, 275.516850f, 
                   52.216183f, 277.841250f);
        path.Cubic(54.170597f, 282.012540f, 
                   59.094912f, 283.476400f, 
                   60.383012f, 283.450800f);
        path.Cubic(62.957097f, 283.676640f, 
                   64.897209f, 282.969980f, 
                   66.504323f, 282.352590f);
        path.Line(76.416853f, 274.252720f);
        path.Cubic(77.394099f, 272.407640f, 
                   79.686247f, 269.186330f, 
                   80.321012f, 266.538510f);
        path.Line(80.078356f, 259.290180f);
        path.Line(79.890605f, 254.851900f);
        path.Cubic(79.883405f, 254.666630f, 
                   79.867445f, 254.644510f, 
                   79.890605f, 254.851900f);
        path.Line(80.321012f, 266.538510f);
        path.Cubic(80.271922f, 266.897630f, 
                   76.635226f, 273.550490f, 
                   76.416853f, 274.252720f);
        path.Cubic(75.993025f, 275.390610f, 
                   72.584694f, 279.465200f, 
                   72.157530f, 280.738970f);
        path.Cubic(72.539494f, 285.927700f, 
                   79.231440f, 289.903520f, 
                   83.054193f, 289.935000f);
        path.Cubic(86.864183f, 289.961200f, 
                   89.425979f, 288.274760f, 
                   90.018967f, 287.963720f);
        path.Line(100.595960f, 281.721920f);
        path.Cubic(104.226550f, 279.579400f, 
                   106.998290f, 273.277230f, 
                   106.810800f, 269.812520f);
        path.Cubic(106.725400f, 269.011590f, 
                   106.374340f, 266.784530f, 
                   106.253910f, 265.371090f);
        path.Line(106.285110f, 235.755860f);
        path.Close();
    }

    private void SetPathData_path1995(IRenderPath path)
    { // Label: standard
        path.Move(118.972540f, 230.240330f);
        path.Cubic(121.542890f, 230.765320f, 
                   124.303070f, 229.120450f, 
                   125.213350f, 227.068100f);
        path.Cubic(125.695430f, 225.744670f, 
                   125.775890f, 224.457240f, 
                   125.254850f, 223.246080f);
        path.Cubic(124.532440f, 221.594150f, 
                   122.884640f, 220.224300f, 
                   121.520890f, 219.504960f);
        path.Cubic(121.243080f, 219.362090f, 
                   120.621310f, 219.078980f, 
                   119.732310f, 218.692690f);
        path.Cubic(120.262800f, 218.145620f, 
                   122.350300f, 216.765870f, 
                   122.174010f, 215.445040f);
        path.Cubic(122.001580f, 214.153140f, 
                   119.961640f, 214.563360f, 
                   118.983370f, 214.918240f);
        path.Cubic(117.892490f, 215.313970f, 
                   117.343080f, 215.707440f, 
                   116.676260f, 216.112910f);
        path.Cubic(106.653840f, 211.879580f, 
                   89.283626f, 204.708040f, 
                   89.283626f, 204.708040f);
        path.Cubic(89.003168f, 204.501670f, 
                   88.371129f, 204.170040f, 
                   88.353537f, 202.757120f);
        path.Cubic(88.343207f, 201.927760f, 
                   88.223556f, 200.776570f, 
                   88.746522f, 200.220710f);
        path.Cubic(95.527887f, 196.520070f, 
                   98.936988f, 188.692240f, 
                   97.027324f, 181.207270f);
        path.Cubic(95.117675f, 173.722360f, 
                   88.375520f, 168.486110f, 
                   80.650272f, 168.486110f);
        path.Cubic(72.925024f, 168.486110f, 
                   66.182869f, 173.722360f, 
                   64.273220f, 181.207270f);
        path.Cubic(62.363556f, 188.692240f, 
                   65.792806f, 196.483380f, 
                   72.554022f, 200.220710f);
        path.Cubic(72.652752f, 200.275310f, 
                   73.018256f, 200.810650f, 
                   72.987938f, 202.490830f);
        path.Cubic(72.970838f, 203.438350f, 
                   72.695063f, 204.331120f, 
                   71.863459f, 204.668350f);
        path.Cubic(71.863459f, 204.668350f, 
                   58.840884f, 207.213650f, 
                   50.024968f, 208.986360f);
        path.Cubic(49.231710f, 208.195330f, 
                   48.349256f, 207.476440f, 
                   47.337026f, 207.104870f);
        path.Cubic(46.617760f, 206.840850f, 
                   45.404971f, 206.646710f, 
                   44.868656f, 207.148270f);
        path.Cubic(43.709476f, 208.232280f, 
                   46.149273f, 210.096140f, 
                   46.421889f, 210.598790f);
        path.Cubic(46.190101f, 210.648890f, 
                   42.721883f, 211.294030f, 
                   42.304398f, 211.407470f);
        path.Cubic(40.197505f, 211.979960f, 
                   39.222097f, 214.149230f, 
                   39.398140f, 216.070780f);
        path.Cubic(39.553304f, 217.764440f, 
                   40.687605f, 219.596160f, 
                   42.634938f, 220.352870f);
        path.Cubic(43.409151f, 220.675780f, 
                   44.236999f, 220.751160f, 
                   45.005605f, 220.702120f);
        path.Line(63.984325f, 220.032540f);
        path.Line(64.100584f, 262.958730f);
        path.Line(60.208563f, 269.655340f);
        path.Cubic(59.477249f, 270.486380f, 
                   59.294543f, 271.666230f, 
                   59.740250f, 272.679530f);
        path.Cubic(60.277253f, 273.850630f, 
                   61.457817f, 274.591600f, 
                   62.745917f, 274.566000f);
        path.Cubic(63.415707f, 274.558000f, 
                   64.074033f, 274.391130f, 
                   64.666792f, 274.079170f);
        path.Line(72.741875f, 270.277110f);
        path.Cubic(74.726250f, 269.777050f, 
                   76.790000f, 267.895860f, 
                   76.790000f, 265.181230f);
        path.Line(76.819110f, 263.289460f);
        path.Line(78.771735f, 248.210850f);
        path.Cubic(78.896722f, 247.014170f, 
                   80.496913f, 246.941340f, 
                   80.676735f, 248.210850f);
        path.Line(83.687693f, 267.403720f);
        path.Cubic(83.741803f, 267.742320f, 
                   80.816692f, 275.989540f, 
                   80.816692f, 275.989540f);
        path.Cubic(80.392864f, 277.127430f, 
                   79.802345f, 278.478720f, 
                   80.556357f, 279.421760f);
        path.Cubic(81.337029f, 280.398150f, 
                   82.105822f, 280.935000f, 
                   83.388263f, 280.914670f);
        path.Cubic(84.057836f, 280.907670f, 
                   84.681928f, 280.724420f, 
                   85.274916f, 280.413380f);
        path.Line(93.780568f, 275.441110f);
        path.Cubic(95.707700f, 274.314540f, 
                   97.242932f, 272.842940f, 
                   97.589984f, 270.413900f);
        path.Cubic(97.504554f, 269.612970f, 
                   97.270119f, 267.203210f, 
                   97.149693f, 265.789770f);
        path.Line(97.193823f, 223.310840f);
        path.Close();
    }

    private void SetPathData_path20074(IRenderPath path)
    { // Label: standardLine
        path.Move(119.005933f, 230.111910f);
        path.Line(97.061511f, 223.129696f);
        path.Line(97.017193f, 265.789632f);
        path.Line(97.017671f, 265.801018f);
        path.Cubic(97.138165f, 267.215249f, 
                   97.372736f, 269.626412f, 
                   97.458231f, 270.427953f);
        path.Cubic(97.118232f, 272.778931f, 
                   95.627314f, 274.208053f, 
                   93.713698f, 275.326722f);
        path.Line(85.210690f, 280.297446f);
        path.Cubic(84.632004f, 280.600985f, 
                   84.038108f, 280.775369f, 
                   83.386878f, 280.782177f);
        path.Cubic(82.146557f, 280.801838f, 
                   81.428572f, 280.300467f, 
                   80.659845f, 279.339016f);
        path.Cubic(79.955796f, 278.458465f, 
                   80.515748f, 277.177121f, 
                   80.940859f, 276.035788f);
        path.Cubic(82.892046f, 270.534552f, 
                   83.859736f, 267.640644f, 
                   83.818533f, 267.382811f);
        path.Line(83.818592f, 267.383185f);
        path.Line(80.807634f, 248.190315f);
        path.Line(80.807925f, 248.192267f);
        path.Cubic(80.611211f, 246.803501f, 
                   78.776784f, 246.886992f, 
                   78.639952f, 248.197086f);
        path.Line(76.686741f, 263.279902f);
        path.Line(76.657516f, 265.179191f);
        path.Line(76.657500f, 265.181230f);
        path.Cubic(76.657500f, 267.837352f, 
                   74.661592f, 269.656701f, 
                   72.709497f, 270.148627f);
        path.Line(72.685432f, 270.157233f);
        path.Line(64.610349f, 273.959293f);
        path.Line(64.605083f, 273.961917f);
        path.Cubic(64.026237f, 274.266555f, 
                   63.398397f, 274.425697f, 
                   62.744335f, 274.433509f);
        path.Cubic(61.494743f, 274.458340f, 
                   60.381203f, 273.759437f, 
                   59.860691f, 272.624302f);
        path.Cubic(59.431401f, 271.648285f, 
                   59.602270f, 270.544878f, 
                   60.308033f, 269.742873f);
        path.Line(60.323120f, 269.721920f);
        path.Line(64.233181f, 262.994271f);
        path.Line(64.116454f, 219.895296f);
        path.Line(45.000933f, 220.569702f);
        path.Line(44.997168f, 220.569889f);
        path.Cubic(44.238799f, 220.618276f, 
                   43.441402f, 220.545668f, 
                   42.685943f, 220.230580f);
        path.Cubic(40.776916f, 219.488713f, 
                   39.682401f, 217.721241f, 
                   39.530087f, 216.058692f);
        path.Cubic(39.357221f, 214.171813f, 
                   40.292672f, 212.091405f, 
                   42.339141f, 211.535334f);
        path.Cubic(42.751419f, 211.423309f, 
                   46.216219f, 210.778805f, 
                   46.449882f, 210.728299f);
        path.Cubic(46.252233f, 210.008055f, 
                   43.914379f, 208.222074f, 
                   44.959157f, 207.245047f);
        path.Cubic(45.448089f, 206.787799f, 
                   46.584147f, 206.969656f, 
                   47.291368f, 207.229255f);
        path.Cubic(48.282770f, 207.593179f, 
                   49.142863f, 208.293853f, 
                   49.931408f, 209.080183f);
        path.Cubic(55.928156f, 207.934495f, 
                   63.207301f, 206.495228f, 
                   71.888876f, 204.798389f);
        path.Cubic(72.803108f, 204.430286f, 
                   73.102978f, 203.459515f, 
                   73.120416f, 202.493221f);
        path.Cubic(73.151496f, 200.770816f, 
                   72.744427f, 200.174596f, 
                   72.618145f, 200.104760f);
        path.Cubic(65.896057f, 196.389058f, 
                   62.503244f, 188.680702f, 
                   64.401607f, 181.240026f);
        path.Cubic(66.300025f, 173.799139f, 
                   72.970433f, 168.618610f, 
                   80.650272f, 168.618610f);
        path.Cubic(88.330111f, 168.618610f, 
                   95.000519f, 173.799139f, 
                   96.898937f, 181.240026f);
        path.Cubic(98.797371f, 188.680981f, 
                   95.424544f, 196.425520f, 
                   88.683051f, 200.104401f);
        path.Cubic(88.085496f, 200.729947f, 
                   88.210793f, 201.935450f, 
                   88.221047f, 202.758770f);
        path.Cubic(88.239623f, 204.250670f, 
                   88.932720f, 204.614338f, 
                   89.205097f, 204.814761f);
        path.Cubic(100.813022f, 209.611464f, 
                   109.943404f, 213.412881f, 
                   116.624704f, 216.234968f);
        path.Cubic(117.416178f, 215.818065f, 
                   117.954815f, 215.432310f, 
                   119.028555f, 215.042798f);
        path.Cubic(119.997494f, 214.691303f, 
                   121.888966f, 214.310938f, 
                   122.042675f, 215.462569f);
        path.Cubic(122.207982f, 216.701110f, 
                   120.177713f, 218.043032f, 
                   119.637188f, 218.600451f);
        path.Cubic(120.567450f, 219.200045f, 
                   121.185295f, 219.481368f, 
                   121.460293f, 219.622791f);
        path.Cubic(122.810580f, 220.335038f, 
                   124.423611f, 221.675984f, 
                   125.133451f, 223.299169f);
        path.Cubic(125.641675f, 224.480545f, 
                   125.564382f, 225.717303f, 
                   125.088853f, 227.022750f);
        path.Cubic(124.199036f, 229.028203f, 
                   121.519135f, 230.625233f, 
                   118.999055f, 230.110510f);
        path.Close();
        path.Move(118.932366f, 230.366593f);
        path.Line(118.946025f, 230.370150f);
        path.Cubic(121.566645f, 230.905407f, 
                   124.407104f, 229.212697f, 
                   125.334471f, 227.121821f);
        path.Cubic(125.826478f, 225.772037f, 
                   125.910105f, 224.433935f, 
                   125.376565f, 223.193718f);
        path.Cubic(124.641269f, 221.512316f, 
                   122.958700f, 220.113562f, 
                   121.582707f, 219.387764f);
        path.Cubic(121.300865f, 219.242812f, 
                   120.675170f, 218.957915f, 
                   119.785115f, 218.571167f);
        path.Cubic(120.347887f, 218.248208f, 
                   122.492618f, 216.830630f, 
                   122.305345f, 215.427511f);
        path.Cubic(122.114194f, 213.995342f, 
                   119.925786f, 214.435417f, 
                   118.938185f, 214.793682f);
        path.Cubic(117.830165f, 215.195630f, 
                   117.269982f, 215.596815f, 
                   116.607419f, 215.999697f);
        path.Cubic(110.045889f, 213.168499f, 
                   100.914515f, 209.366669f, 
                   89.334190f, 204.585568f);
        path.Cubic(89.073616f, 204.389002f, 
                   88.502635f, 204.089410f, 
                   88.486027f, 202.755470f);
        path.Cubic(88.475621f, 201.920070f, 
                   88.361616f, 200.823193f, 
                   88.843026f, 200.311503f);
        path.Cubic(95.631230f, 196.614620f, 
                   99.076605f, 188.703499f, 
                   97.155711f, 181.174514f);
        path.Cubic(95.234831f, 173.645581f, 
                   88.420929f, 168.353610f, 
                   80.650272f, 168.353610f);
        path.Cubic(72.879615f, 168.353610f, 
                   66.065713f, 173.645581f, 
                   64.144833f, 181.174514f);
        path.Cubic(62.223868f, 188.703778f, 
                   65.689555f, 196.577702f, 
                   72.489922f, 200.336673f);
        path.Cubic(72.561077f, 200.376024f, 
                   72.885016f, 200.850484f, 
                   72.855460f, 202.488439f);
        path.Cubic(72.838698f, 203.417185f, 
                   72.587018f, 204.231954f, 
                   71.813666f, 204.545562f);
        path.Cubic(63.156184f, 206.235205f, 
                   55.876335f, 207.674611f, 
                   49.998848f, 208.856460f);
        path.Cubic(49.320557f, 208.096807f, 
                   48.415742f, 207.359701f, 
                   47.382685f, 206.980486f);
        path.Cubic(46.651373f, 206.712044f, 
                   45.361853f, 206.505621f, 
                   44.778153f, 207.051495f);
        path.Cubic(43.504573f, 208.242486f, 
                   46.046313f, 210.184225f, 
                   46.305417f, 210.661960f);
        path.Cubic(46.163983f, 210.518975f, 
                   42.692347f, 211.164751f, 
                   42.269655f, 211.279606f);
        path.Cubic(40.102338f, 211.868515f, 
                   39.086973f, 214.126647f, 
                   39.266193f, 216.082868f);
        path.Cubic(39.424207f, 217.807639f, 
                   40.598294f, 219.703607f, 
                   42.586946f, 220.476373f);
        path.Cubic(43.376900f, 220.805892f, 
                   44.235199f, 220.884044f, 
                   45.014042f, 220.834351f);
        path.Line(63.852196f, 220.169784f);
        path.Line(63.967987f, 262.923189f);
        path.Line(60.100446f, 269.577678f);
        path.Cubic(59.352228f, 270.427882f, 
                   59.157685f, 271.684175f, 
                   59.618964f, 272.732878f);
        path.Cubic(60.173303f, 273.941823f, 
                   61.420891f, 274.724860f, 
                   62.748550f, 274.698474f);
        path.Cubic(63.433017f, 274.690303f, 
                   64.121829f, 274.515705f, 
                   64.728501f, 274.196423f);
        path.Line(72.786785f, 270.402417f);
        path.Cubic(74.790908f, 269.897399f, 
                   76.922500f, 267.954368f, 
                   76.922500f, 265.181230f);
        path.Line(76.951479f, 263.299018f);
        path.Line(78.903138f, 248.227866f);
        path.Line(78.903518f, 248.224614f);
        path.Cubic(79.016660f, 247.141348f, 
                   80.382615f, 247.079179f, 
                   80.545545f, 248.229433f);
        path.Line(80.545836f, 248.231385f);
        path.Line(83.556794f, 267.424255f);
        path.Line(83.556853f, 267.424629f);
        path.Cubic(83.587797f, 267.618263f, 
                   82.641486f, 270.448234f, 
                   80.691814f, 275.945248f);
        path.Cubic(80.269980f, 277.077739f, 
                   79.648894f, 278.498975f, 
                   80.452869f, 279.504504f);
        path.Cubic(81.245486f, 280.495833f, 
                   82.065087f, 281.068162f, 
                   83.390363f, 281.047153f);
        path.Cubic(84.077564f, 281.039971f, 
                   84.731852f, 280.847855f, 
                   85.336463f, 280.530718f);
        path.Line(85.341786f, 280.527768f);
        path.Line(93.847438f, 275.555498f);
        path.Cubic(95.788086f, 274.421027f, 
                   97.367632f, 272.906949f, 
                   97.721152f, 270.432641f);
        path.Cubic(97.636372f, 269.599528f, 
                   97.402073f, 267.191171f, 
                   97.281715f, 265.778522f);
        path.Line(97.326135f, 223.491984f);
        path.Line(118.932366f, 230.366593f);
        path.Close();
    }

    private void SetPathData_path4902(IRenderPath path)
    { // Label: minimum
        path.Move(118.144010f, 227.345440f);
        path.Cubic(120.155420f, 228.081360f, 
                   121.606610f, 227.691470f, 
                   122.199500f, 226.942060f);
        path.Cubic(123.534050f, 225.696710f, 
                   123.253000f, 224.212100f, 
                   122.506370f, 223.313430f);
        path.Cubic(121.572190f, 222.271800f, 
                   120.296800f, 221.744520f, 
                   119.450890f, 221.259040f);
        path.Cubic(119.173080f, 221.116170f, 
                   118.233710f, 220.564130f, 
                   117.344710f, 220.177840f);
        path.Cubic(117.875200f, 219.630770f, 
                   118.636630f, 218.714600f, 
                   119.051630f, 217.984230f);
        path.Cubic(119.554140f, 217.099840f, 
                   118.616870f, 216.616150f, 
                   117.598250f, 217.190160f);
        path.Cubic(116.571880f, 217.768530f, 
                   116.080830f, 218.263800f, 
                   115.414010f, 218.669270f);
        path.Cubic(105.391590f, 214.435940f, 
                   89.023345f, 207.155690f, 
                   89.023345f, 207.155690f);
        path.Cubic(87.794922f, 206.730470f, 
                   85.715050f, 205.410990f, 
                   85.801098f, 202.604330f);
        path.Cubic(85.771208f, 200.431540f, 
                   85.889478f, 198.848400f, 
                   87.990820f, 197.691500f);
        path.Cubic(92.307065f, 195.398080f, 
                   96.518976f, 190.161180f, 
                   94.405134f, 181.278150f);
        path.Cubic(93.441467f, 177.228520f, 
                   88.470030f, 170.958650f, 
                   80.744786f, 170.966570f);
        path.Cubic(75.144671f, 170.972570f, 
                   68.709926f, 174.794710f, 
                   66.833177f, 181.294850f);
        path.Cubic(64.732838f, 188.569400f, 
                   67.976363f, 194.676920f, 
                   73.621833f, 197.809610f);
        path.Cubic(73.621833f, 197.809610f, 
                   75.845536f, 199.727760f, 
                   75.374387f, 203.089860f);
        path.Cubic(75.269016f, 205.238800f, 
                   73.883812f, 206.737540f, 
                   71.096181f, 207.169260f);
        path.Cubic(71.096181f, 207.169260f, 
                   59.219109f, 209.762150f, 
                   50.403193f, 211.534860f);
        path.Cubic(49.609935f, 210.743830f, 
                   49.427444f, 210.530460f, 
                   48.882936f, 210.125480f);
        path.Cubic(48.268143f, 209.668230f, 
                   46.708501f, 209.445380f, 
                   46.941304f, 210.141780f);
        path.Cubic(47.278553f, 211.150630f, 
                   47.766893f, 211.560310f, 
                   48.223257f, 212.230000f);
        path.Cubic(47.991469f, 212.280100f, 
                   44.331160f, 213.078150f, 
                   43.906520f, 213.160880f);
        path.Cubic(42.524096f, 213.430220f, 
                   41.629427f, 215.272240f, 
                   41.976236f, 216.536490f);
        path.Cubic(42.185565f, 217.299570f, 
                   42.814489f, 217.772520f, 
                   43.422311f, 218.129320f);
        path.Cubic(43.887143f, 218.402180f, 
                   46.441003f, 218.107920f, 
                   47.142791f, 218.067320f);
        path.Line(66.588375f, 217.319510f);
        path.Line(66.613955f, 263.641880f);
        path.Line(62.515519f, 270.650560f);
        path.Cubic(62.336349f, 271.002340f, 
                   62.315217f, 271.355820f, 
                   62.453209f, 271.669540f);
        path.Cubic(62.619466f, 272.032110f, 
                   62.843231f, 271.978040f, 
                   63.242031f, 271.970110f);
        path.Cubic(63.449399f, 271.968110f, 
                   65.479652f, 270.918500f, 
                   66.072411f, 270.606540f);
        path.Line(71.974683f, 267.936730f);
        path.Cubic(73.179482f, 267.342180f, 
                   74.398636f, 266.404950f, 
                   74.304142f, 264.777000f);
        path.Line(74.386922f, 262.218730f);
        path.Line(76.365305f, 247.489560f);
        path.Cubic(77.256622f, 244.003310f, 
                   82.013326f, 243.802550f, 
                   83.154758f, 247.548060f);
        path.Line(86.213769f, 267.575730f);
        path.Cubic(86.267879f, 267.914330f, 
                   83.492879f, 275.989110f, 
                   83.492879f, 275.989110f);
        path.Cubic(83.236095f, 276.642580f, 
                   82.988703f, 277.398450f, 
                   83.265461f, 277.744590f);
        path.Cubic(83.552005f, 278.102970f, 
                   83.436990f, 278.114240f, 
                   83.907707f, 278.106780f);
        path.Cubic(84.153473f, 278.103780f, 
                   84.441603f, 277.954270f, 
                   84.659258f, 277.840100f);
        path.Line(93.144417f, 272.856530f);
        path.Cubic(95.692091f, 271.360210f, 
                   95.067318f, 269.083120f, 
                   94.896535f, 268.658600f);
        path.Cubic(94.811105f, 267.857670f, 
                   94.797895f, 267.036240f, 
                   94.677464f, 265.622800f);
        path.Line(94.586244f, 219.809840f);
        path.Close();
    }

    private void SetPathData_path11125(IRenderPath path)
    { // Label: absminimum
        path.Move(118.044790f, 226.518620f);
        path.Cubic(120.056200f, 227.254540f, 
                   121.060900f, 227.096160f, 
                   121.653790f, 226.346750f);
        path.Cubic(122.277280f, 225.399060f, 
                   122.260820f, 225.038920f, 
                   122.010280f, 223.974890f);
        path.Cubic(121.076100f, 222.933260f, 
                   119.894250f, 222.289050f, 
                   119.001570f, 221.686640f);
        path.Cubic(118.341980f, 221.362980f, 
                   118.170330f, 221.267940f, 
                   116.641700f, 220.349850f);
        path.Cubic(117.172190f, 219.802780f, 
                   117.832760f, 219.047520f, 
                   118.350050f, 218.405180f);
        path.Cubic(119.017350f, 217.576570f, 
                   118.350450f, 217.392310f, 
                   117.411160f, 217.985280f);
        path.Cubic(116.481810f, 218.571990f, 
                   116.102980f, 218.882710f, 
                   115.436160f, 219.288180f);
        path.Cubic(105.413740f, 215.054850f, 
                   88.692616f, 207.982510f, 
                   88.692616f, 207.982510f);
        path.Cubic(87.292482f, 207.497860f, 
                   84.921883f, 205.993940f, 
                   85.019959f, 202.794960f);
        path.Cubic(84.985889f, 200.318450f, 
                   85.120693f, 198.514020f, 
                   87.515763f, 197.195410f);
        path.Cubic(91.537645f, 193.778210f, 
                   95.701603f, 189.854070f, 
                   93.776749f, 181.443510f);
        path.Cubic(92.848075f, 177.385710f, 
                   88.436957f, 171.851620f, 
                   80.711713f, 171.859540f);
        path.Cubic(75.111598f, 171.865540f, 
                   69.205709f, 175.393460f, 
                   67.527708f, 181.592510f);
        path.Cubic(65.775336f, 188.066310f, 
                   68.947028f, 193.862850f, 
                   74.303245f, 197.313520f);
        path.Cubic(74.303245f, 197.313520f, 
                   76.864825f, 199.523120f, 
                   76.322088f, 203.396060f);
        path.Cubic(76.200706f, 205.871520f, 
                   74.605030f, 207.597980f, 
                   71.393837f, 208.095300f);
        path.Cubic(71.393837f, 208.095300f, 
                   59.346676f, 210.522820f, 
                   50.530760f, 212.295530f);
        path.Cubic(49.737502f, 211.504500f, 
                   49.167585f, 210.743070f, 
                   48.623077f, 210.338090f);
        path.Cubic(48.008284f, 209.880840f, 
                   47.172616f, 210.044740f, 
                   47.531892f, 210.685120f);
        path.Cubic(48.058129f, 211.623100f, 
                   48.770892f, 212.195790f, 
                   49.227256f, 212.865480f);
        path.Cubic(48.995468f, 212.915580f, 
                   44.624091f, 213.959310f, 
                   44.199451f, 214.042040f);
        path.Cubic(42.817027f, 214.311380f, 
                   42.709022f, 215.206100f, 
                   42.902278f, 216.222300f);
        path.Cubic(43.050108f, 216.999640f, 
                   43.574510f, 217.200300f, 
                   44.298743f, 217.418250f);
        path.Cubic(44.921550f, 217.605680f, 
                   46.722123f, 217.380350f, 
                   47.423911f, 217.339650f);
        path.Line(67.613635f, 216.492620f);
        path.Line(67.672285f, 263.178790f);
        path.Line(63.703985f, 269.878750f);
        path.Cubic(63.604205f, 270.074670f, 
                   63.592431f, 270.271530f, 
                   63.669285f, 270.446250f);
        path.Cubic(63.761875f, 270.648180f, 
                   63.886501f, 270.618060f, 
                   64.108605f, 270.613650f);
        path.Cubic(64.224094f, 270.612650f, 
                   65.199019f, 270.193460f, 
                   65.791778f, 269.881500f);
        path.Line(71.577120f, 267.188310f);
        path.Cubic(72.781919f, 266.593760f, 
                   73.556737f, 266.358110f, 
                   73.462243f, 264.730160f);
        path.Line(73.685340f, 261.984800f);
        path.Line(75.703848f, 247.092620f);
        path.Cubic(76.593036f, 242.893280f, 
                   82.705257f, 242.765770f, 
                   83.849290f, 247.382590f);
        path.Line(87.102441f, 267.435300f);
        path.Cubic(87.156551f, 267.773900f, 
                   84.375885f, 275.708370f, 
                   84.375885f, 275.708370f);
        path.Cubic(84.231122f, 276.076760f, 
                   84.091654f, 276.502890f, 
                   84.247678f, 276.698030f);
        path.Cubic(84.409218f, 276.900060f, 
                   84.344378f, 276.906420f, 
                   84.609746f, 276.902210f);
        path.Cubic(84.748298f, 276.901210f, 
                   84.910732f, 276.816210f, 
                   85.033436f, 276.751870f);
        path.Line(92.887171f, 272.072990f);
        path.Cubic(94.469675f, 271.130210f, 
                   94.318964f, 268.989470f, 
                   94.148181f, 268.564950f);
        path.Cubic(94.062751f, 267.764020f, 
                   94.049541f, 266.942590f, 
                   93.929110f, 265.529150f);
        path.Line(93.978210f, 218.640430f);
        path.Close();
    }

    private void SetPathData_path9777(IRenderPath path)
    { // Label: LowMax
        path.Move(118.037130f, 225.801810f);
        path.Cubic(118.808880f, 226.007420f, 
                   119.110890f, 226.081770f, 
                   119.438070f, 226.167810f);
        path.Cubic(122.680140f, 226.894260f, 
                   123.116730f, 223.168840f, 
                   120.647910f, 222.214140f);
        path.Cubic(120.103480f, 221.989790f, 
                   119.715930f, 221.815940f, 
                   119.201310f, 221.611000f);
        path.Cubic(118.924420f, 221.468130f, 
                   118.015900f, 221.124160f, 
                   117.129860f, 220.737870f);
        path.Cubic(117.658590f, 220.190790f, 
                   118.490880f, 219.164710f, 
                   118.904500f, 218.434340f);
        path.Cubic(119.405340f, 217.549940f, 
                   118.471180f, 217.066250f, 
                   117.455950f, 217.640260f);
        path.Cubic(116.433000f, 218.218630f, 
                   115.521720f, 219.348830f, 
                   114.857120f, 219.754300f);
        path.Cubic(104.868050f, 215.520950f, 
                   88.293322f, 208.403300f, 
                   88.293322f, 208.403300f);
        path.Cubic(84.995330f, 206.873980f, 
                   84.674462f, 204.102650f, 
                   84.760224f, 201.295970f);
        path.Cubic(84.805984f, 199.933130f, 
                   85.896069f, 198.059560f, 
                   87.102405f, 197.223730f);
        path.Cubic(91.425910f, 194.527170f, 
                   95.404705f, 189.516840f, 
                   93.648552f, 182.012110f);
        path.Cubic(92.700236f, 177.959590f, 
                   88.966393f, 172.408380f, 
                   80.703406f, 171.967620f);
        path.Cubic(75.550696f, 171.692770f, 
                   68.957819f, 175.734640f, 
                   67.758481f, 182.012110f);
        path.Cubic(66.215791f, 190.086730f, 
                   70.546706f, 195.252610f, 
                   74.504959f, 197.323840f);
        path.Cubic(74.504959f, 197.323840f, 
                   77.244754f, 199.072880f, 
                   76.760928f, 202.599750f);
        path.Cubic(76.655908f, 204.748700f, 
                   75.917862f, 207.794730f, 
                   71.454796f, 208.577770f);
        path.Cubic(71.454796f, 208.577770f, 
                   60.011377f, 210.659730f, 
                   51.224793f, 212.432450f);
        path.Cubic(50.434175f, 211.641420f, 
                   49.933777f, 211.218430f, 
                   49.391081f, 210.813440f);
        path.Cubic(48.778333f, 210.356190f, 
                   47.223881f, 210.133340f, 
                   47.455909f, 210.829740f);
        path.Cubic(47.792036f, 211.838600f, 
                   48.278751f, 212.248280f, 
                   48.733597f, 212.917970f);
        path.Cubic(48.502580f, 212.968070f, 
                   46.199856f, 213.374060f, 
                   45.776629f, 213.456790f);
        path.Cubic(44.398805f, 213.726140f, 
                   43.204883f, 214.180910f, 
                   43.213112f, 215.586290f);
        path.Cubic(43.217712f, 216.377940f, 
                   43.723118f, 217.231230f, 
                   45.911724f, 217.136810f);
        path.Cubic(46.452989f, 217.113510f, 
                   47.209007f, 217.063210f, 
                   47.908460f, 217.022630f);
        path.Line(67.838714f, 216.058810f);
        path.Line(68.132914f, 263.436630f);
        path.Line(64.072773f, 269.624840f);
        path.Cubic(63.894200f, 269.976620f, 
                   63.698832f, 270.214280f, 
                   63.836365f, 270.528000f);
        path.Cubic(64.002068f, 270.890580f, 
                   64.438786f, 270.841010f, 
                   65.076976f, 270.588000f);
        path.Cubic(65.527291f, 270.357180f, 
                   65.520360f, 270.363220f, 
                   66.111147f, 270.051260f);
        path.Line(71.294178f, 267.210980f);
        path.Cubic(72.494968f, 266.616430f, 
                   73.069745f, 266.441970f, 
                   72.975565f, 264.814010f);
        path.Line(73.137026f, 262.193640f);
        path.Line(75.903790f, 247.135900f);
        path.Cubic(76.792141f, 243.649630f, 
                   82.750501f, 243.567300f, 
                   83.888135f, 247.312830f);
        path.Line(87.617685f, 267.736450f);
        path.Cubic(87.671615f, 268.075050f, 
                   84.893778f, 274.733010f, 
                   84.893778f, 274.733010f);
        path.Cubic(84.637848f, 275.386480f, 
                   84.159970f, 275.972910f, 
                   84.435807f, 276.319050f);
        path.Cubic(84.721398f, 276.677430f, 
                   85.004192f, 276.687480f, 
                   85.473343f, 276.680020f);
        path.Cubic(85.718292f, 276.677020f, 
                   86.675921f, 275.992190f, 
                   86.892852f, 275.878020f);
        path.Line(92.604905f, 272.204000f);
        path.Cubic(94.162411f, 271.202210f, 
                   93.626540f, 269.216260f, 
                   93.456325f, 268.791740f);
        path.Cubic(93.371175f, 267.990800f, 
                   93.508455f, 266.907080f, 
                   93.388425f, 265.493630f);
        path.Line(93.346565f, 218.133770f);
        path.Close();
    }

    private void SetPathData_path9775(IRenderPath path)
    { // Label: LowMin
        path.Move(118.473030f, 224.586310f);
        path.Cubic(119.750430f, 224.932690f, 
                   119.751650f, 224.928470f, 
                   120.111870f, 224.993620f);
        path.Cubic(121.263480f, 225.088520f, 
                   121.135230f, 223.851530f, 
                   120.602610f, 223.590500f);
        path.Cubic(119.389680f, 223.007240f, 
                   119.339810f, 222.991790f, 
                   118.537900f, 222.639860f);
        path.Cubic(117.890070f, 222.369100f, 
                   117.266570f, 222.076630f, 
                   115.601690f, 221.373130f);
        path.Cubic(116.130350f, 220.826050f, 
                   116.841280f, 220.078780f, 
                   117.356790f, 219.436440f);
        path.Cubic(118.021790f, 218.607820f, 
                   117.620770f, 218.529530f, 
                   116.684720f, 219.122510f);
        path.Cubic(115.758570f, 219.709220f, 
                   115.049230f, 220.447010f, 
                   114.384700f, 220.852480f);
        path.Cubic(104.396790f, 216.619140f, 
                   87.933489f, 209.606080f, 
                   87.933489f, 209.606080f);
        path.Cubic(84.998035f, 208.189850f, 
                   83.635160f, 206.016460f, 
                   83.559032f, 202.781650f);
        path.Cubic(83.525082f, 200.305130f, 
                   84.276301f, 197.586390f, 
                   86.805204f, 195.939670f);
        path.Cubic(89.764196f, 193.955300f, 
                   94.090007f, 190.312020f, 
                   92.492741f, 182.260080f);
        path.Cubic(92.412011f, 181.853120f, 
                   90.019749f, 173.452640f, 
                   80.703107f, 173.215130f);
        path.Cubic(75.124069f, 173.072900f, 
                   70.284624f, 176.991940f, 
                   69.003604f, 182.011410f);
        path.Cubic(67.345469f, 188.508550f, 
                   70.517399f, 193.551080f, 
                   74.830795f, 196.145040f);
        path.Cubic(74.830795f, 196.145040f, 
                   78.490482f, 197.292740f, 
                   77.934034f, 203.319210f);
        path.Cubic(77.813069f, 205.794680f, 
                   75.964157f, 209.225180f, 
                   71.670218f, 209.785650f);
        path.Cubic(71.670218f, 209.785650f, 
                   61.172709f, 211.808380f, 
                   51.672216f, 213.609420f);
        path.Cubic(50.881689f, 212.818390f, 
                   49.941713f, 211.906770f, 
                   49.399080f, 211.501790f);
        path.Cubic(48.786403f, 211.044540f, 
                   48.217327f, 211.181770f, 
                   48.575367f, 211.822150f);
        path.Cubic(49.099792f, 212.760140f, 
                   49.731042f, 213.227120f, 
                   50.185835f, 213.896810f);
        path.Cubic(49.954845f, 213.946910f, 
                   46.415859f, 214.609380f, 
                   45.992681f, 214.692110f);
        path.Cubic(44.615016f, 214.961450f, 
                   44.491174f, 215.182960f, 
                   44.540284f, 215.444580f);
        path.Cubic(44.626374f, 215.903220f, 
                   45.354306f, 215.937160f, 
                   45.801064f, 215.921110f);
        path.Cubic(46.321014f, 215.902410f, 
                   46.364188f, 215.902110f, 
                   47.063560f, 215.861410f);
        path.Line(69.103240f, 214.766150f);
        path.Line(69.357053f, 263.706530f);
        path.Line(65.541774f, 269.065570f);
        path.Cubic(65.393453f, 269.277740f, 
                   65.252396f, 269.408530f, 
                   65.286380f, 269.436490f);
        path.Cubic(65.315360f, 269.493190f, 
                   65.637342f, 269.291910f, 
                   65.725361f, 269.237330f);
        path.Cubic(66.236699f, 268.941860f, 
                   66.482826f, 268.765790f, 
                   67.051467f, 268.413260f);
        path.Line(71.081779f, 265.924160f);
        path.Cubic(71.755474f, 265.438550f, 
                   71.688776f, 265.045360f, 
                   71.773267f, 264.348260f);
        path.Line(71.909586f, 261.954950f);
        path.Line(74.867991f, 246.159000f);
        path.Cubic(76.283730f, 242.469910f, 
                   83.622784f, 242.355470f, 
                   85.051885f, 246.801300f);
        path.Line(88.860504f, 267.735790f);
        path.Cubic(88.914424f, 268.074400f, 
                   86.258024f, 274.178690f, 
                   86.258024f, 274.178690f);
        path.Cubic(86.113759f, 274.547080f, 
                   85.840070f, 275.073070f, 
                   85.811553f, 275.215130f);
        path.Cubic(85.790973f, 275.317630f, 
                   85.821583f, 275.340780f, 
                   85.915763f, 275.294830f);
        path.Cubic(86.065995f, 275.196630f, 
                   86.482170f, 274.911700f, 
                   86.605025f, 274.817550f);
        path.Line(92.007141f, 271.111300f);
        path.Cubic(92.579263f, 270.718780f, 
                   92.375532f, 269.256110f, 
                   92.260615f, 268.809720f);
        path.Cubic(92.256015f, 268.457610f, 
                   92.150410f, 267.605860f, 
                   92.120077f, 266.164340f);
        path.Line(92.115377f, 216.452590f);
        path.Close();
    }

    private void SetPathData_use4896(IRenderPath path)
    { // Label: line
        path.Move(80.650391f, 168.353520f);
        path.Cubic(72.865371f, 168.353520f, 
                   66.068964f, 173.630970f, 
                   64.144531f, 181.173830f);
        path.Cubic(62.220054f, 188.716860f, 
                   65.677472f, 196.570110f, 
                   72.490234f, 200.335940f);
        path.Cubic(72.465054f, 200.322040f, 
                   72.511554f, 200.355040f, 
                   72.552734f, 200.427740f);
        path.Cubic(72.593914f, 200.500440f, 
                   72.643804f, 200.616150f, 
                   72.691406f, 200.783210f);
        path.Cubic(72.786616f, 201.117330f, 
                   72.870450f, 201.658040f, 
                   72.855469f, 202.488290f);
        path.Cubic(72.847169f, 202.949970f, 
                   72.775579f, 203.393770f, 
                   72.611328f, 203.753920f);
        path.Cubic(72.447484f, 204.113170f, 
                   72.197658f, 204.387510f, 
                   71.816406f, 204.542980f);
        path.Cubic(71.790966f, 204.547980f, 
                   58.859487f, 207.075210f, 
                   50.052734f, 208.845710f);
        path.Cubic(49.268007f, 208.071000f, 
                   48.398170f, 207.353200f, 
                   47.382812f, 206.980480f);
        path.Cubic(47.010447f, 206.843800f, 
                   46.517324f, 206.726630f, 
                   46.039062f, 206.707040f);
        path.Cubic(45.560801f, 206.687440f, 
                   45.088055f, 206.760240f, 
                   44.777344f, 207.050790f);
        path.Cubic(44.456826f, 207.350520f, 
                   44.378308f, 207.734040f, 
                   44.455078f, 208.101570f);
        path.Cubic(44.531848f, 208.469110f, 
                   44.746436f, 208.831810f, 
                   45.001953f, 209.171880f);
        path.Cubic(45.257470f, 209.511960f, 
                   45.555290f, 209.828980f, 
                   45.804687f, 210.091810f);
        path.Cubic(45.988110f, 210.285110f, 
                   46.082181f, 210.400800f, 
                   46.171875f, 210.511730f);
        path.Cubic(45.926957f, 210.559830f, 
                   45.250373f, 210.688220f, 
                   44.408203f, 210.849620f);
        path.Cubic(43.933944f, 210.940520f, 
                   43.454482f, 211.034000f, 
                   43.066406f, 211.111340f);
        path.Cubic(42.678331f, 211.188640f, 
                   42.388010f, 211.247110f, 
                   42.269531f, 211.279310f);
        path.Cubic(40.091008f, 211.871260f, 
                   39.084707f, 214.107270f, 
                   39.265625f, 216.082040f);
        path.Cubic(39.425228f, 217.824150f, 
                   40.588272f, 219.697070f, 
                   42.583984f, 220.474620f);
        path.Cubic(42.584612f, 220.474880f, 
                   42.585284f, 220.474360f, 
                   42.585984f, 220.474620f);
        path.Cubic(43.383819f, 220.806940f, 
                   44.231109f, 220.883930f, 
                   45.013719f, 220.833990f);
        path.Line(63.851609f, 220.167980f);
        path.Line(63.968797f, 262.923840f);
        path.Line(60.093797f, 269.587900f);
        path.Line(60.109427f, 269.568400f);
        path.Cubic(59.344309f, 270.437850f, 
                   59.152883f, 271.672320f, 
                   59.619193f, 272.732460f);
        path.Line(59.619193f, 272.734460f);
        path.Cubic(60.178002f, 273.953120f, 
                   61.407692f, 274.725950f, 
                   62.748099f, 274.699310f);
        path.Cubic(63.438821f, 274.691310f, 
                   64.117292f, 274.517110f, 
                   64.728568f, 274.195400f);
        path.Line(72.798880f, 270.396570f);
        path.Cubic(74.829993f, 269.873210f, 
                   76.920895f, 267.952740f, 
                   76.921927f, 265.183680f);
        path.Line(76.921927f, 265.181680f);
        path.Line(76.951227f, 263.298870f);
        path.Line(78.902399f, 248.226600f);
        path.Line(78.902399f, 248.224600f);
        path.Cubic(78.958859f, 247.684000f, 
                   79.330978f, 247.425770f, 
                   79.707086f, 247.417960f);
        path.Cubic(80.083194f, 247.409960f, 
                   80.462757f, 247.648050f, 
                   80.544977f, 248.228510f);
        path.Line(80.544977f, 248.230510f);
        path.Line(83.556696f, 267.423870f);
        path.Cubic(83.553096f, 267.401170f, 
                   83.555907f, 267.417870f, 
                   83.552796f, 267.437570f);
        path.Cubic(83.549696f, 267.457770f, 
                   83.543996f, 267.487970f, 
                   83.535216f, 267.525470f);
        path.Cubic(83.517706f, 267.600470f, 
                   83.490226f, 267.704420f, 
                   83.453186f, 267.832110f);
        path.Cubic(83.379116f, 268.087500f, 
                   83.269859f, 268.438050f, 
                   83.136780f, 268.847740f);
        path.Cubic(82.870622f, 269.667110f, 
                   82.508672f, 270.729640f, 
                   82.146545f, 271.781330f);
        path.Cubic(81.422701f, 273.883520f, 
                   80.694244f, 275.941120f, 
                   80.693420f, 275.943440f);
        path.Cubic(80.482542f, 276.509600f, 
                   80.225230f, 277.137890f, 
                   80.115295f, 277.755940f);
        path.Cubic(80.005361f, 278.373990f, 
                   80.046415f, 278.995240f, 
                   80.453186f, 279.503990f);
        path.Cubic(81.245541f, 280.494990f, 
                   82.070503f, 281.067880f, 
                   83.390686f, 281.046950f);
        path.Cubic(84.082795f, 281.038950f, 
                   84.728696f, 280.849880f, 
                   85.335998f, 280.531330f);
        path.Line(85.339898f, 280.529330f);
        path.Line(93.847710f, 275.554720f);
        path.Cubic(95.791746f, 274.418270f, 
                   97.367037f, 272.907380f, 
                   97.720757f, 270.431670f);
        path.Line(97.722757f, 270.416070f);
        path.Line(97.720757f, 270.400470f);
        path.Cubic(97.635767f, 269.603660f, 
                   97.401801f, 267.201990f, 
                   97.281304f, 265.789140f);
        path.Line(97.281304f, 265.779140f);
        path.Line(97.326224f, 223.492030f);
        path.Line(118.939500f, 230.368980f);
        path.Line(118.945500f, 230.368980f);
        path.Cubic(121.587130f, 230.908530f, 
                   124.394330f, 229.239940f, 
                   125.334170f, 227.120930f);
        path.Line(125.336170f, 227.116930f);
        path.Line(125.338170f, 227.112930f);
        path.Cubic(125.828070f, 225.768030f, 
                   125.913680f, 224.439970f, 
                   125.377270f, 223.193010f);
        path.Cubic(124.636030f, 221.498020f, 
                   122.968510f, 220.119480f, 
                   121.582350f, 219.388320f);
        path.Line(121.582350f, 219.386320f);
        path.Cubic(121.325880f, 219.254420f, 
                   120.718590f, 218.982990f, 
                   119.971020f, 218.655850f);
        path.Cubic(120.260340f, 218.387930f, 
                   120.792190f, 217.982690f, 
                   121.312820f, 217.450770f);
        path.Cubic(121.888940f, 216.862160f, 
                   122.403010f, 216.161610f, 
                   122.305010f, 215.427330f);
        path.Cubic(122.257210f, 215.069540f, 
                   122.069040f, 214.809080f, 
                   121.808910f, 214.653900f);
        path.Cubic(121.548790f, 214.498720f, 
                   121.226020f, 214.438840f, 
                   120.885090f, 214.431240f);
        path.Cubic(120.203220f, 214.416040f, 
                   119.439300f, 214.610650f, 
                   118.937820f, 214.792570f);
        path.Cubic(117.864400f, 215.181960f, 
                   117.311080f, 215.575000f, 
                   116.672200f, 215.966400f);
        path.Cubic(106.646300f, 211.732280f, 
                   89.378382f, 204.603480f, 
                   89.353838f, 204.593350f);
        path.Cubic(89.203425f, 204.483550f, 
                   89.006758f, 204.366660f, 
                   88.830400f, 204.108970f);
        path.Cubic(88.651313f, 203.847300f, 
                   88.495202f, 203.442330f, 
                   88.486650f, 202.755460f);
        path.Cubic(88.481450f, 202.335180f, 
                   88.449550f, 201.843900f, 
                   88.482750f, 201.396080f);
        path.Cubic(88.515940f, 200.948270f, 
                   88.617277f, 200.551210f, 
                   88.844078f, 200.310150f);
        path.Cubic(95.652833f, 196.572450f, 
                   99.077479f, 188.702440f, 
                   97.156578f, 181.173430f);
        path.Cubic(95.232146f, 173.630570f, 
                   88.435738f, 168.353120f, 
                   80.650719f, 168.353120f);
        path.Close();
        path.Move(80.650391f, 168.619140f);
        path.Cubic(88.315852f, 168.619140f, 
                   95.003576f, 173.813280f, 
                   96.898437f, 181.240230f);
        path.Cubic(98.793314f, 188.667250f, 
                   95.412459f, 196.433480f, 
                   88.683594f, 200.105470f);
        path.Line(88.664064f, 200.115470f);
        path.Line(88.650394f, 200.131070f);
        path.Cubic(88.354229f, 200.445860f, 
                   88.253893f, 200.903080f, 
                   88.218753f, 201.377160f);
        path.Cubic(88.183613f, 201.851240f, 
                   88.215653f, 202.348940f, 
                   88.220753f, 202.758020f);
        path.Cubic(88.229753f, 203.484070f, 
                   88.399934f, 203.951020f, 
                   88.611378f, 204.259980f);
        path.Cubic(88.822822f, 204.568930f, 
                   89.075863f, 204.719550f, 
                   89.205128f, 204.814660f);
        path.Line(89.218798f, 204.824660f);
        path.Line(89.232468f, 204.830660f);
        path.Cubic(89.232468f, 204.830660f, 
                   106.603780f, 212.002110f, 
                   116.625050f, 216.234950f);
        path.Line(116.687550f, 216.262250f);
        path.Line(116.744150f, 216.227050f);
        path.Cubic(117.415870f, 215.818600f, 
                   117.951470f, 215.434460f, 
                   119.029310f, 215.043460f);
        path.Cubic(119.506090f, 214.870500f, 
                   120.253140f, 214.683810f, 
                   120.878920f, 214.697760f);
        path.Cubic(121.191800f, 214.704760f, 
                   121.470460f, 214.761160f, 
                   121.671890f, 214.881350f);
        path.Cubic(121.873310f, 215.001510f, 
                   122.004520f, 215.175220f, 
                   122.042980f, 215.463380f);
        path.Cubic(122.121280f, 216.049940f, 
                   121.679240f, 216.697880f, 
                   121.123060f, 217.266110f);
        path.Cubic(120.566880f, 217.834350f, 
                   119.923650f, 218.306160f, 
                   119.636730f, 218.602050f);
        path.Line(119.503920f, 218.738770f);
        path.Line(119.679700f, 218.814970f);
        path.Cubic(120.567710f, 219.200830f, 
                   121.191320f, 219.484910f, 
                   121.460950f, 219.623570f);
        path.Cubic(122.801880f, 220.331410f, 
                   124.429620f, 221.691340f, 
                   125.132820f, 223.299350f);
        path.Cubic(125.637170f, 224.471700f, 
                   125.562820f, 225.715850f, 
                   125.091820f, 227.014190f);
        path.Cubic(124.211330f, 228.999370f, 
                   121.498550f, 230.621040f, 
                   119.000020f, 230.111850f);
        path.Line(118.998020f, 230.111850f);
        path.Line(97.062466f, 223.131380f);
        path.Line(97.017546f, 265.795440f);
        path.Line(97.017546f, 265.801440f);
        path.Cubic(97.137414f, 267.208330f, 
                   97.370081f, 269.583690f, 
                   97.456999f, 270.401050f);
        path.Cubic(97.114732f, 272.779320f, 
                   95.621252f, 274.211220f, 
                   93.712859f, 275.326830f);
        path.Line(85.212859f, 280.297530f);
        path.Cubic(85.212281f, 280.297840f, 
                   85.211459f, 280.297230f, 
                   85.210859f, 280.297530f);
        path.Line(85.208859f, 280.299530f);
        path.Cubic(84.631956f, 280.601500f, 
                   84.031429f, 280.777160f, 
                   83.386594f, 280.783900f);
        path.Cubic(82.141897f, 280.803600f, 
                   81.429018f, 280.302320f, 
                   80.660031f, 279.340540f);
        path.Cubic(80.312791f, 278.906250f, 
                   80.272096f, 278.381260f, 
                   80.374875f, 277.803430f);
        path.Cubic(80.477654f, 277.225610f, 
                   80.728332f, 276.607580f, 
                   80.941281f, 276.035860f);
        path.Line(80.941281f, 276.033860f);
        path.Cubic(80.941281f, 276.033860f, 
                   81.673539f, 273.972730f, 
                   82.398312f, 271.867850f);
        path.Cubic(82.760699f, 270.815410f, 
                   83.121465f, 269.752560f, 
                   83.388547f, 268.930350f);
        path.Cubic(83.522088f, 268.519240f, 
                   83.631369f, 268.167350f, 
                   83.706906f, 267.906910f);
        path.Cubic(83.744676f, 267.776690f, 
                   83.773456f, 267.669620f, 
                   83.792846f, 267.586600f);
        path.Cubic(83.802546f, 267.545100f, 
                   83.809556f, 267.510100f, 
                   83.814326f, 267.479180f);
        path.Cubic(83.819126f, 267.448280f, 
                   83.825236f, 267.427280f, 
                   83.818226f, 267.383480f);
        path.Line(80.806508f, 248.190120f);
        path.Cubic(80.707818f, 247.503080f, 
                   80.200479f, 247.144590f, 
                   79.701039f, 247.154970f);
        path.Cubic(79.200850f, 247.165370f, 
                   78.709016f, 247.541860f, 
                   78.640492f, 248.197940f);
        path.Line(76.687367f, 263.279970f);
        path.Line(76.658067f, 265.180360f);
        path.Line(76.658067f, 265.182360f);
        path.Cubic(76.658067f, 267.829940f, 
                   74.638064f, 269.663000f, 
                   72.708848f, 270.149160f);
        path.Line(72.697128f, 270.153160f);
        path.Line(64.607284f, 273.961760f);
        path.Line(64.605284f, 273.963760f);
        path.Cubic(64.031043f, 274.265970f, 
                   63.392812f, 274.426710f, 
                   62.743956f, 274.434460f);
        path.Cubic(61.508677f, 274.459060f, 
                   60.376635f, 273.750560f, 
                   59.861143f, 272.627820f);
        path.Line(59.861143f, 272.625820f);
        path.Cubic(59.437073f, 271.659780f, 
                   59.611344f, 270.535130f, 
                   60.308409f, 269.743010f);
        path.Line(60.316209f, 269.733010f);
        path.Line(64.232225f, 262.994730f);
        path.Line(64.117187f, 219.896480f);
        path.Line(45.000000f, 220.570310f);
        path.Line(44.998000f, 220.570310f);
        path.Cubic(44.244016f, 220.618410f, 
                   43.435541f, 220.543310f, 
                   42.685500f, 220.230470f);
        path.Line(42.683500f, 220.230470f);
        path.Cubic(40.787184f, 219.493580f, 
                   39.679813f, 217.702550f, 
                   39.529203f, 216.058590f);
        path.Cubic(39.358036f, 214.190260f, 
                   40.304492f, 212.088180f, 
                   42.339750f, 211.535160f);
        path.Cubic(42.430010f, 211.510660f, 
                   42.730218f, 211.446260f, 
                   43.117093f, 211.369140f);
        path.Cubic(43.503969f, 211.292040f, 
                   43.982984f, 211.200210f, 
                   44.456937f, 211.109370f);
        path.Cubic(45.404844f, 210.927710f, 
                   46.314666f, 210.757580f, 
                   46.449125f, 210.728520f);
        path.Line(46.622953f, 210.691420f);
        path.Line(46.538973f, 210.535170f);
        path.Cubic(46.447733f, 210.366930f, 
                   46.246471f, 210.170110f, 
                   45.997958f, 209.908210f);
        path.Cubic(45.749445f, 209.646320f, 
                   45.458366f, 209.335950f, 
                   45.214755f, 209.011730f);
        path.Cubic(44.971144f, 208.687500f, 
                   44.775993f, 208.349410f, 
                   44.712802f, 208.046880f);
        path.Cubic(44.649612f, 207.744360f, 
                   44.699822f, 207.486420f, 
                   44.958895f, 207.244150f);
        path.Cubic(45.184499f, 207.033170f, 
                   45.587180f, 206.952610f, 
                   46.029208f, 206.970710f);
        path.Cubic(46.471235f, 206.988810f, 
                   46.944026f, 207.101190f, 
                   47.290927f, 207.228530f);
        path.Cubic(48.274687f, 207.589650f, 
                   49.144653f, 208.295400f, 
                   49.931552f, 209.080090f);
        path.Line(49.982332f, 209.130890f);
        path.Line(50.050692f, 209.115290f);
        path.Cubic(58.865909f, 207.342730f, 
                   71.888583f, 204.798890f, 
                   71.888583f, 204.798890f);
        path.Line(71.900303f, 204.794890f);
        path.Line(71.913973f, 204.790890f);
        path.Cubic(72.362731f, 204.608910f, 
                   72.665659f, 204.270580f, 
                   72.851473f, 203.863150f);
        path.Cubic(73.037288f, 203.455720f, 
                   73.112237f, 202.979850f, 
                   73.121005f, 202.494010f);
        path.Cubic(73.136345f, 201.644080f, 
                   73.051825f, 201.076100f, 
                   72.947177f, 200.708850f);
        path.Cubic(72.894857f, 200.525230f, 
                   72.837282f, 200.392320f, 
                   72.783114f, 200.296740f);
        path.Cubic(72.728944f, 200.201140f, 
                   72.691644f, 200.146570f, 
                   72.617098f, 200.105340f);
        path.Cubic(65.907442f, 196.396510f, 
                   62.507407f, 188.667000f, 
                   64.402255f, 181.240100f);
        path.Cubic(66.297116f, 173.813150f, 
                   72.984840f, 168.619010f, 
                   80.650302f, 168.619010f);
        path.Close();
    }

    private void SetPathData_path24403(IRenderPath path)
    { // Label: dashedLine
        path.Move(81.169922f, 168.363280f);
        path.Cubic(80.103981f, 168.329380f, 
                   79.035714f, 168.396280f, 
                   77.982422f, 168.564450f);
        path.Line(78.023442f, 168.826170f);
        path.Cubic(79.059995f, 168.660670f, 
                   80.112866f, 168.593600f, 
                   81.162114f, 168.626950f);
        path.Close();
        path.Move(84.339844f, 168.757810f);
        path.Line(84.283204f, 169.015620f);
        path.Cubic(85.308361f, 169.241270f, 
                   86.313817f, 169.565920f, 
                   87.277345f, 169.982420f);
        path.Line(87.380860f, 169.740230f);
        path.Cubic(86.401783f, 169.317010f, 
                   85.381538f, 168.987100f, 
                   84.339844f, 168.757810f);
        path.Close();
        path.Move(74.886719f, 169.357420f);
        path.Cubic(73.882378f, 169.716830f, 
                   72.912028f, 170.173720f, 
                   71.994141f, 170.716800f);
        path.Line(72.128906f, 170.943360f);
        path.Cubic(73.032415f, 170.408790f, 
                   73.988257f, 169.961090f, 
                   74.976562f, 169.607420f);
        path.Close();
        path.Move(90.185547f, 171.271480f);
        path.Line(90.037109f, 171.492190f);
        path.Cubic(90.907887f, 172.078540f, 
                   91.721233f, 172.748820f, 
                   92.466797f, 173.488280f);
        path.Line(92.654297f, 173.300780f);
        path.Cubic(91.897140f, 172.549820f, 
                   91.070469f, 171.867360f, 
                   90.185547f, 171.271480f);
        path.Close();
        path.Move(69.406250f, 172.589840f);
        path.Cubic(68.604984f, 173.293610f, 
                   67.869976f, 174.072070f, 
                   67.214844f, 174.914060f);
        path.Line(67.423828f, 175.076170f);
        path.Cubic(68.068502f, 174.247620f, 
                   68.793077f, 173.482010f, 
                   69.582031f, 172.789060f);
        path.Close();
        path.Move(94.701172f, 175.753910f);
        path.Line(94.482422f, 175.904300f);
        path.Cubic(95.077005f, 176.769510f, 
                   95.590078f, 177.690170f, 
                   96.009766f, 178.652340f);
        path.Line(96.251953f, 178.546870f);
        path.Cubic(95.825466f, 177.569110f, 
                   95.305247f, 176.632930f, 
                   94.701172f, 175.753910f);
        path.Close();
        path.Move(65.496094f, 177.607420f);
        path.Cubic(65.007860f, 178.555810f, 
                   64.610112f, 179.550600f, 
                   64.310547f, 180.574220f);
        path.Line(64.564453f, 180.648420f);
        path.Cubic(64.859306f, 179.640900f, 
                   65.250007f, 178.661790f, 
                   65.730469f, 177.728500f);
        path.Close();
        path.Move(97.253906f, 181.580080f);
        path.Line(96.996094f, 181.640580f);
        path.Cubic(97.231826f, 182.663690f, 
                   97.369113f, 183.708580f, 
                   97.408203f, 184.757770f);
        path.Line(97.673828f, 184.747770f);
        path.Cubic(97.634118f, 183.681860f, 
                   97.493402f, 182.619230f, 
                   97.253906f, 181.579800f);
        path.Close();
        path.Move(63.699219f, 183.710940f);
        path.Cubic(63.593586f, 184.772330f, 
                   63.589306f, 185.844010f, 
                   63.687499f, 186.906250f);
        path.Line(63.951171f, 186.880850f);
        path.Cubic(63.854551f, 185.835580f, 
                   63.858921f, 184.780980f, 
                   63.962891f, 183.736320f);
        path.Close();
        path.Move(97.230469f, 187.898440f);
        path.Cubic(97.073534f, 188.936480f, 
                   96.818995f, 189.959650f, 
                   96.468750f, 190.949220f);
        path.Line(96.716797f, 191.039020f);
        path.Cubic(97.072702f, 190.033460f, 
                   97.332758f, 188.992000f, 
                   97.492187f, 187.937460f);
        path.Close();
        path.Move(64.531250f, 189.972660f);
        path.Line(64.275391f, 190.046860f);
        path.Cubic(64.568052f, 191.072610f, 
                   64.960560f, 192.069540f, 
                   65.441406f, 193.021470f);
        path.Line(65.677734f, 192.902330f);
        path.Cubic(65.204392f, 191.965250f, 
                   64.819260f, 190.982090f, 
                   64.531250f, 189.972650f);
        path.Close();
        path.Move(95.150391f, 193.806640f);
        path.Cubic(94.624831f, 194.715370f, 
                   94.011860f, 195.573770f, 
                   93.324219f, 196.367190f);
        path.Line(93.523437f, 196.541020f);
        path.Cubic(94.221933f, 195.735070f, 
                   94.844832f, 194.862900f, 
                   95.378906f, 193.939450f);
        path.Close();
        path.Move(67.347656f, 195.568360f);
        path.Line(67.136719f, 195.728520f);
        path.Cubic(67.784684f, 196.575680f, 
                   68.512287f, 197.362400f, 
                   69.306641f, 198.074220f);
        path.Line(69.482422f, 197.876950f);
        path.Cubic(68.700438f, 197.176220f, 
                   67.985591f, 196.402410f, 
                   67.347656f, 195.568360f);
        path.Close();
        path.Move(91.050781f, 198.541020f);
        path.Cubic(90.401735f, 199.053840f, 
                   89.713739f, 199.518110f, 
                   88.996094f, 199.929690f);
        path.Line(89.037114f, 199.914090f);
        path.Cubic(88.742641f, 199.971990f, 
                   88.562907f, 200.200140f, 
                   88.451177f, 200.414090f);
        path.Line(88.685552f, 200.537140f);
        path.Cubic(88.780132f, 200.356020f, 
                   88.903022f, 200.210180f, 
                   89.087896f, 200.173860f);
        path.Line(89.109376f, 200.169860f);
        path.Line(89.126956f, 200.158160f);
        path.Cubic(89.855845f, 199.740140f, 
                   90.555454f, 199.269010f, 
                   91.214847f, 198.748010f);
        path.Close();
        path.Move(72.007812f, 199.751950f);
        path.Line(71.873047f, 199.978520f);
        path.Line(72.173828f, 200.156250f);
        path.Line(72.478516f, 200.330080f);
        path.Cubic(72.510916f, 200.354180f, 
                   72.543946f, 200.412580f, 
                   72.583984f, 200.488280f);
        path.Cubic(72.718747f, 200.781330f, 
                   72.776491f, 201.114100f, 
                   72.816406f, 201.451170f);
        path.Line(72.814406f, 201.449170f);
        path.Cubic(72.854626f, 201.829460f, 
                   72.865326f, 202.214050f, 
                   72.851516f, 202.597610f);
        path.Line(73.115188f, 202.607610f);
        path.Cubic(73.129398f, 202.213070f, 
                   73.119788f, 201.816280f, 
                   73.078078f, 201.422060f);
        path.Line(73.078078f, 201.420060f);
        path.Cubic(73.037188f, 201.074760f, 
                   72.978658f, 200.713030f, 
                   72.824172f, 200.377090f);
        path.Line(72.822172f, 200.375090f);
        path.Line(72.822172f, 200.371090f);
        path.Cubic(72.784822f, 200.300190f, 
                   72.740732f, 200.191800f, 
                   72.630765f, 200.113280f);
        path.Line(72.624865f, 200.109280f);
        path.Line(72.306506f, 199.927640f);
        path.Close();
        path.Move(88.589844f, 203.574220f);
        path.Line(88.333984f, 203.644520f);
        path.Cubic(88.392074f, 203.859300f, 
                   88.480751f, 204.069180f, 
                   88.609375f, 204.257800f);
        path.Cubic(88.768425f, 204.497780f, 
                   88.990783f, 204.670900f, 
                   89.208984f, 204.818350f);
        path.Line(89.220704f, 204.824350f);
        path.Line(90.865235f, 205.505990f);
        path.Line(90.966798f, 205.261850f);
        path.Line(89.353517f, 204.593880f);
        path.Cubic(89.147806f, 204.454510f, 
                   88.957046f, 204.303030f, 
                   88.830079f, 204.111460f);
        path.Line(88.830079f, 204.109460f);
        path.Cubic(88.720574f, 203.949410f, 
                   88.641752f, 203.766240f, 
                   88.589845f, 203.574310f);
        path.Close();
        path.Move(71.169922f, 204.669920f);
        path.Line(69.666016f, 204.964840f);
        path.Line(68.052734f, 205.281250f);
        path.Line(68.103514f, 205.541020f);
        path.Line(69.716795f, 205.222660f);
        path.Line(71.220701f, 204.929690f);
        path.Close();
        path.Move(64.937500f, 205.892580f);
        path.Line(64.224609f, 206.033200f);
        path.Line(61.822266f, 206.505860f);
        path.Line(61.873046f, 206.765620f);
        path.Line(64.275390f, 206.292970f);
        path.Line(64.988280f, 206.152340f);
        path.Close();
        path.Move(93.900391f, 206.474610f);
        path.Line(93.800781f, 206.718750f);
        path.Line(95.257812f, 207.322270f);
        path.Line(96.732422f, 207.933590f);
        path.Line(96.833984f, 207.689450f);
        path.Line(95.359375f, 207.078120f);
        path.Close();
        path.Move(45.513672f, 206.732420f);
        path.Cubic(45.233074f, 206.774020f, 
                   44.935493f, 206.878120f, 
                   44.722656f, 207.109370f);
        path.Cubic(44.520130f, 207.316260f, 
                   44.408471f, 207.603280f, 
                   44.427734f, 207.894530f);
        path.Cubic(44.433334f, 208.001700f, 
                   44.450854f, 208.107340f, 
                   44.480464f, 208.208980f);
        path.Line(44.736323f, 208.134780f);
        path.Cubic(44.712063f, 208.051480f, 
                   44.695843f, 207.966150f, 
                   44.691403f, 207.880870f);
        path.Line(44.691403f, 207.878870f);
        path.Cubic(44.676903f, 207.665950f, 
                   44.761583f, 207.446130f, 
                   44.912106f, 207.292930f);
        path.Line(44.912106f, 207.290930f);
        path.Line(44.914106f, 207.288930f);
        path.Cubic(45.068628f, 207.119420f, 
                   45.307151f, 207.030430f, 
                   45.552778f, 206.994010f);
        path.Cubic(45.966650f, 206.935010f, 
                   46.396594f, 206.987010f, 
                   46.814497f, 207.085810f);
        path.Line(46.875047f, 206.829950f);
        path.Cubic(46.438501f, 206.726780f, 
                   45.976570f, 206.666570f, 
                   45.515672f, 206.732250f);
        path.Close();
        path.Move(58.707031f, 207.121090f);
        path.Line(57.130859f, 207.433590f);
        path.Line(55.593750f, 207.740230f);
        path.Line(55.644530f, 208.000000f);
        path.Line(57.181640f, 207.693360f);
        path.Line(58.759765f, 207.380860f);
        path.Close();
        path.Move(52.478516f, 208.359370f);
        path.Line(50.068359f, 208.843750f);
        path.Cubic(49.930807f, 208.707800f, 
                   49.790433f, 208.573780f, 
                   49.646484f, 208.443360f);
        path.Line(49.468750f, 208.638670f);
        path.Cubic(49.626255f, 208.781370f, 
                   49.780333f, 208.929340f, 
                   49.931641f, 209.080080f);
        path.Line(49.982421f, 209.130880f);
        path.Line(52.531249f, 208.619160f);
        path.Close();
        path.Move(99.767578f, 208.906250f);
        path.Line(99.666016f, 209.150390f);
        path.Line(102.597660f, 210.369140f);
        path.Line(102.699220f, 210.125000f);
        path.Close();
        path.Move(46.277344f, 210.492190f);
        path.Cubic(45.239215f, 210.693770f, 
                   44.199381f, 210.885290f, 
                   43.160156f, 211.091800f);
        path.Line(43.210936f, 211.351560f);
        path.Cubic(44.247810f, 211.145530f, 
                   45.288397f, 210.953840f, 
                   46.328124f, 210.751950f);
        path.Close();
        path.Move(105.630860f, 211.343750f);
        path.Line(105.529300f, 211.589840f);
        path.Line(108.117190f, 212.667970f);
        path.Line(108.458980f, 212.810550f);
        path.Line(108.560550f, 212.566410f);
        path.Line(108.218750f, 212.423830f);
        path.Close();
        path.Move(40.320312f, 212.533200f);
        path.Cubic(39.617714f, 213.374710f, 
                   39.262287f, 214.470450f, 
                   39.246094f, 215.552730f);
        path.Line(39.511719f, 215.556730f);
        path.Cubic(39.527089f, 214.529610f, 
                   39.865322f, 213.491440f, 
                   40.523437f, 212.703210f);
        path.Close();
        path.Move(111.490230f, 213.791020f);
        path.Line(111.388670f, 214.035160f);
        path.Line(112.570310f, 214.529300f);
        path.Line(114.316410f, 215.261720f);
        path.Line(114.419920f, 215.019530f);
        path.Line(112.671880f, 214.285160f);
        path.Close();
        path.Move(120.164060f, 214.482420f);
        path.Cubic(119.309660f, 214.609340f, 
                   118.499580f, 214.924960f, 
                   117.746090f, 215.320310f);
        path.Line(117.744090f, 215.320310f);
        path.Cubic(117.550830f, 215.423470f, 
                   117.363320f, 215.533770f, 
                   117.177680f, 215.648440f);
        path.Line(117.316360f, 215.873050f);
        path.Cubic(117.497990f, 215.760850f, 
                   117.681490f, 215.654820f, 
                   117.869090f, 215.554690f);
        path.Cubic(118.604590f, 215.168770f, 
                   119.387660f, 214.865270f, 
                   120.203080f, 214.744140f);
        path.Close();
        path.Move(121.941410f, 216.128910f);
        path.Cubic(121.876310f, 216.292010f, 
                   121.785500f, 216.447300f, 
                   121.683590f, 216.597660f);
        path.Cubic(121.201100f, 217.293980f, 
                   120.514010f, 217.829880f, 
                   119.855470f, 218.398440f);
        path.Line(120.027340f, 218.599610f);
        path.Cubic(120.678740f, 218.037220f, 
                   121.389310f, 217.488440f, 
                   121.902340f, 216.748050f);
        path.Cubic(122.011830f, 216.586660f, 
                   122.112730f, 216.413910f, 
                   122.187500f, 216.226560f);
        path.Close();
        path.Move(40.429687f, 218.455080f);
        path.Line(40.212891f, 218.607420f);
        path.Cubic(40.797701f, 219.444770f, 
                   41.630759f, 220.108010f, 
                   42.585937f, 220.476560f);
        path.Line(42.734375f, 220.535160f);
        path.Line(42.765625f, 220.545160f);
        path.Line(42.853515f, 220.297110f);
        path.Line(42.828125f, 220.287110f);
        path.Line(42.683594f, 220.230510f);
        path.Line(42.681594f, 220.228510f);
        path.Cubic(41.777247f, 219.879890f, 
                   40.984760f, 219.249900f, 
                   40.429640f, 218.455070f);
        path.Close();
        path.Move(122.388670f, 219.869140f);
        path.Line(122.242190f, 220.089840f);
        path.Cubic(123.108830f, 220.671590f, 
                   123.895600f, 221.381230f, 
                   124.507810f, 222.222660f);
        path.Line(124.722660f, 222.066410f);
        path.Cubic(124.088560f, 221.194910f, 
                   123.276360f, 220.465020f, 
                   122.388670f, 219.869140f);
        path.Close();
        path.Move(61.810547f, 219.976560f);
        path.Line(58.638672f, 220.087890f);
        path.Line(58.646472f, 220.353520f);
        path.Line(61.820300f, 220.242190f);
        path.Close();
        path.Move(55.464844f, 220.201170f);
        path.Line(52.291016f, 220.312500f);
        path.Line(52.300816f, 220.576170f);
        path.Line(55.474644f, 220.464840f);
        path.Close();
        path.Move(49.119141f, 220.423830f);
        path.Line(45.945312f, 220.537110f);
        path.Line(45.955112f, 220.800780f);
        path.Line(49.128940f, 220.689450f);
        path.Close();
        path.Move(63.855469f, 221.037110f);
        path.Line(63.863269f, 224.212890f);
        path.Line(64.128894f, 224.212890f);
        path.Line(64.119094f, 221.037110f);
        path.Close();
        path.Move(98.498047f, 223.587890f);
        path.Line(98.417967f, 223.839840f);
        path.Line(101.443360f, 224.802730f);
        path.Line(101.523460f, 224.548830f);
        path.Close();
        path.Move(125.478520f, 225.093750f);
        path.Cubic(125.465920f, 225.746230f, 
                   125.316180f, 226.394990f, 
                   125.091800f, 227.013670f);
        path.Cubic(124.939910f, 227.354470f, 
                   124.742940f, 227.676190f, 
                   124.509770f, 227.968750f);
        path.Line(124.716800f, 228.132810f);
        path.Cubic(124.963290f, 227.823550f, 
                   125.172470f, 227.483500f, 
                   125.333980f, 227.121090f);
        path.Line(125.335980f, 227.117090f);
        path.Line(125.337980f, 227.113090f);
        path.Cubic(125.571720f, 226.471130f, 
                   125.728920f, 225.792150f, 
                   125.742280f, 225.099420f);
        path.Close();
        path.Move(97.060547f, 225.158150f);
        path.Line(97.056647f, 228.333930f);
        path.Line(97.320318f, 228.333930f);
        path.Line(97.324218f, 225.158150f);
        path.Close();
        path.Move(104.548830f, 225.511670f);
        path.Line(104.468730f, 225.763620f);
        path.Line(107.494120f, 226.726510f);
        path.Line(107.574220f, 226.474560f);
        path.Close();
        path.Move(64.136719f, 227.386670f);
        path.Line(63.871094f, 227.388670f);
        path.Line(63.880894f, 230.562500f);
        path.Line(64.144566f, 230.562500f);
        path.Close();
        path.Move(110.601560f, 227.437470f);
        path.Line(110.519560f, 227.689420f);
        path.Line(113.546910f, 228.652310f);
        path.Line(113.627010f, 228.400360f);
        path.Close();
        path.Move(116.652340f, 229.363250f);
        path.Line(116.572240f, 229.615200f);
        path.Line(118.931610f, 230.367160f);
        path.Line(118.974610f, 230.234340f);
        path.Line(118.945310f, 230.369110f);
        path.Cubic(119.761180f, 230.536540f, 
                   120.611560f, 230.491490f, 
                   121.410160f, 230.279310f);
        path.Cubic(121.656200f, 230.213710f, 
                   121.897900f, 230.133440f, 
                   122.134770f, 230.037120f);
        path.Line(122.035170f, 229.791030f);
        path.Cubic(121.809560f, 229.882730f, 
                   121.578120f, 229.960480f, 
                   121.341810f, 230.023450f);
        path.Cubic(120.578940f, 230.226170f, 
                   119.770900f, 230.269540f, 
                   119.000010f, 230.111350f);
        path.Close();
        path.Move(97.052734f, 231.507780f);
        path.Line(97.048834f, 234.683560f);
        path.Line(97.314459f, 234.683560f);
        path.Line(97.318359f, 231.509740f);
        path.Close();
        path.Move(64.154297f, 233.736300f);
        path.Line(63.888672f, 233.738300f);
        path.Line(63.898472f, 236.912130f);
        path.Line(64.162144f, 236.912130f);
        path.Close();
        path.Move(97.046875f, 237.859340f);
        path.Line(97.042975f, 241.033170f);
        path.Line(97.308600f, 241.033170f);
        path.Line(97.310600f, 237.859340f);
        path.Close();
        path.Move(63.906250f, 240.087860f);
        path.Line(63.914050f, 243.263640f);
        path.Line(64.179675f, 243.261640f);
        path.Line(64.171875f, 240.087810f);
        path.Close();
        path.Move(97.039062f, 244.208950f);
        path.Line(97.037062f, 247.382780f);
        path.Line(97.300734f, 247.384780f);
        path.Line(97.304634f, 244.208990f);
        path.Close();
        path.Move(63.923828f, 246.437470f);
        path.Line(63.931628f, 249.613250f);
        path.Line(64.197253f, 249.611250f);
        path.Line(64.187453f, 246.437420f);
        path.Close();
        path.Move(78.757812f, 247.769500f);
        path.Cubic(78.691262f, 247.906140f, 
                   78.655952f, 248.052680f, 
                   78.640625f, 248.197240f);
        path.Line(78.283203f, 250.947240f);
        path.Line(78.546875f, 250.980440f);
        path.Line(78.902344f, 248.226530f);
        path.Line(78.902344f, 248.224530f);
        path.Cubic(78.915064f, 248.104560f, 
                   78.945844f, 247.987860f, 
                   78.996094f, 247.884690f);
        path.Close();
        path.Move(80.910156f, 248.839810f);
        path.Line(80.648437f, 248.880810f);
        path.Line(81.140625f, 252.017530f);
        path.Line(81.402344f, 251.976530f);
        path.Close();
        path.Move(97.033203f, 250.558560f);
        path.Line(97.029303f, 253.734340f);
        path.Line(97.294928f, 253.734340f);
        path.Line(97.296928f, 250.558560f);
        path.Close();
        path.Move(63.941406f, 252.787080f);
        path.Line(63.949206f, 255.962860f);
        path.Line(64.214831f, 255.962860f);
        path.Line(64.205031f, 252.787080f);
        path.Close();
        path.Move(77.876953f, 254.095670f);
        path.Line(77.468750f, 257.244110f);
        path.Line(77.730469f, 257.277310f);
        path.Line(78.138672f, 254.128880f);
        path.Close();
        path.Move(81.892578f, 255.113250f);
        path.Line(81.632812f, 255.154250f);
        path.Line(82.125000f, 258.290970f);
        path.Line(82.384766f, 258.249970f);
        path.Close();
        path.Move(97.027344f, 256.908170f);
        path.Line(97.023444f, 260.083950f);
        path.Line(97.287116f, 260.083950f);
        path.Line(97.291016f, 256.908170f);
        path.Close();
        path.Move(63.957031f, 259.136690f);
        path.Line(63.966831f, 262.312470f);
        path.Line(64.230503f, 262.312470f);
        path.Line(64.222703f, 259.136690f);
        path.Close();
        path.Move(77.060547f, 260.392550f);
        path.Line(76.687500f, 263.279270f);
        path.Line(76.683600f, 263.558560f);
        path.Line(76.947272f, 263.562560f);
        path.Line(76.951172f, 263.298890f);
        path.Line(77.324219f, 260.425840f);
        path.Close();
        path.Move(82.876953f, 261.386690f);
        path.Line(82.617187f, 261.427690f);
        path.Line(83.107422f, 264.564410f);
        path.Line(83.369141f, 264.523410f);
        path.Close();
        path.Move(97.019531f, 263.257780f);
        path.Line(97.017531f, 265.794890f);
        path.Line(97.074171f, 266.443330f);
        path.Line(97.337843f, 266.419930f);
        path.Line(97.281203f, 265.783210f);
        path.Line(97.285103f, 263.259780f);
        path.Close();
        path.Move(62.714844f, 265.078090f);
        path.Line(61.121094f, 267.824190f);
        path.Line(61.349609f, 267.957000f);
        path.Line(62.945312f, 265.210910f);
        path.Close();
        path.Move(76.431641f, 266.671840f);
        path.Cubic(76.124091f, 267.655870f, 
                   75.490716f, 268.530670f, 
                   74.677734f, 269.165990f);
        path.Line(74.839844f, 269.374970f);
        path.Cubic(75.693052f, 268.708220f, 
                   76.358555f, 267.791900f, 
                   76.683594f, 266.751920f);
        path.Close();
        path.Move(83.505859f, 267.642550f);
        path.Cubic(83.333897f, 268.266650f, 
                   83.122778f, 268.882320f, 
                   82.919922f, 269.503880f);
        path.Line(82.677734f, 270.226530f);
        path.Line(82.531250f, 270.656220f);
        path.Line(82.783203f, 270.740220f);
        path.Line(82.927734f, 270.310540f);
        path.Line(83.171875f, 269.585930f);
        path.Cubic(83.373923f, 268.966850f, 
                   83.586881f, 268.347410f, 
                   83.761719f, 267.712880f);
        path.Close();
        path.Move(97.638672f, 269.578090f);
        path.Line(97.375000f, 269.605490f);
        path.Line(97.457030f, 270.402360f);
        path.Cubic(97.349518f, 271.158630f, 
                   97.105660f, 271.898280f, 
                   96.718749f, 272.554710f);
        path.Line(96.947265f, 272.689470f);
        path.Cubic(97.354885f, 271.997910f, 
                   97.609317f, 271.222410f, 
                   97.720702f, 270.431660f);
        path.Line(97.722702f, 270.416060f);
        path.Close();
        path.Move(71.867187f, 270.542940f);
        path.Line(68.994141f, 271.894500f);
        path.Line(69.107422f, 272.134740f);
        path.Line(71.980469f, 270.781220f);
        path.Close();
        path.Move(59.521484f, 270.587840f);
        path.Cubic(59.309375f, 271.214520f, 
                   59.315664f, 271.910480f, 
                   59.539064f, 272.533150f);
        path.Cubic(59.690916f, 272.955180f, 
                   59.940815f, 273.337050f, 
                   60.246096f, 273.658150f);
        path.Line(60.437502f, 273.474560f);
        path.Cubic(60.154819f, 273.177230f, 
                   59.926791f, 272.826080f, 
                   59.789064f, 272.443310f);
        path.Cubic(59.586323f, 271.878210f, 
                   59.579020f, 271.242420f, 
                   59.771484f, 270.673780f);
        path.Close();
        path.Move(66.123047f, 273.248000f);
        path.Line(64.607422f, 273.960890f);
        path.Line(64.605422f, 273.962890f);
        path.Cubic(64.175853f, 274.189140f, 
                   63.704050f, 274.338190f, 
                   63.222609f, 274.400390f);
        path.Line(63.257769f, 274.662110f);
        path.Cubic(63.770778f, 274.595810f, 
                   64.270885f, 274.436320f, 
                   64.728473f, 274.195310f);
        path.Line(66.234332f, 273.486330f);
        path.Close();
        path.Move(81.496094f, 273.656200f);
        path.Line(81.148437f, 274.652290f);
        path.Line(80.691406f, 275.945260f);
        path.Cubic(80.608026f, 276.176320f, 
                   80.515374f, 276.406950f, 
                   80.431641f, 276.646430f);
        path.Line(80.679687f, 276.734330f);
        path.Cubic(80.760487f, 276.503240f, 
                   80.855605f, 276.272880f, 
                   80.941406f, 276.035120f);
        path.Line(80.941406f, 276.033120f);
        path.Line(81.398437f, 274.740150f);
        path.Line(81.746094f, 273.744060f);
        path.Close();
        path.Move(94.570312f, 274.781200f);
        path.Cubic(94.293221f, 274.975000f, 
                   94.005836f, 275.154820f, 
                   93.712891f, 275.326120f);
        path.Line(91.859375f, 276.410110f);
        path.Line(91.992187f, 276.638620f);
        path.Line(93.847656f, 275.554640f);
        path.Cubic(94.145696f, 275.380360f, 
                   94.438660f, 275.196620f, 
                   94.722656f, 274.998000f);
        path.Close();
        path.Move(89.119141f, 278.013620f);
        path.Line(86.376953f, 279.615180f);
        path.Line(86.511719f, 279.843700f);
        path.Line(89.251953f, 278.242140f);
        path.Close();
        path.Move(80.859375f, 279.576120f);
        path.Line(80.658203f, 279.748000f);
        path.Cubic(81.064234f, 280.223270f, 
                   81.566144f, 280.654190f, 
                   82.181641f, 280.867140f);
        path.Cubic(82.621892f, 281.022890f, 
                   83.090393f, 281.063420f, 
                   83.544922f, 281.040970f);
        path.Line(83.531252f, 280.777290f);
        path.Cubic(83.101633f, 280.798490f, 
                   82.669802f, 280.759990f, 
                   82.271486f, 280.619090f);
        path.Line(82.269486f, 280.617090f);
        path.Cubic(81.715812f, 280.425920f, 
                   81.246702f, 280.029510f, 
                   80.859330f, 279.576070f);
        path.Close();
    }

    private void SetPathData_path819(IRenderPath path)
    { // Label: outside
        path.Move(103.382120f, 200.765810f);
        path.Cubic(102.847430f, 200.465690f, 
                   102.496520f, 200.388490f, 
                   101.980470f, 200.136720f);
        path.Cubic(102.289500f, 199.661970f, 
                   102.751320f, 198.832360f, 
                   103.015810f, 198.318790f);
        path.Cubic(106.005790f, 193.457440f, 
                   107.910840f, 186.565790f, 
                   106.047690f, 179.069110f);
        path.Cubic(104.071220f, 171.116480f, 
                   95.321738f, 159.351160f, 
                   80.650292f, 159.332130f);
        path.Cubic(69.192320f, 159.317230f, 
                   58.315427f, 168.170370f, 
                   56.058756f, 176.844570f);
        path.Cubic(53.792212f, 185.556710f, 
                   54.516063f, 190.762480f, 
                   57.713643f, 197.379750f);
        path.Cubic(57.785083f, 197.467050f, 
                   57.670253f, 197.392450f, 
                   57.898903f, 197.900670f);
        path.Cubic(57.552200f, 198.174900f, 
                   57.694763f, 198.227420f, 
                   57.369604f, 198.297030f);
        path.Line(39.515239f, 202.722210f);
        path.Cubic(33.217887f, 204.283000f, 
                   28.879471f, 211.648110f, 
                   30.511448f, 218.208920f);
        path.Cubic(32.182080f, 224.146310f, 
                   37.171268f, 230.216950f, 
                   45.326172f, 229.798830f);
        path.Line(54.906250f, 229.460940f);
        path.Line(54.992190f, 260.517580f);
        path.Line(50.995415f, 267.576450f);
        path.Cubic(50.264101f, 268.407490f, 
                   50.057772f, 275.516850f, 
                   52.216183f, 277.841250f);
        path.Cubic(54.170597f, 282.012540f, 
                   59.094912f, 283.476400f, 
                   60.383012f, 283.450800f);
        path.Cubic(62.957097f, 283.676640f, 
                   64.897209f, 282.969980f, 
                   66.504323f, 282.352590f);
        path.Line(76.416853f, 274.252720f);
        path.Cubic(77.394099f, 272.407640f, 
                   79.686247f, 269.186330f, 
                   80.321012f, 266.538510f);
        path.Line(80.078356f, 259.290180f);
        path.Line(79.890605f, 254.851900f);
        path.Cubic(79.883405f, 254.666630f, 
                   79.867445f, 254.644510f, 
                   79.890605f, 254.851900f);
        path.Line(80.321012f, 266.538510f);
        path.Cubic(80.271922f, 266.897630f, 
                   76.635226f, 273.550490f, 
                   76.416853f, 274.252720f);
        path.Cubic(75.993025f, 275.390610f, 
                   72.584694f, 279.465200f, 
                   72.157530f, 280.738970f);
        path.Cubic(72.539494f, 285.927700f, 
                   79.231440f, 289.903520f, 
                   83.054193f, 289.935000f);
        path.Cubic(86.864183f, 289.961200f, 
                   89.425979f, 288.274760f, 
                   90.018967f, 287.963720f);
        path.Line(100.595960f, 281.721920f);
        path.Cubic(104.226550f, 279.579400f, 
                   106.998290f, 273.277230f, 
                   106.810800f, 269.812520f);
        path.Cubic(106.725400f, 269.011590f, 
                   106.374340f, 266.784530f, 
                   106.253910f, 265.371090f);
        path.Line(106.285110f, 235.755860f);
        path.Line(116.610140f, 239.028280f);
        path.Cubic(125.594960f, 241.591200f, 
                   131.229170f, 235.709900f, 
                   133.576020f, 230.517130f);
        path.Cubic(135.227400f, 227.523270f, 
                   134.731810f, 221.195810f, 
                   133.475800f, 219.182840f);
        path.Cubic(131.643100f, 216.046160f, 
                   129.247370f, 212.784630f, 
                   125.725060f, 211.147920f);
        path.Close();
    }

    private void SetPathData_path821(IRenderPath path)
    { // Label: standard
        path.Move(89.283646f, 204.708040f);
        path.Cubic(89.003188f, 204.501670f, 
                   88.371149f, 204.170040f, 
                   88.353557f, 202.757120f);
        path.Cubic(88.343227f, 201.927760f, 
                   88.223576f, 200.776570f, 
                   88.746542f, 200.220710f);
        path.Cubic(95.527907f, 196.520070f, 
                   98.937008f, 188.692240f, 
                   97.027344f, 181.207270f);
        path.Cubic(95.117695f, 173.722360f, 
                   88.375540f, 168.486110f, 
                   80.650292f, 168.486110f);
        path.Cubic(72.925044f, 168.486110f, 
                   66.182889f, 173.722360f, 
                   64.273240f, 181.207270f);
        path.Cubic(62.363576f, 188.692240f, 
                   65.792826f, 196.483380f, 
                   72.554042f, 200.220710f);
        path.Cubic(72.652772f, 200.275310f, 
                   73.018276f, 200.810650f, 
                   72.987958f, 202.490830f);
        path.Cubic(72.970858f, 203.438350f, 
                   72.695083f, 204.331120f, 
                   71.863479f, 204.668350f);
        path.Line(42.454757f, 210.488710f);
        path.Cubic(40.047186f, 211.178130f, 
                   38.812222f, 213.722720f, 
                   39.348047f, 216.020650f);
        path.Cubic(40.073787f, 219.133040f, 
                   41.969048f, 220.875990f, 
                   45.005625f, 220.702100f);
        path.Line(63.984345f, 220.032520f);
        path.Line(64.100604f, 262.958710f);
        path.Line(60.208583f, 269.655320f);
        path.Cubic(59.477269f, 270.486360f, 
                   59.294563f, 271.666210f, 
                   59.740270f, 272.679510f);
        path.Cubic(60.277273f, 273.850610f, 
                   61.457837f, 274.591580f, 
                   62.745937f, 274.565980f);
        path.Cubic(63.415727f, 274.557980f, 
                   64.074053f, 274.391110f, 
                   64.666812f, 274.079150f);
        path.Line(72.741895f, 270.277090f);
        path.Cubic(74.726270f, 269.777030f, 
                   76.790020f, 267.895840f, 
                   76.790020f, 265.181210f);
        path.Line(76.819130f, 263.289440f);
        path.Line(78.771755f, 248.210830f);
        path.Cubic(78.896742f, 247.014150f, 
                   80.496933f, 246.941320f, 
                   80.676755f, 248.210830f);
        path.Line(83.687713f, 267.403700f);
        path.Cubic(83.741823f, 267.742300f, 
                   80.816712f, 275.989520f, 
                   80.816712f, 275.989520f);
        path.Cubic(80.392884f, 277.127410f, 
                   79.802365f, 278.478700f, 
                   80.556377f, 279.421740f);
        path.Cubic(81.337049f, 280.398130f, 
                   82.105842f, 280.934980f, 
                   83.388283f, 280.914650f);
        path.Cubic(84.057856f, 280.907650f, 
                   84.681948f, 280.724400f, 
                   85.274936f, 280.413360f);
        path.Line(93.780588f, 275.441090f);
        path.Cubic(95.707720f, 274.314520f, 
                   97.242952f, 272.842920f, 
                   97.590004f, 270.413880f);
        path.Cubic(97.504574f, 269.612950f, 
                   97.270139f, 267.203190f, 
                   97.149713f, 265.789750f);
        path.Line(97.193843f, 223.310820f);
        path.Line(118.972550f, 230.240330f);
        path.Cubic(121.542900f, 230.765320f, 
                   123.783360f, 229.498430f, 
                   125.213360f, 227.068100f);
        path.Cubic(125.695440f, 225.744670f, 
                   126.177500f, 223.654040f, 
                   125.656480f, 222.442880f);
        path.Cubic(125.241180f, 221.121680f, 
                   124.383220f, 219.246530f, 
                   122.017010f, 218.394650f);
        path.Close();
    }

    private void SetPathData_path823(IRenderPath path)
    { // Label: minimum
        path.Move(89.023345f, 207.155690f);
        path.Cubic(87.794922f, 206.730470f, 
                   85.715050f, 205.410990f, 
                   85.801098f, 202.604330f);
        path.Cubic(85.771208f, 200.431540f, 
                   85.889478f, 198.848400f, 
                   87.990820f, 197.691500f);
        path.Cubic(92.307065f, 195.398080f, 
                   96.518976f, 190.161180f, 
                   94.405134f, 181.278150f);
        path.Cubic(93.441467f, 177.228520f, 
                   88.470030f, 170.958650f, 
                   80.744786f, 170.966570f);
        path.Cubic(75.144671f, 170.972570f, 
                   68.709926f, 174.794710f, 
                   66.833177f, 181.294850f);
        path.Cubic(64.732838f, 188.569400f, 
                   67.976363f, 194.676920f, 
                   73.621833f, 197.809610f);
        path.Cubic(73.621833f, 197.809610f, 
                   75.845536f, 199.727760f, 
                   75.374387f, 203.089860f);
        path.Cubic(75.269016f, 205.238800f, 
                   73.883812f, 206.737540f, 
                   71.096181f, 207.169260f);
        path.Line(43.906520f, 212.735660f);
        path.Cubic(42.222231f, 212.954690f, 
                   41.455863f, 214.767900f, 
                   41.858118f, 216.134890f);
        path.Cubic(42.434815f, 218.094680f, 
                   43.996268f, 218.331280f, 
                   45.450308f, 218.222000f);
        path.Line(66.588375f, 217.319460f);
        path.Line(66.613955f, 263.641830f);
        path.Line(62.515519f, 270.650510f);
        path.Cubic(62.336349f, 271.002290f, 
                   62.315217f, 271.355770f, 
                   62.453209f, 271.669490f);
        path.Cubic(62.619466f, 272.032060f, 
                   62.843231f, 271.977990f, 
                   63.242031f, 271.970060f);
        path.Cubic(63.449399f, 271.968060f, 
                   65.479652f, 270.918450f, 
                   66.072411f, 270.606490f);
        path.Line(71.974683f, 267.936680f);
        path.Cubic(73.179482f, 267.342130f, 
                   74.398636f, 266.404900f, 
                   74.304142f, 264.776950f);
        path.Line(74.386922f, 262.218680f);
        path.Line(76.365305f, 247.489510f);
        path.Cubic(77.256622f, 244.003260f, 
                   82.013326f, 243.802500f, 
                   83.154758f, 247.548010f);
        path.Line(86.213769f, 267.575680f);
        path.Cubic(86.267879f, 267.914280f, 
                   83.492879f, 275.989060f, 
                   83.492879f, 275.989060f);
        path.Cubic(83.236095f, 276.642530f, 
                   82.988703f, 277.398400f, 
                   83.265461f, 277.744540f);
        path.Cubic(83.552005f, 278.102920f, 
                   83.436990f, 278.114190f, 
                   83.907707f, 278.106730f);
        path.Cubic(84.153473f, 278.103730f, 
                   84.441603f, 277.954220f, 
                   84.659258f, 277.840050f);
        path.Line(93.144417f, 272.856480f);
        path.Cubic(95.692091f, 271.360160f, 
                   95.067318f, 269.083070f, 
                   94.896535f, 268.658550f);
        path.Cubic(94.811105f, 267.857620f, 
                   94.797895f, 267.036190f, 
                   94.677464f, 265.622750f);
        path.Line(94.586244f, 219.809790f);
        path.Line(118.144010f, 227.345480f);
        path.Cubic(120.155420f, 228.081400f, 
                   121.606610f, 227.691510f, 
                   122.199500f, 226.942100f);
        path.Cubic(123.534050f, 225.696750f, 
                   123.498510f, 223.713050f, 
                   123.024200f, 222.645300f);
        path.Cubic(122.567680f, 221.617580f, 
                   121.294390f, 220.587710f, 
                   120.393950f, 220.212930f);
        path.Close();
    }

    private void SetPathData_path825(IRenderPath path)
    { // Label: absminimum
        path.Move(88.692616f, 207.982510f);
        path.Cubic(87.292482f, 207.497860f, 
                   84.921883f, 205.993940f, 
                   85.019959f, 202.794960f);
        path.Cubic(84.985889f, 200.318450f, 
                   85.120693f, 198.514020f, 
                   87.515763f, 197.195410f);
        path.Cubic(91.395903f, 193.872700f, 
                   95.701603f, 190.232050f, 
                   93.776749f, 181.443510f);
        path.Cubic(92.886148f, 177.377190f, 
                   88.436957f, 171.851420f, 
                   80.711713f, 171.859540f);
        path.Cubic(75.251830f, 171.865540f, 
                   68.887643f, 175.723110f, 
                   67.527708f, 181.592510f);
        path.Cubic(65.886400f, 188.676300f, 
                   68.724877f, 193.746100f, 
                   74.303245f, 197.313520f);
        path.Cubic(74.303245f, 197.313520f, 
                   76.864825f, 199.523120f, 
                   76.322088f, 203.396060f);
        path.Cubic(76.200706f, 205.871520f, 
                   74.605030f, 207.597980f, 
                   71.393837f, 208.095300f);
        path.Line(44.388439f, 213.439640f);
        path.Cubic(43.006015f, 213.708980f, 
                   42.798996f, 215.497530f, 
                   42.902278f, 216.222300f);
        path.Cubic(43.277524f, 217.244830f, 
                   44.498984f, 217.577260f, 
                   45.402535f, 217.559240f);
        path.Line(67.613635f, 216.492640f);
        path.Line(67.672285f, 263.178810f);
        path.Line(63.703985f, 269.878770f);
        path.Cubic(63.604205f, 270.074690f, 
                   63.592431f, 270.271550f, 
                   63.669285f, 270.446270f);
        path.Cubic(63.761875f, 270.648200f, 
                   63.886501f, 270.618080f, 
                   64.108605f, 270.613670f);
        path.Cubic(64.224094f, 270.612670f, 
                   65.199019f, 270.193480f, 
                   65.791778f, 269.881520f);
        path.Line(71.577120f, 267.188330f);
        path.Cubic(72.781919f, 266.593780f, 
                   73.556737f, 266.358130f, 
                   73.462243f, 264.730180f);
        path.Line(73.685340f, 261.984820f);
        path.Line(75.703848f, 247.092640f);
        path.Cubic(76.593036f, 242.893300f, 
                   82.705257f, 242.765790f, 
                   83.849290f, 247.382610f);
        path.Line(87.102441f, 267.435320f);
        path.Cubic(87.156551f, 267.773920f, 
                   84.375885f, 275.708390f, 
                   84.375885f, 275.708390f);
        path.Cubic(84.231122f, 276.076780f, 
                   84.091654f, 276.502910f, 
                   84.247678f, 276.698050f);
        path.Cubic(84.409218f, 276.900080f, 
                   84.344378f, 276.906440f, 
                   84.609746f, 276.902230f);
        path.Cubic(84.748298f, 276.901230f, 
                   84.910732f, 276.816230f, 
                   85.033436f, 276.751890f);
        path.Line(92.887171f, 272.073010f);
        path.Cubic(94.469675f, 271.130230f, 
                   94.318964f, 268.989490f, 
                   94.148181f, 268.564970f);
        path.Cubic(94.062751f, 267.764040f, 
                   94.049541f, 266.942610f, 
                   93.929110f, 265.529170f);
        path.Line(93.978210f, 218.640450f);
        path.Line(118.044790f, 226.518620f);
        path.Cubic(120.056200f, 227.254540f, 
                   120.478430f, 226.863640f, 
                   121.472230f, 226.247870f);
        path.Cubic(122.138600f, 225.904550f, 
                   122.772030f, 224.549440f, 
                   122.077100f, 223.239900f);
        path.Cubic(121.421230f, 222.003970f, 
                   120.368660f, 221.503950f, 
                   119.522750f, 221.018470f);
        path.Close();
    }

    private void SetPathData_use845_2(IRenderPath path)
    { // Label: LowMax
        path.Move(88.311893f, 208.270840f);
        path.Cubic(85.027323f, 206.604670f, 
                   84.831229f, 204.646050f, 
                   84.767000f, 201.163540f);
        path.Cubic(84.789620f, 199.993520f, 
                   86.015688f, 197.787460f, 
                   87.117000f, 197.091310f);
        path.Cubic(92.256159f, 193.867160f, 
                   95.233012f, 188.934100f, 
                   93.685000f, 181.879760f);
        path.Cubic(92.814125f, 177.911150f, 
                   88.833666f, 172.142500f, 
                   80.696639f, 171.835310f);
        path.Cubic(74.850708f, 171.614620f, 
                   68.981664f, 175.955750f, 
                   67.708500f, 181.879760f);
        path.Cubic(66.363299f, 188.138950f, 
                   68.832030f, 194.058730f, 
                   74.477500f, 197.191420f);
        path.Cubic(74.477500f, 197.191420f, 
                   77.142373f, 198.775760f, 
                   76.741000f, 202.467310f);
        path.Cubic(76.449036f, 204.521710f, 
                   76.103990f, 207.699390f, 
                   71.417154f, 208.445310f);
        path.Line(45.653265f, 213.324310f);
        path.Cubic(44.173747f, 213.597340f, 
                   43.106291f, 214.043220f, 
                   43.081190f, 215.453800f);
        path.Cubic(43.060060f, 216.641420f, 
                   44.334770f, 217.113590f, 
                   45.788811f, 217.004310f);
        path.Line(67.789000f, 215.926310f);
        path.Line(68.084183f, 263.303940f);
        path.Line(64.010488f, 269.492120f);
        path.Cubic(63.903165f, 269.655150f, 
                   63.642820f, 270.151880f, 
                   63.773290f, 270.395280f);
        path.Cubic(63.862600f, 270.561890f, 
                   64.302413f, 270.806510f, 
                   65.018043f, 270.455280f);
        path.Cubic(65.385592f, 270.268500f, 
                   66.121580f, 269.871900f, 
                   66.818708f, 269.477270f);
        path.Line(71.256000f, 267.078270f);
        path.Cubic(72.174759f, 266.459560f, 
                   72.864681f, 266.098430f, 
                   72.943000f, 264.681310f);
        path.Line(73.105000f, 262.060950f);
        path.Line(75.881000f, 247.003270f);
        path.Cubic(76.392722f, 243.878180f, 
                   82.923208f, 243.470070f, 
                   83.892000f, 247.180200f);
        path.Line(87.634000f, 267.603740f);
        path.Cubic(87.688110f, 267.942340f, 
                   84.901000f, 274.600270f, 
                   84.901000f, 274.600270f);
        path.Cubic(84.619824f, 275.280810f, 
                   84.491978f, 275.817980f, 
                   84.441500f, 276.186300f);
        path.Cubic(84.359180f, 276.786990f, 
                   84.830159f, 276.815120f, 
                   85.482500f, 276.547270f);
        path.Cubic(85.792250f, 276.423850f, 
                   86.401051f, 276.061780f, 
                   86.906747f, 275.745270f);
        path.Line(92.637869f, 272.071270f);
        path.Cubic(94.159854f, 271.095580f, 
                   93.562971f, 269.072180f, 
                   93.492132f, 268.659020f);
        path.Cubic(93.406702f, 267.858090f, 
                   93.441162f, 266.814870f, 
                   93.424002f, 265.360930f);
        path.Line(93.382002f, 218.001270f);
        path.Line(118.155000f, 225.669270f);
        path.Cubic(119.941320f, 226.130040f, 
                   119.124040f, 225.916170f, 
                   119.560610f, 226.035270f);
        path.Cubic(122.596110f, 226.772830f, 
                   123.430580f, 223.200630f, 
                   120.774490f, 222.081620f);
        path.Cubic(120.328880f, 221.893880f, 
                   120.335500f, 221.892570f, 
                   119.323060f, 221.478480f);
        path.Close();
    }

    private void SetPathData_use847_1(IRenderPath path)
    { // Label: LowMin
        path.Move(87.952000f, 209.474310f);
        path.Cubic(84.971425f, 208.192490f, 
                   83.608658f, 205.590710f, 
                   83.562431f, 202.649910f);
        path.Cubic(83.394945f, 198.023250f, 
                   86.353599f, 196.187640f, 
                   86.819818f, 195.807960f);
        path.Cubic(92.630996f, 192.267230f, 
                   93.578895f, 186.730580f, 
                   92.527003f, 182.128430f);
        path.Cubic(91.963462f, 179.662880f, 
                   88.421886f, 173.089800f, 
                   80.696640f, 173.083520f);
        path.Cubic(74.816137f, 173.078520f, 
                   70.272406f, 176.880870f, 
                   68.956719f, 181.879760f);
        path.Cubic(67.578562f, 187.115990f, 
                   69.480354f, 192.701770f, 
                   74.804041f, 196.013330f);
        path.Cubic(74.804041f, 196.013330f, 
                   78.621744f, 197.357960f, 
                   77.918000f, 203.187460f);
        path.Cubic(77.630266f, 205.570920f, 
                   76.224258f, 209.029470f, 
                   71.632545f, 209.653870f);
        path.Line(45.866300f, 214.560310f);
        path.Cubic(44.407052f, 214.828420f, 
                   44.404913f, 215.061290f, 
                   44.408886f, 215.312780f);
        path.Cubic(44.412286f, 215.462480f, 
                   44.566980f, 215.824420f, 
                   45.674021f, 215.789310f);
        path.Line(69.056699f, 214.634320f);
        path.Line(69.311389f, 263.574480f);
        path.Line(65.337796f, 269.133270f);
        path.Cubic(65.337796f, 269.133270f, 
                   65.208918f, 269.287730f, 
                   65.226653f, 269.304450f);
        path.Cubic(65.243543f, 269.319250f, 
                   65.322883f, 269.318450f, 
                   65.476555f, 269.217950f);
        path.Cubic(65.787566f, 269.021790f, 
                   66.118136f, 268.849100f, 
                   66.601328f, 268.527450f);
        path.Line(71.042073f, 265.792130f);
        path.Cubic(71.817205f, 265.287060f, 
                   71.667717f, 264.517820f, 
                   71.735950f, 264.216230f);
        path.Line(71.872740f, 261.822930f);
        path.Line(74.841365f, 246.027050f);
        path.Cubic(76.083950f, 242.514130f, 
                   83.509239f, 242.031420f, 
                   85.060441f, 246.669350f);
        path.Line(88.882218f, 267.603750f);
        path.Cubic(88.936328f, 267.942350f, 
                   85.955212f, 274.767660f, 
                   85.955212f, 274.767660f);
        path.Cubic(85.858652f, 274.997380f, 
                   85.898012f, 274.910950f, 
                   85.822734f, 275.083060f);
        path.Cubic(85.770064f, 275.203480f, 
                   85.816334f, 275.246490f, 
                   85.927304f, 275.162760f);
        path.Cubic(86.078852f, 275.048330f, 
                   86.076791f, 275.051260f, 
                   86.210321f, 274.960080f);
        path.Line(92.039726f, 270.979500f);
        path.Cubic(92.608428f, 270.591170f, 
                   92.408984f, 269.481480f, 
                   92.294075f, 268.677930f);
        path.Cubic(92.290975f, 267.884420f, 
                   92.168452f, 267.451470f, 
                   92.153052f, 266.032560f);
        path.Line(92.148352f, 216.321030f);
        path.Line(118.597050f, 224.454750f);
        path.Cubic(119.651060f, 224.737040f, 
                   120.012520f, 224.831110f, 
                   120.241550f, 224.862060f);
        path.Cubic(121.240570f, 224.989820f, 
                   121.381410f, 223.859970f, 
                   120.733990f, 223.458940f);
        path.Cubic(120.542250f, 223.340170f, 
                   120.054420f, 223.143500f, 
                   119.341590f, 222.794570f);
        path.Close();
    }

    private void SetPathData_path8628(IRenderPath path)
    { // Label: 
        path.Move(83.262940f, 193.212160f);
        path.Line(83.262940f, 193.212160f);
        path.Cubic(83.262940f, 193.212160f, 
                   82.085830f, 192.239020f, 
                   80.634628f, 192.239020f);
        path.Cubic(79.183425f, 192.239020f, 
                   78.008440f, 193.212160f, 
                   78.008440f, 193.212160f);
        path.Line(78.008440f, 193.212160f);
        path.Cubic(78.266531f, 193.413469f, 
                   78.544971f, 193.587227f, 
                   78.839216f, 193.730600f);
        path.Cubic(79.395271f, 194.017133f, 
                   80.009248f, 194.173351f, 
                   80.634628f, 194.187420f);
        path.Cubic(81.283783f, 194.172236f, 
                   81.920415f, 194.005619f, 
                   82.493781f, 193.700850f);
        path.Cubic(82.765411f, 193.563287f, 
                   83.023012f, 193.399619f, 
                   83.262940f, 193.212160f);
        path.Close();
    }

    private void SetPathData_path8630(IRenderPath path)
    { // Label: 
        path.Move(83.262940f, 193.212160f);
        path.Line(83.262940f, 193.212160f);
        path.Line(78.008440f, 193.212160f);
        path.Line(78.008440f, 193.212160f);
        path.Cubic(78.266531f, 193.413470f, 
                   78.544972f, 193.587230f, 
                   78.839216f, 193.730600f);
        path.Cubic(79.395272f, 194.017130f, 
                   80.009248f, 194.173350f, 
                   80.634628f, 194.187420f);
        path.Cubic(81.283782f, 194.172220f, 
                   81.920414f, 194.005620f, 
                   82.493781f, 193.700850f);
        path.Cubic(82.765412f, 193.563290f, 
                   83.023011f, 193.399620f, 
                   83.262940f, 193.212160f);
        path.Close();
    }

    private void SetPathData_path8634(IRenderPath path)
    { // Label: 
        path.Move(77.946250f, 183.972650f);
        path.Cubic(75.819433f, 185.812323f, 
                   72.664734f, 185.812323f, 
                   70.537917f, 183.972650f);
        path.Line(69.932021f, 184.419790f);
        path.Line(69.932021f, 184.443590f);
        path.Line(69.958481f, 184.467390f);
        path.Cubic(72.394220f, 186.625949f, 
                   76.058201f, 186.625949f, 
                   78.493940f, 184.467390f);
        path.Line(78.520400f, 184.443590f);
        path.Line(78.520400f, 184.409190f);
        path.Line(78.520400f, 184.409190f);
        path.Close();
    }

    private void SetPathData_path8638(IRenderPath path)
    { // Label: 
        path.Move(280.570000f, 133.630000f);
        path.Cubic(271.230203f, 133.696163f, 
                   263.706157f, 141.309506f, 
                   263.750188f, 150.649434f);
        path.Cubic(263.794219f, 159.989361f, 
                   271.389712f, 167.531427f, 
                   280.729717f, 167.509528f);
        path.Cubic(290.069722f, 167.487630f, 
                   297.629766f, 159.910031f, 
                   297.630000f, 150.570000f);
        path.Cubic(297.596921f, 141.181135f, 
                   289.958865f, 133.596804f, 
                   280.570000f, 133.630000f);
        path.Close();
    }

    private void SetPathData_path8640(IRenderPath path)
    { // Label: 
        path.Move(292.250000f, 150.570000f);
        path.Cubic(292.282407f, 155.264862f, 
                   289.479234f, 159.515487f, 
                   285.151014f, 161.334632f);
        path.Cubic(280.822795f, 163.153778f, 
                   275.824665f, 162.182031f, 
                   272.493340f, 158.873700f);
        path.Cubic(269.162015f, 155.565370f, 
                   268.155672f, 150.574091f, 
                   269.944796f, 146.233375f);
        path.Cubic(271.733919f, 141.892659f, 
                   275.965027f, 139.060112f, 
                   280.660000f, 139.060000f);
        path.Cubic(287.038905f, 139.037870f, 
                   292.227947f, 144.191095f, 
                   292.250000f, 150.570000f);
        path.Close();
    }

    private void SetPathData_path8642(IRenderPath path)
    { // Label: 
        path.Move(286.590000f, 150.570000f);
        path.Cubic(286.606203f, 152.972035f, 
                   285.171723f, 155.146574f, 
                   282.957166f, 156.077042f);
        path.Cubic(280.742609f, 157.007510f, 
                   278.185478f, 156.510085f, 
                   276.481206f, 154.817309f);
        path.Cubic(274.776934f, 153.124533f, 
                   274.262213f, 150.570827f, 
                   275.177672f, 148.350023f);
        path.Cubic(276.093130f, 146.129219f, 
                   278.257911f, 144.680055f, 
                   280.660000f, 144.680000f);
        path.Cubic(283.924011f, 144.668936f, 
                   286.578973f, 147.305989f, 
                   286.590000f, 150.570000f);
        path.Close();
    }

    private void SetPathData_path8644(IRenderPath path)
    { // Label: 
        path.Move(288.370000f, 145.460000f);
        path.Cubic(288.382156f, 146.975360f, 
                   287.478681f, 148.348280f, 
                   286.082146f, 148.936625f);
        path.Cubic(284.685610f, 149.524970f, 
                   283.072073f, 149.212439f, 
                   281.996212f, 148.145207f);
        path.Cubic(280.920350f, 147.077975f, 
                   280.594834f, 145.467008f, 
                   281.171913f, 144.065779f);
        path.Cubic(281.748992f, 142.664551f, 
                   283.114592f, 141.750049f, 
                   284.630000f, 141.750000f);
        path.Cubic(285.618335f, 141.744683f, 
                   286.568160f, 142.132889f, 
                   287.269837f, 142.828938f);
        path.Cubic(287.971514f, 143.524987f, 
                   288.367357f, 144.471654f, 
                   288.370000f, 145.460000f);
        path.Close();
    }

    private void SetPathData_path8650(IRenderPath path)
    { // Label: 
        path.Move(294.432770f, 150.552990f);
        path.Cubic(294.471275f, 156.131293f, 
                   291.140624f, 161.181767f, 
                   285.997955f, 163.343225f);
        path.Cubic(280.855286f, 165.504683f, 
                   274.916648f, 164.350082f, 
                   270.958461f, 160.419217f);
        path.Cubic(267.000273f, 156.488353f, 
                   265.804564f, 150.557855f, 
                   267.930348f, 145.400338f);
        path.Cubic(270.056132f, 140.242820f, 
                   275.083414f, 136.877265f, 
                   280.661850f, 136.877130f);
        path.Cubic(288.241088f, 136.850833f, 
                   294.406566f, 142.973752f, 
                   294.432770f, 150.552990f);
        path.Close();
    }

    private void SetPathData_path8652(IRenderPath path)
    { // Label: 
        path.Move(279.968750f, 136.468750f);
        path.Cubic(278.807410f, 136.523050f, 
                   277.650210f, 136.705700f, 
                   276.535160f, 137.037110f);
        path.Cubic(276.648940f, 137.514920f, 
                   276.707620f, 138.075990f, 
                   277.298650f, 137.707070f);
        path.Cubic(278.185710f, 137.484580f, 
                   279.096250f, 137.355820f, 
                   280.009770f, 137.316410f);
        path.Cubic(279.996070f, 137.033860f, 
                   279.982370f, 136.751300f, 
                   279.968770f, 136.468750f);
        path.Close();
        path.Move(283.441410f, 136.716800f);
        path.Cubic(283.323600f, 137.200110f, 
                   283.133090f, 137.719220f, 
                   283.824100f, 137.668940f);
        path.Cubic(284.710460f, 137.879200f, 
                   285.573720f, 138.185410f, 
                   286.396480f, 138.576170f);
        path.Cubic(286.672250f, 138.109510f, 
                   286.912680f, 137.647590f, 
                   286.191570f, 137.555440f);
        path.Cubic(285.307030f, 137.181820f, 
                   284.383190f, 136.903110f, 
                   283.441410f, 136.716800f);
        path.Close();
        path.Move(273.333980f, 138.439450f);
        path.Cubic(272.336920f, 139.040980f, 
                   271.416250f, 139.767560f, 
                   270.599610f, 140.597660f);
        path.Cubic(270.939330f, 140.984890f, 
                   271.270960f, 141.410590f, 
                   271.616870f, 140.790090f);
        path.Cubic(272.277620f, 140.174790f, 
                   273.002120f, 139.627170f, 
                   273.777340f, 139.164060f);
        path.Cubic(273.629550f, 138.922520f, 
                   273.481770f, 138.680990f, 
                   273.333980f, 138.439450f);
        path.Close();
        path.Move(289.703120f, 139.679690f);
        path.Cubic(289.319080f, 140.058970f, 
                   288.968440f, 140.426100f, 
                   289.617220f, 140.724610f);
        path.Cubic(290.278660f, 141.325620f, 
                   290.886210f, 141.987360f, 
                   291.414090f, 142.708980f);
        path.Cubic(291.823670f, 142.438730f, 
                   292.343900f, 142.175340f, 
                   291.758140f, 141.765600f);
        path.Cubic(291.147950f, 141.001900f, 
                   290.456820f, 140.302090f, 
                   289.703150f, 139.679690f);
        path.Close();
        path.Move(268.474610f, 143.361330f);
        path.Cubic(267.883100f, 144.363390f, 
                   267.409450f, 145.435650f, 
                   267.070310f, 146.548830f);
        path.Cubic(267.563630f, 146.745640f, 
                   268.049590f, 146.945600f, 
                   268.068360f, 146.224610f);
        path.Cubic(268.367950f, 145.380850f, 
                   268.748550f, 144.566300f, 
                   269.203120f, 143.794920f);
        path.Cubic(268.960280f, 143.650390f, 
                   268.717450f, 143.505860f, 
                   268.474610f, 143.361330f);
        path.Close();
        path.Move(293.806640f, 145.244140f);
        path.Cubic(293.367190f, 145.415160f, 
                   292.785860f, 145.515410f, 
                   293.212540f, 146.060050f);
        path.Cubic(293.526690f, 146.923570f, 
                   293.750980f, 147.820230f, 
                   293.876950f, 148.730470f);
        path.Cubic(294.373770f, 148.686870f, 
                   294.946930f, 148.691970f, 
                   294.626950f, 148.048830f);
        path.Cubic(294.449830f, 147.089090f, 
                   294.176950f, 146.147260f, 
                   293.806640f, 145.244140f);
        path.Close();
        path.Move(266.460940f, 149.980470f);
        path.Cubic(266.400040f, 151.144840f, 
                   266.476540f, 152.317460f, 
                   266.707030f, 153.460940f);
        path.Cubic(267.160090f, 153.370540f, 
                   267.776350f, 153.399240f, 
                   267.445310f, 152.775390f);
        path.Cubic(267.302460f, 151.867010f, 
                   267.258120f, 150.943420f, 
                   267.308590f, 150.025390f);
        path.Cubic(267.026040f, 150.010390f, 
                   266.743490f, 149.995490f, 
                   266.460940f, 149.980490f);
        path.Close();
        path.Move(294.009770f, 150.552730f);
        path.Cubic(294.012770f, 151.649370f, 
                   293.904420f, 152.748710f, 
                   293.650390f, 153.816410f);
        path.Cubic(294.149380f, 153.984570f, 
                   294.660960f, 154.147350f, 
                   294.598700f, 153.431330f);
        path.Cubic(294.779040f, 152.483910f, 
                   294.861400f, 151.518850f, 
                   294.857420f, 150.554690f);
        path.Cubic(294.574870f, 150.554040f, 
                   294.292320f, 150.553690f, 
                   294.009770f, 150.552690f);
        path.Close();
        path.Move(268.580080f, 156.396480f);
        path.Cubic(268.128610f, 156.586350f, 
                   267.570920f, 156.752230f, 
                   268.067760f, 157.259020f);
        path.Cubic(268.530340f, 158.125190f, 
                   269.087100f, 158.940190f, 
                   269.716800f, 159.693360f);
        path.Cubic(270.118460f, 159.391250f, 
                   270.589760f, 159.103560f, 
                   270.011300f, 158.706870f);
        path.Cubic(269.457750f, 157.987940f, 
                   268.974080f, 157.214050f, 
                   268.580080f, 156.396480f);
        path.Close();
        path.Move(292.509770f, 156.886720f);
        path.Cubic(292.003130f, 157.855990f, 
                   291.367360f, 158.757840f, 
                   290.634770f, 159.568360f);
        path.Cubic(290.963950f, 159.871480f, 
                   291.311450f, 160.410180f, 
                   291.588670f, 159.764380f);
        path.Cubic(292.232390f, 159.000330f, 
                   292.795350f, 158.167920f, 
                   293.259770f, 157.283200f);
        path.Cubic(293.009770f, 157.151040f, 
                   292.759770f, 157.018880f, 
                   292.509770f, 156.886720f);
        path.Close();
        path.Move(272.746090f, 161.406250f);
        path.Cubic(272.421550f, 161.791070f, 
                   272.029000f, 162.193800f, 
                   272.704890f, 162.420470f);
        path.Cubic(273.508230f, 162.974370f, 
                   274.368750f, 163.444850f, 
                   275.269500f, 163.820310f);
        path.Cubic(275.438480f, 163.402700f, 
                   275.812800f, 162.905650f, 
                   275.130000f, 162.832170f);
        path.Cubic(274.287970f, 162.442610f, 
                   273.488230f, 161.962860f, 
                   272.746060f, 161.406250f);
        path.Close();
        path.Move(288.144530f, 161.710940f);
        path.Cubic(287.232510f, 162.318440f, 
                   286.248820f, 162.819080f, 
                   285.218750f, 163.193360f);
        path.Cubic(285.369590f, 163.637040f, 
                   285.460400f, 164.230770f, 
                   286.004210f, 163.798060f);
        path.Cubic(286.920780f, 163.427040f, 
                   287.798300f, 162.960400f, 
                   288.621090f, 162.412110f);
        path.Cubic(288.462240f, 162.178390f, 
                   288.303380f, 161.944660f, 
                   288.144530f, 161.710940f);
        path.Close();
        path.Move(278.750000f, 163.896480f);
        path.Cubic(278.664200f, 164.368290f, 
                   278.478290f, 164.927800f, 
                   279.167590f, 164.800410f);
        path.Cubic(280.149020f, 164.899410f, 
                   281.140620f, 164.892110f, 
                   282.121090f, 164.785110f);
        path.Cubic(282.115090f, 164.231120f, 
                   282.077190f, 163.735910f, 
                   281.402200f, 163.996740f);
        path.Cubic(280.517780f, 164.051040f, 
                   279.627520f, 164.021140f, 
                   278.750000f, 163.896430f);
        path.Close();
    }

    private void SetPathData_path8654(IRenderPath path)
    { // Label: 
        path.Move(287.707710f, 150.552990f);
        path.Cubic(287.726963f, 153.407021f, 
                   286.022555f, 155.990749f, 
                   283.391281f, 157.096306f);
        path.Cubic(280.760006f, 158.201863f, 
                   277.721693f, 157.610838f, 
                   275.696724f, 155.599529f);
        path.Cubic(273.671755f, 153.588220f, 
                   273.060178f, 150.553977f, 
                   274.147900f, 147.915279f);
        path.Cubic(275.235622f, 145.276582f, 
                   277.807754f, 143.554725f, 
                   280.661850f, 143.554660f);
        path.Cubic(284.540055f, 143.541514f, 
                   287.694606f, 146.674785f, 
                   287.707710f, 150.552990f);
        path.Close();
    }

    private void SetPathData_path8656(IRenderPath path)
    { // Label: 
        path.Move(280.662110f, 143.148440f);
        path.Cubic(280.381740f, 143.150440f, 
                   280.100920f, 143.161540f, 
                   279.822270f, 143.193340f);
        path.Cubic(279.850270f, 143.462220f, 
                   279.878270f, 143.731100f, 
                   279.906270f, 143.999980f);
        path.Cubic(280.924300f, 143.893740f, 
                   281.967890f, 144.000820f, 
                   282.931660f, 144.351540f);
        path.Cubic(283.020860f, 144.095680f, 
                   283.110050f, 143.839820f, 
                   283.199240f, 143.583960f);
        path.Cubic(282.387310f, 143.292820f, 
                   281.524600f, 143.145390f, 
                   280.662130f, 143.148420f);
        path.Close();
        path.Move(276.611330f, 144.320310f);
        path.Cubic(275.647420f, 144.942340f, 
                   274.838020f, 145.798290f, 
                   274.257810f, 146.787110f);
        path.Cubic(274.489580f, 146.927730f, 
                   274.721350f, 147.068360f, 
                   274.953120f, 147.208980f);
        path.Cubic(275.467180f, 146.328430f, 
                   276.186130f, 145.566240f, 
                   277.041020f, 145.009770f);
        path.Cubic(276.897790f, 144.779950f, 
                   276.754560f, 144.550130f, 
                   276.611330f, 144.320310f);
        path.Close();
        path.Move(286.060550f, 145.449220f);
        path.Cubic(285.863280f, 145.634770f, 
                   285.666020f, 145.820310f, 
                   285.468750f, 146.005860f);
        path.Cubic(286.175260f, 146.742760f, 
                   286.705930f, 147.646060f, 
                   287.007810f, 148.621090f);
        path.Cubic(287.266930f, 148.542990f, 
                   287.526040f, 148.464840f, 
                   287.785160f, 148.386720f);
        path.Cubic(287.449150f, 147.291180f, 
                   286.852150f, 146.277490f, 
                   286.060550f, 145.449220f);
        path.Close();
        path.Move(273.222660f, 150.029300f);
        path.Cubic(273.124860f, 151.174980f, 
                   273.299560f, 152.344600f, 
                   273.738280f, 153.408200f);
        path.Cubic(273.988280f, 153.304030f, 
                   274.238280f, 153.199870f, 
                   274.488280f, 153.095700f);
        path.Cubic(274.099650f, 152.154760f, 
                   273.948580f, 151.121000f, 
                   274.031250f, 150.107420f);
        path.Cubic(273.761720f, 150.081420f, 
                   273.492190f, 150.055320f, 
                   273.222660f, 150.029320f);
        path.Close();
        path.Move(287.300780f, 150.552730f);
        path.Cubic(287.311580f, 151.575100f, 
                   287.095240f, 152.602240f, 
                   286.648440f, 153.523440f);
        path.Cubic(286.892580f, 153.640630f, 
                   287.136720f, 153.757810f, 
                   287.380860f, 153.875000f);
        path.Cubic(287.879910f, 152.845070f, 
                   288.124820f, 151.697940f, 
                   288.113280f, 150.554690f);
        path.Cubic(287.842450f, 150.554040f, 
                   287.571610f, 150.553690f, 
                   287.300780f, 150.552690f);
        path.Close();
        path.Move(276.259770f, 155.572270f);
        path.Cubic(276.078130f, 155.772790f, 
                   275.896480f, 155.973310f, 
                   275.714840f, 156.173830f);
        path.Cubic(276.568040f, 156.940070f, 
                   277.596950f, 157.517680f, 
                   278.707030f, 157.812500f);
        path.Cubic(278.777330f, 157.551430f, 
                   278.847660f, 157.290370f, 
                   278.917970f, 157.029300f);
        path.Cubic(277.932290f, 156.763600f, 
                   277.019060f, 156.252530f, 
                   276.259770f, 155.572270f);
        path.Close();
        path.Move(284.718750f, 155.863280f);
        path.Cubic(283.906480f, 156.484710f, 
                   282.949140f, 156.913990f, 
                   281.947270f, 157.117190f);
        path.Cubic(282.003270f, 157.382160f, 
                   282.059240f, 157.647140f, 
                   282.115230f, 157.912110f);
        path.Cubic(283.236390f, 157.685350f, 
                   284.305030f, 157.201130f, 
                   285.214840f, 156.507810f);
        path.Cubic(285.049480f, 156.292970f, 
                   284.884110f, 156.078120f, 
                   284.718750f, 155.863280f);
        path.Close();
    }

    private void SetPathData_path8694(IRenderPath path)
    { // Label: 
        path.Move(77.946250f, 183.972650f);
        path.Cubic(75.819433f, 185.812323f, 
                   72.664734f, 185.812323f, 
                   70.537917f, 183.972650f);
        path.Line(69.932021f, 184.419790f);
        path.Line(69.932021f, 184.443590f);
        path.Line(69.958481f, 184.467390f);
        path.Cubic(72.394220f, 186.625949f, 
                   76.058201f, 186.625949f, 
                   78.493940f, 184.467390f);
        path.Line(78.520400f, 184.443590f);
        path.Line(78.520400f, 184.409190f);
        path.Line(78.520400f, 184.409190f);
        path.Close();
    }

    private void SetPathData_path8698(IRenderPath path)
    { // Label: 
        path.Move(280.570000f, 133.630000f);
        path.Cubic(271.230203f, 133.696163f, 
                   263.706157f, 141.309506f, 
                   263.750188f, 150.649434f);
        path.Cubic(263.794219f, 159.989361f, 
                   271.389712f, 167.531427f, 
                   280.729717f, 167.509528f);
        path.Cubic(290.069722f, 167.487630f, 
                   297.629766f, 159.910031f, 
                   297.630000f, 150.570000f);
        path.Cubic(297.596921f, 141.181135f, 
                   289.958865f, 133.596804f, 
                   280.570000f, 133.630000f);
        path.Close();
    }

    private void SetPathData_path8700(IRenderPath path)
    { // Label: 
        path.Move(292.250000f, 150.570000f);
        path.Cubic(292.282407f, 155.264862f, 
                   289.479234f, 159.515487f, 
                   285.151014f, 161.334632f);
        path.Cubic(280.822795f, 163.153778f, 
                   275.824665f, 162.182031f, 
                   272.493340f, 158.873700f);
        path.Cubic(269.162015f, 155.565370f, 
                   268.155672f, 150.574091f, 
                   269.944796f, 146.233375f);
        path.Cubic(271.733919f, 141.892659f, 
                   275.965027f, 139.060112f, 
                   280.660000f, 139.060000f);
        path.Cubic(287.038905f, 139.037870f, 
                   292.227947f, 144.191095f, 
                   292.250000f, 150.570000f);
        path.Close();
    }

    private void SetPathData_path8702(IRenderPath path)
    { // Label: 
        path.Move(286.590000f, 150.570000f);
        path.Cubic(286.606203f, 152.972035f, 
                   285.171723f, 155.146574f, 
                   282.957166f, 156.077042f);
        path.Cubic(280.742609f, 157.007510f, 
                   278.185478f, 156.510085f, 
                   276.481206f, 154.817309f);
        path.Cubic(274.776934f, 153.124533f, 
                   274.262213f, 150.570827f, 
                   275.177672f, 148.350023f);
        path.Cubic(276.093130f, 146.129219f, 
                   278.257911f, 144.680055f, 
                   280.660000f, 144.680000f);
        path.Cubic(283.924011f, 144.668936f, 
                   286.578973f, 147.305989f, 
                   286.590000f, 150.570000f);
        path.Close();
    }

    private void SetPathData_path8704(IRenderPath path)
    { // Label: 
        path.Move(288.370000f, 145.460000f);
        path.Cubic(288.382156f, 146.975360f, 
                   287.478681f, 148.348280f, 
                   286.082146f, 148.936625f);
        path.Cubic(284.685610f, 149.524970f, 
                   283.072073f, 149.212439f, 
                   281.996212f, 148.145207f);
        path.Cubic(280.920350f, 147.077975f, 
                   280.594834f, 145.467008f, 
                   281.171913f, 144.065779f);
        path.Cubic(281.748992f, 142.664551f, 
                   283.114592f, 141.750049f, 
                   284.630000f, 141.750000f);
        path.Cubic(285.618335f, 141.744683f, 
                   286.568160f, 142.132889f, 
                   287.269837f, 142.828938f);
        path.Cubic(287.971514f, 143.524987f, 
                   288.367357f, 144.471654f, 
                   288.370000f, 145.460000f);
        path.Close();
    }

    private void SetPathData_path8710(IRenderPath path)
    { // Label: 
        path.Move(294.432770f, 150.552990f);
        path.Cubic(294.471275f, 156.131293f, 
                   291.140624f, 161.181767f, 
                   285.997955f, 163.343225f);
        path.Cubic(280.855286f, 165.504683f, 
                   274.916648f, 164.350082f, 
                   270.958461f, 160.419217f);
        path.Cubic(267.000273f, 156.488353f, 
                   265.804564f, 150.557855f, 
                   267.930348f, 145.400338f);
        path.Cubic(270.056132f, 140.242820f, 
                   275.083414f, 136.877265f, 
                   280.661850f, 136.877130f);
        path.Cubic(288.241088f, 136.850833f, 
                   294.406566f, 142.973752f, 
                   294.432770f, 150.552990f);
        path.Close();
    }

    private void SetPathData_path8712(IRenderPath path)
    { // Label: 
        path.Move(279.968750f, 136.468750f);
        path.Cubic(278.807410f, 136.523050f, 
                   277.650210f, 136.705700f, 
                   276.535160f, 137.037110f);
        path.Cubic(276.648940f, 137.514920f, 
                   276.707620f, 138.075990f, 
                   277.298650f, 137.707070f);
        path.Cubic(278.185710f, 137.484580f, 
                   279.096250f, 137.355820f, 
                   280.009770f, 137.316410f);
        path.Cubic(279.996070f, 137.033860f, 
                   279.982370f, 136.751300f, 
                   279.968770f, 136.468750f);
        path.Close();
        path.Move(283.441410f, 136.716800f);
        path.Cubic(283.323600f, 137.200110f, 
                   283.133090f, 137.719220f, 
                   283.824100f, 137.668940f);
        path.Cubic(284.710460f, 137.879200f, 
                   285.573720f, 138.185410f, 
                   286.396480f, 138.576170f);
        path.Cubic(286.672250f, 138.109510f, 
                   286.912680f, 137.647590f, 
                   286.191570f, 137.555440f);
        path.Cubic(285.307030f, 137.181820f, 
                   284.383190f, 136.903110f, 
                   283.441410f, 136.716800f);
        path.Close();
        path.Move(273.333980f, 138.439450f);
        path.Cubic(272.336920f, 139.040980f, 
                   271.416250f, 139.767560f, 
                   270.599610f, 140.597660f);
        path.Cubic(270.939330f, 140.984890f, 
                   271.270960f, 141.410590f, 
                   271.616870f, 140.790090f);
        path.Cubic(272.277620f, 140.174790f, 
                   273.002120f, 139.627170f, 
                   273.777340f, 139.164060f);
        path.Cubic(273.629550f, 138.922520f, 
                   273.481770f, 138.680990f, 
                   273.333980f, 138.439450f);
        path.Close();
        path.Move(289.703120f, 139.679690f);
        path.Cubic(289.319080f, 140.058970f, 
                   288.968440f, 140.426100f, 
                   289.617220f, 140.724610f);
        path.Cubic(290.278660f, 141.325620f, 
                   290.886210f, 141.987360f, 
                   291.414090f, 142.708980f);
        path.Cubic(291.823670f, 142.438730f, 
                   292.343900f, 142.175340f, 
                   291.758140f, 141.765600f);
        path.Cubic(291.147950f, 141.001900f, 
                   290.456820f, 140.302090f, 
                   289.703150f, 139.679690f);
        path.Close();
        path.Move(268.474610f, 143.361330f);
        path.Cubic(267.883100f, 144.363390f, 
                   267.409450f, 145.435650f, 
                   267.070310f, 146.548830f);
        path.Cubic(267.563630f, 146.745640f, 
                   268.049590f, 146.945600f, 
                   268.068360f, 146.224610f);
        path.Cubic(268.367950f, 145.380850f, 
                   268.748550f, 144.566300f, 
                   269.203120f, 143.794920f);
        path.Cubic(268.960280f, 143.650390f, 
                   268.717450f, 143.505860f, 
                   268.474610f, 143.361330f);
        path.Close();
        path.Move(293.806640f, 145.244140f);
        path.Cubic(293.367190f, 145.415160f, 
                   292.785860f, 145.515410f, 
                   293.212540f, 146.060050f);
        path.Cubic(293.526690f, 146.923570f, 
                   293.750980f, 147.820230f, 
                   293.876950f, 148.730470f);
        path.Cubic(294.373770f, 148.686870f, 
                   294.946930f, 148.691970f, 
                   294.626950f, 148.048830f);
        path.Cubic(294.449830f, 147.089090f, 
                   294.176950f, 146.147260f, 
                   293.806640f, 145.244140f);
        path.Close();
        path.Move(266.460940f, 149.980470f);
        path.Cubic(266.400040f, 151.144840f, 
                   266.476540f, 152.317460f, 
                   266.707030f, 153.460940f);
        path.Cubic(267.160090f, 153.370540f, 
                   267.776350f, 153.399240f, 
                   267.445310f, 152.775390f);
        path.Cubic(267.302460f, 151.867010f, 
                   267.258120f, 150.943420f, 
                   267.308590f, 150.025390f);
        path.Cubic(267.026040f, 150.010390f, 
                   266.743490f, 149.995490f, 
                   266.460940f, 149.980490f);
        path.Close();
        path.Move(294.009770f, 150.552730f);
        path.Cubic(294.012770f, 151.649370f, 
                   293.904420f, 152.748710f, 
                   293.650390f, 153.816410f);
        path.Cubic(294.149380f, 153.984570f, 
                   294.660960f, 154.147350f, 
                   294.598700f, 153.431330f);
        path.Cubic(294.779040f, 152.483910f, 
                   294.861400f, 151.518850f, 
                   294.857420f, 150.554690f);
        path.Cubic(294.574870f, 150.554040f, 
                   294.292320f, 150.553690f, 
                   294.009770f, 150.552690f);
        path.Close();
        path.Move(268.580080f, 156.396480f);
        path.Cubic(268.128610f, 156.586350f, 
                   267.570920f, 156.752230f, 
                   268.067760f, 157.259020f);
        path.Cubic(268.530340f, 158.125190f, 
                   269.087100f, 158.940190f, 
                   269.716800f, 159.693360f);
        path.Cubic(270.118460f, 159.391250f, 
                   270.589760f, 159.103560f, 
                   270.011300f, 158.706870f);
        path.Cubic(269.457750f, 157.987940f, 
                   268.974080f, 157.214050f, 
                   268.580080f, 156.396480f);
        path.Close();
        path.Move(292.509770f, 156.886720f);
        path.Cubic(292.003130f, 157.855990f, 
                   291.367360f, 158.757840f, 
                   290.634770f, 159.568360f);
        path.Cubic(290.963950f, 159.871480f, 
                   291.311450f, 160.410180f, 
                   291.588670f, 159.764380f);
        path.Cubic(292.232390f, 159.000330f, 
                   292.795350f, 158.167920f, 
                   293.259770f, 157.283200f);
        path.Cubic(293.009770f, 157.151040f, 
                   292.759770f, 157.018880f, 
                   292.509770f, 156.886720f);
        path.Close();
        path.Move(272.746090f, 161.406250f);
        path.Cubic(272.421550f, 161.791070f, 
                   272.029000f, 162.193800f, 
                   272.704890f, 162.420470f);
        path.Cubic(273.508230f, 162.974370f, 
                   274.368750f, 163.444850f, 
                   275.269500f, 163.820310f);
        path.Cubic(275.438480f, 163.402700f, 
                   275.812800f, 162.905650f, 
                   275.130000f, 162.832170f);
        path.Cubic(274.287970f, 162.442610f, 
                   273.488230f, 161.962860f, 
                   272.746060f, 161.406250f);
        path.Close();
        path.Move(288.144530f, 161.710940f);
        path.Cubic(287.232510f, 162.318440f, 
                   286.248820f, 162.819080f, 
                   285.218750f, 163.193360f);
        path.Cubic(285.369590f, 163.637040f, 
                   285.460400f, 164.230770f, 
                   286.004210f, 163.798060f);
        path.Cubic(286.920780f, 163.427040f, 
                   287.798300f, 162.960400f, 
                   288.621090f, 162.412110f);
        path.Cubic(288.462240f, 162.178390f, 
                   288.303380f, 161.944660f, 
                   288.144530f, 161.710940f);
        path.Close();
        path.Move(278.750000f, 163.896480f);
        path.Cubic(278.664200f, 164.368290f, 
                   278.478290f, 164.927800f, 
                   279.167590f, 164.800410f);
        path.Cubic(280.149020f, 164.899410f, 
                   281.140620f, 164.892110f, 
                   282.121090f, 164.785110f);
        path.Cubic(282.115090f, 164.231120f, 
                   282.077190f, 163.735910f, 
                   281.402200f, 163.996740f);
        path.Cubic(280.517780f, 164.051040f, 
                   279.627520f, 164.021140f, 
                   278.750000f, 163.896430f);
        path.Close();
    }

    private void SetPathData_path8714(IRenderPath path)
    { // Label: 
        path.Move(287.707710f, 150.552990f);
        path.Cubic(287.726963f, 153.407021f, 
                   286.022555f, 155.990749f, 
                   283.391281f, 157.096306f);
        path.Cubic(280.760006f, 158.201863f, 
                   277.721693f, 157.610838f, 
                   275.696724f, 155.599529f);
        path.Cubic(273.671755f, 153.588220f, 
                   273.060178f, 150.553977f, 
                   274.147900f, 147.915279f);
        path.Cubic(275.235622f, 145.276582f, 
                   277.807754f, 143.554725f, 
                   280.661850f, 143.554660f);
        path.Cubic(284.540055f, 143.541514f, 
                   287.694606f, 146.674785f, 
                   287.707710f, 150.552990f);
        path.Close();
    }

    private void SetPathData_path8716(IRenderPath path)
    { // Label: 
        path.Move(280.662110f, 143.148440f);
        path.Cubic(280.381740f, 143.150440f, 
                   280.100920f, 143.161540f, 
                   279.822270f, 143.193340f);
        path.Cubic(279.850270f, 143.462220f, 
                   279.878270f, 143.731100f, 
                   279.906270f, 143.999980f);
        path.Cubic(280.924300f, 143.893740f, 
                   281.967890f, 144.000820f, 
                   282.931660f, 144.351540f);
        path.Cubic(283.020860f, 144.095680f, 
                   283.110050f, 143.839820f, 
                   283.199240f, 143.583960f);
        path.Cubic(282.387310f, 143.292820f, 
                   281.524600f, 143.145390f, 
                   280.662130f, 143.148420f);
        path.Close();
        path.Move(276.611330f, 144.320310f);
        path.Cubic(275.647420f, 144.942340f, 
                   274.838020f, 145.798290f, 
                   274.257810f, 146.787110f);
        path.Cubic(274.489580f, 146.927730f, 
                   274.721350f, 147.068360f, 
                   274.953120f, 147.208980f);
        path.Cubic(275.467180f, 146.328430f, 
                   276.186130f, 145.566240f, 
                   277.041020f, 145.009770f);
        path.Cubic(276.897790f, 144.779950f, 
                   276.754560f, 144.550130f, 
                   276.611330f, 144.320310f);
        path.Close();
        path.Move(286.060550f, 145.449220f);
        path.Cubic(285.863280f, 145.634770f, 
                   285.666020f, 145.820310f, 
                   285.468750f, 146.005860f);
        path.Cubic(286.175260f, 146.742760f, 
                   286.705930f, 147.646060f, 
                   287.007810f, 148.621090f);
        path.Cubic(287.266930f, 148.542990f, 
                   287.526040f, 148.464840f, 
                   287.785160f, 148.386720f);
        path.Cubic(287.449150f, 147.291180f, 
                   286.852150f, 146.277490f, 
                   286.060550f, 145.449220f);
        path.Close();
        path.Move(273.222660f, 150.029300f);
        path.Cubic(273.124860f, 151.174980f, 
                   273.299560f, 152.344600f, 
                   273.738280f, 153.408200f);
        path.Cubic(273.988280f, 153.304030f, 
                   274.238280f, 153.199870f, 
                   274.488280f, 153.095700f);
        path.Cubic(274.099650f, 152.154760f, 
                   273.948580f, 151.121000f, 
                   274.031250f, 150.107420f);
        path.Cubic(273.761720f, 150.081420f, 
                   273.492190f, 150.055320f, 
                   273.222660f, 150.029320f);
        path.Close();
        path.Move(287.300780f, 150.552730f);
        path.Cubic(287.311580f, 151.575100f, 
                   287.095240f, 152.602240f, 
                   286.648440f, 153.523440f);
        path.Cubic(286.892580f, 153.640630f, 
                   287.136720f, 153.757810f, 
                   287.380860f, 153.875000f);
        path.Cubic(287.879910f, 152.845070f, 
                   288.124820f, 151.697940f, 
                   288.113280f, 150.554690f);
        path.Cubic(287.842450f, 150.554040f, 
                   287.571610f, 150.553690f, 
                   287.300780f, 150.552690f);
        path.Close();
        path.Move(276.259770f, 155.572270f);
        path.Cubic(276.078130f, 155.772790f, 
                   275.896480f, 155.973310f, 
                   275.714840f, 156.173830f);
        path.Cubic(276.568040f, 156.940070f, 
                   277.596950f, 157.517680f, 
                   278.707030f, 157.812500f);
        path.Cubic(278.777330f, 157.551430f, 
                   278.847660f, 157.290370f, 
                   278.917970f, 157.029300f);
        path.Cubic(277.932290f, 156.763600f, 
                   277.019060f, 156.252530f, 
                   276.259770f, 155.572270f);
        path.Close();
        path.Move(284.718750f, 155.863280f);
        path.Cubic(283.906480f, 156.484710f, 
                   282.949140f, 156.913990f, 
                   281.947270f, 157.117190f);
        path.Cubic(282.003270f, 157.382160f, 
                   282.059240f, 157.647140f, 
                   282.115230f, 157.912110f);
        path.Cubic(283.236390f, 157.685350f, 
                   284.305030f, 157.201130f, 
                   285.214840f, 156.507810f);
        path.Cubic(285.049480f, 156.292970f, 
                   284.884110f, 156.078120f, 
                   284.718750f, 155.863280f);
        path.Close();
    }

    private void SetPathData_use3096(IRenderPath path)
    { // Label: line
        path.Move(89.232533f, 204.830284f);
        path.Line(121.965897f, 218.516894f);
        path.Line(121.972128f, 218.519317f);
        path.Cubic(124.285914f, 219.352324f, 
                   125.117255f, 221.169295f, 
                   125.530078f, 222.482613f);
        path.Cubic(126.038640f, 223.666546f, 
                   125.568157f, 225.706968f, 
                   125.088863f, 227.022750f);
        path.Cubic(123.687192f, 229.400593f, 
                   121.520839f, 230.625579f, 
                   118.999065f, 230.110510f);
        path.Line(97.061531f, 223.129676f);
        path.Line(97.017213f, 265.789612f);
        path.Line(97.017691f, 265.800998f);
        path.Cubic(97.138185f, 267.215229f, 
                   97.372756f, 269.626392f, 
                   97.458251f, 270.427933f);
        path.Cubic(97.118252f, 272.778911f, 
                   95.627334f, 274.208033f, 
                   93.713718f, 275.326702f);
        path.Line(85.210710f, 280.297426f);
        path.Cubic(84.632024f, 280.600965f, 
                   84.038128f, 280.775349f, 
                   83.386898f, 280.782157f);
        path.Cubic(82.146577f, 280.801818f, 
                   81.428592f, 280.300447f, 
                   80.659865f, 279.338996f);
        path.Cubic(79.955816f, 278.458445f, 
                   80.515768f, 277.177101f, 
                   80.940879f, 276.035768f);
        path.Cubic(82.892066f, 270.534532f, 
                   83.859756f, 267.640624f, 
                   83.818553f, 267.382791f);
        path.Line(83.818612f, 267.383165f);
        path.Line(80.807654f, 248.190295f);
        path.Line(80.807945f, 248.192247f);
        path.Cubic(80.611231f, 246.803481f, 
                   78.776804f, 246.886972f, 
                   78.639972f, 248.197066f);
        path.Line(76.686761f, 263.279882f);
        path.Line(76.657536f, 265.179171f);
        path.Line(76.657520f, 265.181210f);
        path.Cubic(76.657520f, 267.837332f, 
                   74.661612f, 269.656681f, 
                   72.709517f, 270.148607f);
        path.Line(72.685452f, 270.157213f);
        path.Line(64.610369f, 273.959273f);
        path.Line(64.605103f, 273.961897f);
        path.Cubic(64.026257f, 274.266535f, 
                   63.398417f, 274.425677f, 
                   62.744355f, 274.433489f);
        path.Cubic(61.494763f, 274.458320f, 
                   60.381223f, 273.759417f, 
                   59.860711f, 272.624282f);
        path.Cubic(59.431421f, 271.648265f, 
                   59.602290f, 270.544858f, 
                   60.308053f, 269.742853f);
        path.Line(60.323140f, 269.721900f);
        path.Line(64.233201f, 262.994251f);
        path.Line(64.116474f, 219.895276f);
        path.Line(45.000953f, 220.569682f);
        path.Line(44.998050f, 220.569817f);
        path.Cubic(42.017461f, 220.740501f, 
                   40.193548f, 219.063165f, 
                   39.477085f, 215.990561f);
        path.Cubic(38.951920f, 213.738344f, 
                   40.140551f, 211.289220f, 
                   42.491233f, 210.616090f);
        path.Line(71.889203f, 204.798329f);
        path.Line(71.913272f, 204.791138f);
        path.Cubic(72.803128f, 204.430286f, 
                   73.102998f, 203.459515f, 
                   73.120436f, 202.493221f);
        path.Cubic(73.151516f, 200.770816f, 
                   72.744447f, 200.174596f, 
                   72.618165f, 200.104760f);
        path.Cubic(65.896077f, 196.389058f, 
                   62.503264f, 188.680702f, 
                   64.401627f, 181.240026f);
        path.Cubic(66.300045f, 173.799139f, 
                   72.970453f, 168.618610f, 
                   80.650292f, 168.618610f);
        path.Cubic(88.330131f, 168.618610f, 
                   95.000539f, 173.799139f, 
                   96.898957f, 181.240026f);
        path.Cubic(98.797391f, 188.680981f, 
                   95.424564f, 196.425520f, 
                   88.683071f, 200.104401f);
        path.Cubic(88.085516f, 200.729947f, 
                   88.210813f, 201.935450f, 
                   88.221067f, 202.758770f);
        path.Cubic(88.239643f, 204.250670f, 
                   88.932740f, 204.614338f, 
                   89.205117f, 204.814761f);
        path.Line(89.232533f, 204.830284f);
        path.Close();
        path.Move(89.362175f, 204.601319f);
        path.Cubic(89.073636f, 204.389002f, 
                   88.502655f, 204.089410f, 
                   88.486047f, 202.755470f);
        path.Cubic(88.475641f, 201.920070f, 
                   88.361636f, 200.823193f, 
                   88.843046f, 200.311503f);
        path.Cubic(95.631250f, 196.614620f, 
                   99.076625f, 188.703499f, 
                   97.155731f, 181.174514f);
        path.Cubic(95.234851f, 173.645581f, 
                   88.420949f, 168.353610f, 
                   80.650292f, 168.353610f);
        path.Cubic(72.879635f, 168.353610f, 
                   66.065733f, 173.645581f, 
                   64.144853f, 181.174514f);
        path.Cubic(62.223888f, 188.703778f, 
                   65.689575f, 196.577702f, 
                   72.489942f, 200.336673f);
        path.Cubic(72.561097f, 200.376024f, 
                   72.885036f, 200.850484f, 
                   72.855480f, 202.488439f);
        path.Cubic(72.838718f, 203.417185f, 
                   72.587038f, 204.231954f, 
                   71.813686f, 204.545562f);
        path.Line(42.429033f, 210.358731f);
        path.Line(42.418281f, 210.361330f);
        path.Cubic(39.953821f, 211.067040f, 
                   38.672524f, 213.707096f, 
                   39.219009f, 216.050739f);
        path.Cubic(39.954026f, 219.202915f, 
                   41.920635f, 221.011479f, 
                   45.013200f, 220.834383f);
        path.Line(63.852216f, 220.169764f);
        path.Line(63.968007f, 262.923169f);
        path.Line(60.100466f, 269.577658f);
        path.Cubic(59.352248f, 270.427862f, 
                   59.157705f, 271.684155f, 
                   59.618984f, 272.732858f);
        path.Cubic(60.173323f, 273.941803f, 
                   61.420911f, 274.724840f, 
                   62.748570f, 274.698454f);
        path.Cubic(63.433037f, 274.690283f, 
                   64.121849f, 274.515685f, 
                   64.728521f, 274.196403f);
        path.Line(72.786805f, 270.402397f);
        path.Cubic(74.790928f, 269.897379f, 
                   76.922520f, 267.954348f, 
                   76.922520f, 265.181210f);
        path.Line(76.951499f, 263.298998f);
        path.Line(78.903158f, 248.227846f);
        path.Line(78.903538f, 248.224594f);
        path.Cubic(79.016680f, 247.141328f, 
                   80.382635f, 247.079159f, 
                   80.545565f, 248.229413f);
        path.Line(80.545856f, 248.231365f);
        path.Line(83.556814f, 267.424235f);
        path.Line(83.556873f, 267.424609f);
        path.Cubic(83.587817f, 267.618243f, 
                   82.641506f, 270.448214f, 
                   80.691834f, 275.945228f);
        path.Cubic(80.270000f, 277.077719f, 
                   79.648914f, 278.498955f, 
                   80.452889f, 279.504484f);
        path.Cubic(81.245506f, 280.495813f, 
                   82.065107f, 281.068142f, 
                   83.390383f, 281.047133f);
        path.Cubic(84.077584f, 281.039951f, 
                   84.731872f, 280.847835f, 
                   85.336483f, 280.530698f);
        path.Line(85.341806f, 280.527748f);
        path.Line(93.847458f, 275.555478f);
        path.Cubic(95.788106f, 274.421007f, 
                   97.367652f, 272.906929f, 
                   97.721172f, 270.432621f);
        path.Cubic(97.636392f, 269.599508f, 
                   97.402093f, 267.191151f, 
                   97.281735f, 265.778502f);
        path.Line(97.326155f, 223.491964f);
        path.Line(118.932376f, 230.366593f);
        path.Line(118.946035f, 230.370150f);
        path.Cubic(121.564961f, 230.905061f, 
                   123.879528f, 229.596267f, 
                   125.327558f, 227.135294f);
        path.Cubic(125.822723f, 225.782372f, 
                   126.316360f, 223.641534f, 
                   125.778196f, 222.390520f);
        path.Cubic(125.365105f, 221.074065f, 
                   124.480526f, 219.140736f, 
                   122.061892f, 218.269983f);
        path.Line(89.349162f, 204.591818f);
        path.Close();
    }

    private void SetPathData_path45759(IRenderPath path)
    { // Label: dashedLine
        path.Move(79.310547f, 168.406250f);
        path.Cubic(78.245383f, 168.488250f, 
                   77.188413f, 168.672220f, 
                   76.158203f, 168.955080f);
        path.Line(76.228513f, 169.210940f);
        path.Cubic(77.242372f, 168.932570f, 
                   78.281791f, 168.752570f, 
                   79.330075f, 168.671870f);
        path.Close();
        path.Move(82.509766f, 168.455050f);
        path.Line(82.480466f, 168.718720f);
        path.Cubic(83.525838f, 168.832120f, 
                   84.561501f, 169.044180f, 
                   85.566403f, 169.353490f);
        path.Line(85.644533f, 169.101530f);
        path.Cubic(84.623402f, 168.787230f, 
                   83.571836f, 168.570250f, 
                   82.509768f, 168.455050f);
        path.Close();
        path.Move(73.164062f, 170.085910f);
        path.Cubic(72.204357f, 170.555190f, 
                   71.287983f, 171.114460f, 
                   70.433594f, 171.755830f);
        path.Line(70.593750f, 171.968720f);
        path.Cubic(71.434709f, 171.337430f, 
                   72.334619f, 170.786120f, 
                   73.279297f, 170.324190f);
        path.Close();
        path.Move(88.601562f, 170.322240f);
        path.Line(88.478516f, 170.556610f);
        path.Cubic(89.408878f, 171.046350f, 
                   90.292389f, 171.626170f, 
                   91.113281f, 172.283170f);
        path.Line(91.279297f, 172.076140f);
        path.Cubic(90.445271f, 171.408630f, 
                   89.546908f, 170.819860f, 
                   88.601562f, 170.322240f);
        path.Close();
        path.Move(68.064453f, 173.908170f);
        path.Cubic(67.343063f, 174.696110f, 
                   66.697066f, 175.552060f, 
                   66.138672f, 176.462860f);
        path.Line(66.365234f, 176.601530f);
        path.Cubic(66.914740f, 175.705230f, 
                   67.549800f, 174.861370f, 
                   68.259766f, 174.085910f);
        path.Close();
        path.Move(93.582031f, 174.298800f);
        path.Line(93.380859f, 174.470670f);
        path.Cubic(94.066120f, 175.268310f, 
                   94.676670f, 176.130430f, 
                   95.199219f, 177.042940f);
        path.Line(95.427734f, 176.912080f);
        path.Cubic(94.896807f, 175.984940f, 
                   94.278211f, 175.109150f, 
                   93.582031f, 174.298800f);
        path.Close();
        path.Move(64.726562f, 179.335910f);
        path.Cubic(64.346399f, 180.334180f, 
                   64.061656f, 181.367730f, 
                   63.876953f, 182.419890f);
        path.Line(64.138672f, 182.466790f);
        path.Cubic(64.320455f, 181.431250f, 
                   64.600431f, 180.412230f, 
                   64.974609f, 179.429680f);
        path.Close();
        path.Move(96.751953f, 179.826140f);
        path.Line(96.501953f, 179.912040f);
        path.Cubic(96.845365f, 180.906000f, 
                   97.094286f, 181.933850f, 
                   97.246094f, 182.974540f);
        path.Line(97.507812f, 182.935440f);
        path.Cubic(97.353619f, 181.878390f, 
                   97.100836f, 180.835860f, 
                   96.751953f, 179.826060f);
        path.Close();
        path.Move(63.884766f, 185.607390f);
        path.Line(63.619141f, 185.609390f);
        path.Cubic(63.632431f, 186.677780f, 
                   63.749844f, 187.745050f, 
                   63.966797f, 188.791040f);
        path.Line(64.226562f, 188.738340f);
        path.Cubic(64.013032f, 187.708860f, 
                   63.897840f, 186.658660f, 
                   63.884766f, 185.607480f);
        path.Close();
        path.Move(97.404297f, 186.119110f);
        path.Cubic(97.357927f, 187.169740f, 
                   97.214206f, 188.217350f, 
                   96.970703f, 189.240200f);
        path.Line(97.228516f, 189.300800f);
        path.Cubic(97.475973f, 188.261340f, 
                   97.622826f, 187.198020f, 
                   97.669922f, 186.130880f);
        path.Close();
        path.Move(65.148437f, 191.749970f);
        path.Line(64.904297f, 191.851530f);
        path.Cubic(65.312110f, 192.838690f, 
                   65.810957f, 193.787830f, 
                   66.396484f, 194.681610f);
        path.Line(66.619141f, 194.537080f);
        path.Cubic(66.042941f, 193.657540f, 
                   65.550015f, 192.722040f, 
                   65.148437f, 191.749970f);
        path.Close();
        path.Move(95.960937f, 192.224580f);
        path.Cubic(95.533575f, 193.185190f, 
                   95.013571f, 194.104330f, 
                   94.412109f, 194.966770f);
        path.Line(94.628906f, 195.119110f);
        path.Cubic(95.239977f, 194.242900f, 
                   95.766918f, 193.308100f, 
                   96.201172f, 192.332000f);
        path.Close();
        path.Move(68.580078f, 197.001920f);
        path.Line(68.388672f, 197.185520f);
        path.Cubic(69.127480f, 197.957060f, 
                   69.939788f, 198.658590f, 
                   70.810547f, 199.277310f);
        path.Line(70.964844f, 199.062470f);
        path.Cubic(70.107741f, 198.453450f, 
                   69.307263f, 197.761330f, 
                   68.580078f, 197.001920f);
        path.Close();
        path.Move(92.376953f, 197.373020f);
        path.Cubic(91.625681f, 198.108750f, 
                   90.804327f, 198.772590f, 
                   89.927734f, 199.353490f);
        path.Line(90.074219f, 199.574190f);
        path.Cubic(90.964757f, 198.984050f, 
                   91.799160f, 198.310020f, 
                   92.562500f, 197.562470f);
        path.Close();
        path.Move(73.066406f, 201.330050f);
        path.Line(72.804687f, 201.363250f);
        path.Cubic(72.858917f, 201.791640f, 
                   72.866817f, 202.226620f, 
                   72.849607f, 202.662080f);
        path.Cubic(72.822217f, 203.139810f, 
                   72.724385f, 203.621320f, 
                   72.468748f, 204.007780f);
        path.Line(72.470748f, 204.007780f);
        path.Cubic(72.407188f, 204.102780f, 
                   72.333774f, 204.189570f, 
                   72.251998f, 204.265590f);
        path.Line(72.431686f, 204.460910f);
        path.Cubic(72.530526f, 204.369010f, 
                   72.615991f, 204.264080f, 
                   72.689498f, 204.154270f);
        path.Line(72.691498f, 204.154270f);
        path.Cubic(72.986050f, 203.708980f, 
                   73.084713f, 203.178960f, 
                   73.113373f, 202.675750f);
        path.Line(73.113373f, 202.673750f);
        path.Cubic(73.130983f, 202.228010f, 
                   73.123073f, 201.777260f, 
                   73.066503f, 201.330000f);
        path.Close();
        path.Move(88.203125f, 201.845670f);
        path.Cubic(88.201425f, 202.154530f, 
                   88.216845f, 202.459750f, 
                   88.220705f, 202.759740f);
        path.Cubic(88.228505f, 203.265190f, 
                   88.306305f, 203.809990f, 
                   88.611330f, 204.259740f);
        path.Cubic(88.770294f, 204.498490f, 
                   88.991510f, 204.671370f, 
                   89.208986f, 204.818330f);
        path.Line(89.357424f, 204.597630f);
        path.Cubic(89.149883f, 204.457380f, 
                   88.958007f, 204.304320f, 
                   88.830080f, 204.111300f);
        path.Cubic(88.569892f, 203.727670f, 
                   88.493786f, 203.236880f, 
                   88.486330f, 202.755830f);
        path.Cubic(88.482330f, 202.448660f, 
                   88.465180f, 202.146070f, 
                   88.466800f, 201.847630f);
        path.Close();
        path.Move(89.638672f, 204.712860f);
        path.Line(89.535156f, 204.957000f);
        path.Line(92.468750f, 206.183560f);
        path.Line(92.572266f, 205.939420f);
        path.Close();
        path.Move(69.279297f, 205.044890f);
        path.Line(66.158203f, 205.662080f);
        path.Line(66.210933f, 205.921840f);
        path.Line(69.330074f, 205.304660f);
        path.Close();
        path.Move(63.039062f, 206.279270f);
        path.Line(59.919922f, 206.896450f);
        path.Line(59.970702f, 207.156220f);
        path.Line(63.091796f, 206.539030f);
        path.Close();
        path.Move(95.505859f, 207.165990f);
        path.Line(95.404297f, 207.410130f);
        path.Line(98.337891f, 208.636690f);
        path.Line(98.439453f, 208.392550f);
        path.Close();
        path.Move(56.800781f, 207.513640f);
        path.Line(53.681641f, 208.130830f);
        path.Line(53.732421f, 208.392550f);
        path.Line(56.851561f, 207.773410f);
        path.Close();
        path.Move(50.562500f, 208.750000f);
        path.Line(47.441406f, 209.367190f);
        path.Line(47.494136f, 209.626950f);
        path.Line(50.613276f, 209.009770f);
        path.Close();
        path.Move(101.373050f, 209.619140f);
        path.Line(101.271480f, 209.863280f);
        path.Line(104.205080f, 211.089840f);
        path.Line(104.306640f, 210.845700f);
        path.Close();
        path.Move(44.322266f, 209.984370f);
        path.Line(42.423828f, 210.359370f);
        path.Line(42.417928f, 210.361370f);
        path.Cubic(42.005293f, 210.479320f, 
                   41.610318f, 210.655530f, 
                   41.248006f, 210.886760f);
        path.Line(41.390584f, 211.111370f);
        path.Cubic(41.728249f, 210.895870f, 
                   42.097003f, 210.730200f, 
                   42.482381f, 210.619180f);
        path.Line(44.374959f, 210.244180f);
        path.Close();
        path.Move(107.240230f, 212.072270f);
        path.Line(107.138670f, 212.318360f);
        path.Line(110.072270f, 213.544920f);
        path.Line(110.175780f, 213.298830f);
        path.Close();
        path.Move(39.320312f, 213.449220f);
        path.Cubic(39.055729f, 214.286980f, 
                   39.018966f, 215.194740f, 
                   39.218750f, 216.050780f);
        path.Line(39.291020f, 216.341800f);
        path.Line(39.371100f, 216.625000f);
        path.Line(39.380900f, 216.656200f);
        path.Line(39.632853f, 216.576100f);
        path.Line(39.625053f, 216.550700f);
        path.Line(39.546923f, 216.275310f);
        path.Line(39.476613f, 215.990150f);
        path.Line(39.476613f, 215.988150f);
        path.Cubic(39.288403f, 215.180100f, 
                   39.322401f, 214.320490f, 
                   39.572313f, 213.529170f);
        path.Close();
        path.Move(113.109380f, 214.525390f);
        path.Line(113.005860f, 214.771480f);
        path.Line(115.941410f, 215.998050f);
        path.Line(116.042970f, 215.753910f);
        path.Close();
        path.Move(118.976560f, 216.980470f);
        path.Line(118.875000f, 217.224610f);
        path.Line(121.808590f, 218.451170f);
        path.Line(121.910160f, 218.207030f);
        path.Close();
        path.Move(41.146484f, 219.263670f);
        path.Line(40.958984f, 219.451170f);
        path.Cubic(41.499868f, 219.989570f, 
                   42.174024f, 220.389940f, 
                   42.904297f, 220.609370f);
        path.Cubic(43.218243f, 220.704770f, 
                   43.540014f, 220.768110f, 
                   43.865234f, 220.804690f);
        path.Line(43.894534f, 220.542970f);
        path.Cubic(43.584642f, 220.508070f, 
                   43.278139f, 220.445970f, 
                   42.980472f, 220.355470f);
        path.Cubic(42.292103f, 220.148620f, 
                   41.655739f, 219.770580f, 
                   41.146487f, 219.263670f);
        path.Close();
        path.Move(62.943359f, 219.937500f);
        path.Line(59.765625f, 220.048830f);
        path.Line(59.773425f, 220.314450f);
        path.Line(62.953113f, 220.201170f);
        path.Close();
        path.Move(124.554690f, 220.011700f);
        path.Line(124.349610f, 220.179670f);
        path.Cubic(124.896840f, 220.849480f, 
                   125.270470f, 221.651040f, 
                   125.529300f, 222.482400f);
        path.Line(125.531300f, 222.488400f);
        path.Line(125.535300f, 222.494400f);
        path.Cubic(125.600200f, 222.645800f, 
                   125.647410f, 222.808380f, 
                   125.679830f, 222.972920f);
        path.Line(125.939590f, 222.920220f);
        path.Cubic(125.904590f, 222.742430f, 
                   125.851690f, 222.566460f, 
                   125.779440f, 222.396780f);
        path.Cubic(125.513570f, 221.545440f, 
                   125.128240f, 220.713880f, 
                   124.554830f, 220.012020f);
        path.Close();
        path.Move(56.587891f, 220.160140f);
        path.Line(53.408203f, 220.273420f);
        path.Line(53.418003f, 220.537090f);
        path.Line(56.595737f, 220.425760f);
        path.Close();
        path.Move(50.230469f, 220.384750f);
        path.Line(47.052734f, 220.498030f);
        path.Line(47.062534f, 220.761700f);
        path.Line(50.240268f, 220.650370f);
        path.Close();
        path.Move(63.857422f, 222.175760f);
        path.Line(63.867222f, 225.355450f);
        path.Line(64.130894f, 225.355450f);
        path.Line(64.123094f, 222.175760f);
        path.Close();
        path.Move(97.060547f, 223.714820f);
        path.Line(97.058547f, 226.896460f);
        path.Line(97.322219f, 226.896460f);
        path.Line(97.326119f, 223.716780f);
        path.Close();
        path.Move(99.878906f, 224.025370f);
        path.Line(99.798826f, 224.279280f);
        path.Line(102.828130f, 225.242170f);
        path.Line(102.908230f, 224.990210f);
        path.Close();
        path.Move(105.939450f, 225.955060f);
        path.Line(105.859350f, 226.207010f);
        path.Line(108.888640f, 227.171850f);
        path.Line(108.968740f, 226.917950f);
        path.Close();
        path.Move(125.394530f, 226.052660f);
        path.Cubic(125.308630f, 226.375110f, 
                   125.205420f, 226.694540f, 
                   125.091800f, 227.009700f);
        path.Cubic(124.734190f, 227.614200f, 
                   124.309870f, 228.181130f, 
                   123.804690f, 228.663990f);
        path.Line(123.988280f, 228.855400f);
        path.Cubic(124.517520f, 228.349540f, 
                   124.959140f, 227.760330f, 
                   125.328130f, 227.134700f);
        path.Line(125.334130f, 227.124700f);
        path.Line(125.338130f, 227.113000f);
        path.Cubic(125.455810f, 226.787600f, 
                   125.563140f, 226.456590f, 
                   125.652580f, 226.120810f);
        path.Close();
        path.Move(112.000000f, 227.882810f);
        path.Line(111.919900f, 228.134770f);
        path.Line(114.949200f, 229.099610f);
        path.Line(115.029300f, 228.847660f);
        path.Close();
        path.Move(63.875000f, 228.535160f);
        path.Line(63.882800f, 231.714840f);
        path.Line(64.148425f, 231.714840f);
        path.Line(64.140625f, 228.535160f);
        path.Close();
        path.Move(118.060550f, 229.810550f);
        path.Line(117.980450f, 230.064450f);
        path.Line(118.939430f, 230.369140f);
        path.Line(118.945430f, 230.369140f);
        path.Cubic(119.643840f, 230.512780f, 
                   120.371340f, 230.533440f, 
                   121.076290f, 230.402340f);
        path.Line(121.078290f, 230.402340f);
        path.Line(121.164190f, 230.384740f);
        path.Line(121.111490f, 230.124970f);
        path.Line(121.027490f, 230.142570f);
        path.Cubic(120.362050f, 230.266320f, 
                   119.673080f, 230.247160f, 
                   119.007960f, 230.111370f);
        path.Close();
        path.Move(97.054687f, 230.076170f);
        path.Line(97.050787f, 233.255860f);
        path.Line(97.316412f, 233.255860f);
        path.Line(97.318412f, 230.076170f);
        path.Close();
        path.Move(64.156250f, 234.894530f);
        path.Line(63.892578f, 234.896530f);
        path.Line(63.900378f, 238.076220f);
        path.Line(64.166003f, 238.074220f);
        path.Close();
        path.Move(97.046875f, 236.435550f);
        path.Line(97.044875f, 239.615230f);
        path.Line(97.308547f, 239.615230f);
        path.Line(97.312447f, 236.435550f);
        path.Close();
        path.Move(64.173828f, 241.253910f);
        path.Line(63.910156f, 241.255910f);
        path.Line(63.917956f, 244.435600f);
        path.Line(64.183581f, 244.435600f);
        path.Close();
        path.Move(97.041016f, 242.794920f);
        path.Line(97.037116f, 245.976560f);
        path.Line(97.302741f, 245.976560f);
        path.Line(97.306641f, 242.796870f);
        path.Close();
        path.Move(79.974609f, 247.183590f);
        path.Cubic(79.634518f, 247.097790f, 
                   79.265729f, 247.191590f, 
                   79.007812f, 247.429690f);
        path.Cubic(78.785457f, 247.630200f, 
                   78.668183f, 247.913340f, 
                   78.640625f, 248.197270f);
        path.Line(78.447266f, 249.679690f);
        path.Line(78.710937f, 249.712890f);
        path.Line(78.904297f, 248.226560f);
        path.Line(78.904297f, 248.222560f);
        path.Cubic(78.926387f, 247.994970f, 
                   79.022012f, 247.772370f, 
                   79.185547f, 247.624900f);
        path.Line(79.187547f, 247.624900f);
        path.Cubic(79.376570f, 247.450420f, 
                   79.660718f, 247.378340f, 
                   79.910203f, 247.441310f);
        path.Close();
        path.Move(63.925781f, 247.615230f);
        path.Line(63.935581f, 250.794920f);
        path.Line(64.199253f, 250.794920f);
        path.Line(64.191453f, 247.615230f);
        path.Close();
        path.Move(97.035156f, 249.156250f);
        path.Line(97.031256f, 252.335940f);
        path.Line(97.296881f, 252.335940f);
        path.Line(97.298881f, 249.156250f);
        path.Close();
        path.Move(81.109375f, 250.111330f);
        path.Line(80.847656f, 250.152330f);
        path.Line(81.339844f, 253.294910f);
        path.Line(81.601562f, 253.253910f);
        path.Close();
        path.Move(78.039062f, 252.832030f);
        path.Line(77.630859f, 255.986330f);
        path.Line(77.894531f, 256.019530f);
        path.Line(78.302734f, 252.867190f);
        path.Close();
        path.Move(63.943359f, 253.974610f);
        path.Line(63.953159f, 257.156250f);
        path.Line(64.216831f, 257.154250f);
        path.Line(64.209031f, 253.974560f);
        path.Close();
        path.Move(97.027344f, 255.515620f);
        path.Line(97.025344f, 258.695310f);
        path.Line(97.289015f, 258.695310f);
        path.Line(97.292915f, 255.515620f);
        path.Close();
        path.Move(82.095703f, 256.394530f);
        path.Line(81.833984f, 256.435530f);
        path.Line(82.326172f, 259.578100f);
        path.Line(82.587891f, 259.537100f);
        path.Close();
        path.Move(77.222656f, 259.140620f);
        path.Line(76.814453f, 262.292970f);
        path.Line(77.078125f, 262.328070f);
        path.Line(77.486328f, 259.173780f);
        path.Close();
        path.Move(64.226562f, 260.333980f);
        path.Line(63.960937f, 260.335980f);
        path.Line(63.968737f, 262.923870f);
        path.Line(63.707018f, 263.373090f);
        path.Line(63.935534f, 263.505900f);
        path.Line(64.232409f, 262.994180f);
        path.Close();
        path.Move(97.021484f, 261.875000f);
        path.Line(97.017584f, 265.056640f);
        path.Line(97.283209f, 265.056640f);
        path.Line(97.287109f, 261.876950f);
        path.Close();
        path.Move(83.080078f, 262.677730f);
        path.Line(82.818359f, 262.718730f);
        path.Line(83.312500f, 265.861310f);
        path.Line(83.574219f, 265.820310f);
        path.Close();
        path.Move(76.648437f, 265.474610f);
        path.Cubic(76.638837f, 265.656480f, 
                   76.618107f, 265.838910f, 
                   76.587887f, 266.019530f);
        path.Cubic(76.448679f, 266.856970f, 
                   76.081290f, 267.655460f, 
                   75.544918f, 268.314450f);
        path.Line(75.750000f, 268.480470f);
        path.Cubic(76.314893f, 267.786430f, 
                   76.702474f, 266.947620f, 
                   76.849609f, 266.062500f);
        path.Cubic(76.881299f, 265.873020f, 
                   76.903929f, 265.681190f, 
                   76.914059f, 265.488280f);
        path.Close();
        path.Move(62.109375f, 266.123050f);
        path.Line(60.509766f, 268.871090f);
        path.Line(60.740234f, 269.005860f);
        path.Line(62.337891f, 266.255860f);
        path.Close();
        path.Move(97.505859f, 268.212890f);
        path.Line(97.240234f, 268.238290f);
        path.Cubic(97.308004f, 268.960820f, 
                   97.382438f, 269.682740f, 
                   97.457031f, 270.404310f);
        path.Cubic(97.410951f, 270.718940f, 
                   97.345863f, 271.031030f, 
                   97.251953f, 271.332040f);
        path.Line(97.503906f, 271.410140f);
        path.Cubic(97.603836f, 271.089830f, 
                   97.672961f, 270.762590f, 
                   97.720703f, 270.433570f);
        path.Line(97.722703f, 270.415970f);
        path.Line(97.722703f, 270.400370f);
        path.Cubic(97.647313f, 269.671570f, 
                   97.574302f, 268.942080f, 
                   97.505906f, 268.212870f);
        path.Close();
        path.Move(83.119141f, 268.896480f);
        path.Cubic(82.790791f, 269.903040f, 
                   82.448861f, 270.904330f, 
                   82.103516f, 271.906250f);
        path.Line(82.353516f, 271.992150f);
        path.Cubic(82.699004f, 270.989820f, 
                   83.041969f, 269.987410f, 
                   83.371094f, 268.978480f);
        path.Close();
        path.Move(73.027344f, 270.056640f);
        path.Line(72.890625f, 270.099640f);
        path.Line(72.695312f, 270.152340f);
        path.Line(70.115234f, 271.367190f);
        path.Line(70.228516f, 271.607420f);
        path.Line(72.787109f, 270.402340f);
        path.Line(72.964844f, 270.353540f);
        path.Line(73.107422f, 270.308640f);
        path.Close();
        path.Move(59.646484f, 271.818360f);
        path.Line(59.382812f, 271.845660f);
        path.Cubic(59.433352f, 272.360740f, 
                   59.630930f, 272.853600f, 
                   59.929687f, 273.271440f);
        path.Cubic(60.270261f, 273.755310f, 
                   60.738363f, 274.147210f, 
                   61.277344f, 274.392540f);
        path.Line(61.386719f, 274.150350f);
        path.Cubic(60.891668f, 273.925010f, 
                   60.457742f, 273.564090f, 
                   60.144531f, 273.119100f);
        path.Cubic(59.870887f, 272.736860f, 
                   59.692186f, 272.284120f, 
                   59.646484f, 271.818320f);
        path.Close();
        path.Move(67.287109f, 272.708980f);
        path.Cubic(66.680703f, 272.738980f, 
                   66.181858f, 272.986150f, 
                   65.720703f, 273.269530f);
        path.Cubic(65.259548f, 273.552910f, 
                   64.831816f, 273.873430f, 
                   64.365234f, 274.078120f);
        path.Line(64.470703f, 274.320310f);
        path.Cubic(64.975197f, 274.098980f, 
                   65.412610f, 273.770630f, 
                   65.859375f, 273.496090f);
        path.Cubic(66.306140f, 273.221560f, 
                   66.758500f, 273.001460f, 
                   67.300781f, 272.974610f);
        path.Close();
        path.Move(95.611328f, 273.935550f);
        path.Cubic(95.339416f, 274.196550f, 
                   95.046490f, 274.436480f, 
                   94.740234f, 274.660160f);
        path.Cubic(94.203956f, 275.054650f, 
                   93.616041f, 275.384180f, 
                   93.031250f, 275.724610f);
        path.Line(93.166016f, 275.955080f);
        path.Cubic(93.748504f, 275.615990f, 
                   94.342840f, 275.280320f, 
                   94.896484f, 274.873050f);
        path.Cubic(95.210305f, 274.643840f, 
                   95.512649f, 274.397900f, 
                   95.794922f, 274.126950f);
        path.Close();
        path.Move(81.056641f, 274.908200f);
        path.Line(80.691406f, 275.945310f);
        path.Cubic(80.454642f, 276.588580f, 
                   80.173632f, 277.244560f, 
                   80.083984f, 277.958980f);
        path.Line(80.347656f, 277.992180f);
        path.Cubic(80.431276f, 277.325770f, 
                   80.701386f, 276.687450f, 
                   80.941406f, 276.035150f);
        path.Line(81.306641f, 274.996080f);
        path.Close();
        path.Move(90.287109f, 277.330080f);
        path.Line(87.541016f, 278.935550f);
        path.Line(87.673828f, 279.164060f);
        path.Line(90.419922f, 277.558590f);
        path.Close();
        path.Move(81.833984f, 280.417970f);
        path.Line(81.699219f, 280.646480f);
        path.Cubic(82.251972f, 280.970820f, 
                   82.899366f, 281.073060f, 
                   83.519531f, 281.042970f);
        path.Cubic(83.992081f, 281.023070f, 
                   84.457502f, 280.914040f, 
                   84.892578f, 280.736330f);
        path.Line(84.791016f, 280.492190f);
        path.Cubic(84.382156f, 280.659190f, 
                   83.947081f, 280.760770f, 
                   83.507812f, 280.779300f);
        path.Cubic(82.926051f, 280.807500f, 
                   82.329768f, 280.708900f, 
                   81.833984f, 280.417970f);
        path.Close();
    }

    private void SetPathData_path60_9(IRenderPath path)
    { // Label: 
        path.Move(83.262940f, 193.212160f);
        path.Line(83.262940f, 193.212160f);
        path.Cubic(83.262940f, 193.212160f, 
                   82.085830f, 192.239020f, 
                   80.634628f, 192.239020f);
        path.Cubic(79.183425f, 192.239020f, 
                   78.008440f, 193.212160f, 
                   78.008440f, 193.212160f);
        path.Line(78.008440f, 193.212160f);
        path.Cubic(78.266531f, 193.413469f, 
                   78.544971f, 193.587227f, 
                   78.839216f, 193.730600f);
        path.Cubic(79.395271f, 194.017133f, 
                   80.009248f, 194.173351f, 
                   80.634628f, 194.187420f);
        path.Cubic(81.283783f, 194.172236f, 
                   81.920415f, 194.005619f, 
                   82.493781f, 193.700850f);
        path.Cubic(82.765411f, 193.563287f, 
                   83.023012f, 193.399619f, 
                   83.262940f, 193.212160f);
        path.Close();
    }

    private void SetPathData_path2003_7(IRenderPath path)
    { // Label: 
        path.Move(83.262940f, 193.212160f);
        path.Line(83.262940f, 193.212160f);
        path.Line(78.008440f, 193.212160f);
        path.Line(78.008440f, 193.212160f);
        path.Cubic(78.266531f, 193.413470f, 
                   78.544972f, 193.587230f, 
                   78.839216f, 193.730600f);
        path.Cubic(79.395272f, 194.017130f, 
                   80.009248f, 194.173350f, 
                   80.634628f, 194.187420f);
        path.Cubic(81.283782f, 194.172220f, 
                   81.920414f, 194.005620f, 
                   82.493781f, 193.700850f);
        path.Cubic(82.765412f, 193.563290f, 
                   83.023011f, 193.399620f, 
                   83.262940f, 193.212160f);
        path.Close();
    }

    private void SetPathData_path62_6(IRenderPath path)
    { // Label: 
        path.Move(77.946250f, 183.972650f);
        path.Cubic(75.819433f, 185.812323f, 
                   72.664734f, 185.812323f, 
                   70.537917f, 183.972650f);
        path.Line(69.932021f, 184.419790f);
        path.Line(69.932021f, 184.443590f);
        path.Line(69.958481f, 184.467390f);
        path.Cubic(72.394220f, 186.625949f, 
                   76.058201f, 186.625949f, 
                   78.493940f, 184.467390f);
        path.Line(78.520400f, 184.443590f);
        path.Line(78.520400f, 184.409190f);
        path.Line(78.520400f, 184.409190f);
        path.Close();
    }

    private void SetPathData_path74_4(IRenderPath path)
    { // Label: 
        path.Move(280.570000f, 133.630000f);
        path.Cubic(271.230203f, 133.696163f, 
                   263.706157f, 141.309506f, 
                   263.750188f, 150.649434f);
        path.Cubic(263.794219f, 159.989361f, 
                   271.389712f, 167.531427f, 
                   280.729717f, 167.509528f);
        path.Cubic(290.069722f, 167.487630f, 
                   297.629766f, 159.910031f, 
                   297.630000f, 150.570000f);
        path.Cubic(297.596921f, 141.181135f, 
                   289.958865f, 133.596804f, 
                   280.570000f, 133.630000f);
        path.Close();
    }

    private void SetPathData_path76_6(IRenderPath path)
    { // Label: 
        path.Move(292.250000f, 150.570000f);
        path.Cubic(292.282407f, 155.264862f, 
                   289.479234f, 159.515487f, 
                   285.151014f, 161.334632f);
        path.Cubic(280.822795f, 163.153778f, 
                   275.824665f, 162.182031f, 
                   272.493340f, 158.873700f);
        path.Cubic(269.162015f, 155.565370f, 
                   268.155672f, 150.574091f, 
                   269.944796f, 146.233375f);
        path.Cubic(271.733919f, 141.892659f, 
                   275.965027f, 139.060112f, 
                   280.660000f, 139.060000f);
        path.Cubic(287.038905f, 139.037870f, 
                   292.227947f, 144.191095f, 
                   292.250000f, 150.570000f);
        path.Close();
    }

    private void SetPathData_path78_8(IRenderPath path)
    { // Label: 
        path.Move(286.590000f, 150.570000f);
        path.Cubic(286.606203f, 152.972035f, 
                   285.171723f, 155.146574f, 
                   282.957166f, 156.077042f);
        path.Cubic(280.742609f, 157.007510f, 
                   278.185478f, 156.510085f, 
                   276.481206f, 154.817309f);
        path.Cubic(274.776934f, 153.124533f, 
                   274.262213f, 150.570827f, 
                   275.177672f, 148.350023f);
        path.Cubic(276.093130f, 146.129219f, 
                   278.257911f, 144.680055f, 
                   280.660000f, 144.680000f);
        path.Cubic(283.924011f, 144.668936f, 
                   286.578973f, 147.305989f, 
                   286.590000f, 150.570000f);
        path.Close();
    }

    private void SetPathData_path80_7(IRenderPath path)
    { // Label: 
        path.Move(288.370000f, 145.460000f);
        path.Cubic(288.382156f, 146.975360f, 
                   287.478681f, 148.348280f, 
                   286.082146f, 148.936625f);
        path.Cubic(284.685610f, 149.524970f, 
                   283.072073f, 149.212439f, 
                   281.996212f, 148.145207f);
        path.Cubic(280.920350f, 147.077975f, 
                   280.594834f, 145.467008f, 
                   281.171913f, 144.065779f);
        path.Cubic(281.748992f, 142.664551f, 
                   283.114592f, 141.750049f, 
                   284.630000f, 141.750000f);
        path.Cubic(285.618335f, 141.744683f, 
                   286.568160f, 142.132889f, 
                   287.269837f, 142.828938f);
        path.Cubic(287.971514f, 143.524987f, 
                   288.367357f, 144.471654f, 
                   288.370000f, 145.460000f);
        path.Close();
    }

    private void SetPathData_path4287_3(IRenderPath path)
    { // Label: 
        path.Move(294.432770f, 150.552990f);
        path.Cubic(294.471275f, 156.131293f, 
                   291.140624f, 161.181767f, 
                   285.997955f, 163.343225f);
        path.Cubic(280.855286f, 165.504683f, 
                   274.916648f, 164.350082f, 
                   270.958461f, 160.419217f);
        path.Cubic(267.000273f, 156.488353f, 
                   265.804564f, 150.557855f, 
                   267.930348f, 145.400338f);
        path.Cubic(270.056132f, 140.242820f, 
                   275.083414f, 136.877265f, 
                   280.661850f, 136.877130f);
        path.Cubic(288.241088f, 136.850833f, 
                   294.406566f, 142.973752f, 
                   294.432770f, 150.552990f);
        path.Close();
    }

    private void SetPathData_path4289_9(IRenderPath path)
    { // Label: 
        path.Move(279.968750f, 136.468750f);
        path.Cubic(278.807410f, 136.523050f, 
                   277.650210f, 136.705700f, 
                   276.535160f, 137.037110f);
        path.Cubic(276.648940f, 137.514920f, 
                   276.707620f, 138.075990f, 
                   277.298650f, 137.707070f);
        path.Cubic(278.185710f, 137.484580f, 
                   279.096250f, 137.355820f, 
                   280.009770f, 137.316410f);
        path.Cubic(279.996070f, 137.033860f, 
                   279.982370f, 136.751300f, 
                   279.968770f, 136.468750f);
        path.Close();
        path.Move(283.441410f, 136.716800f);
        path.Cubic(283.323600f, 137.200110f, 
                   283.133090f, 137.719220f, 
                   283.824100f, 137.668940f);
        path.Cubic(284.710460f, 137.879200f, 
                   285.573720f, 138.185410f, 
                   286.396480f, 138.576170f);
        path.Cubic(286.672250f, 138.109510f, 
                   286.912680f, 137.647590f, 
                   286.191570f, 137.555440f);
        path.Cubic(285.307030f, 137.181820f, 
                   284.383190f, 136.903110f, 
                   283.441410f, 136.716800f);
        path.Close();
        path.Move(273.333980f, 138.439450f);
        path.Cubic(272.336920f, 139.040980f, 
                   271.416250f, 139.767560f, 
                   270.599610f, 140.597660f);
        path.Cubic(270.939330f, 140.984890f, 
                   271.270960f, 141.410590f, 
                   271.616870f, 140.790090f);
        path.Cubic(272.277620f, 140.174790f, 
                   273.002120f, 139.627170f, 
                   273.777340f, 139.164060f);
        path.Cubic(273.629550f, 138.922520f, 
                   273.481770f, 138.680990f, 
                   273.333980f, 138.439450f);
        path.Close();
        path.Move(289.703120f, 139.679690f);
        path.Cubic(289.319080f, 140.058970f, 
                   288.968440f, 140.426100f, 
                   289.617220f, 140.724610f);
        path.Cubic(290.278660f, 141.325620f, 
                   290.886210f, 141.987360f, 
                   291.414090f, 142.708980f);
        path.Cubic(291.823670f, 142.438730f, 
                   292.343900f, 142.175340f, 
                   291.758140f, 141.765600f);
        path.Cubic(291.147950f, 141.001900f, 
                   290.456820f, 140.302090f, 
                   289.703150f, 139.679690f);
        path.Close();
        path.Move(268.474610f, 143.361330f);
        path.Cubic(267.883100f, 144.363390f, 
                   267.409450f, 145.435650f, 
                   267.070310f, 146.548830f);
        path.Cubic(267.563630f, 146.745640f, 
                   268.049590f, 146.945600f, 
                   268.068360f, 146.224610f);
        path.Cubic(268.367950f, 145.380850f, 
                   268.748550f, 144.566300f, 
                   269.203120f, 143.794920f);
        path.Cubic(268.960280f, 143.650390f, 
                   268.717450f, 143.505860f, 
                   268.474610f, 143.361330f);
        path.Close();
        path.Move(293.806640f, 145.244140f);
        path.Cubic(293.367190f, 145.415160f, 
                   292.785860f, 145.515410f, 
                   293.212540f, 146.060050f);
        path.Cubic(293.526690f, 146.923570f, 
                   293.750980f, 147.820230f, 
                   293.876950f, 148.730470f);
        path.Cubic(294.373770f, 148.686870f, 
                   294.946930f, 148.691970f, 
                   294.626950f, 148.048830f);
        path.Cubic(294.449830f, 147.089090f, 
                   294.176950f, 146.147260f, 
                   293.806640f, 145.244140f);
        path.Close();
        path.Move(266.460940f, 149.980470f);
        path.Cubic(266.400040f, 151.144840f, 
                   266.476540f, 152.317460f, 
                   266.707030f, 153.460940f);
        path.Cubic(267.160090f, 153.370540f, 
                   267.776350f, 153.399240f, 
                   267.445310f, 152.775390f);
        path.Cubic(267.302460f, 151.867010f, 
                   267.258120f, 150.943420f, 
                   267.308590f, 150.025390f);
        path.Cubic(267.026040f, 150.010390f, 
                   266.743490f, 149.995490f, 
                   266.460940f, 149.980490f);
        path.Close();
        path.Move(294.009770f, 150.552730f);
        path.Cubic(294.012770f, 151.649370f, 
                   293.904420f, 152.748710f, 
                   293.650390f, 153.816410f);
        path.Cubic(294.149380f, 153.984570f, 
                   294.660960f, 154.147350f, 
                   294.598700f, 153.431330f);
        path.Cubic(294.779040f, 152.483910f, 
                   294.861400f, 151.518850f, 
                   294.857420f, 150.554690f);
        path.Cubic(294.574870f, 150.554040f, 
                   294.292320f, 150.553690f, 
                   294.009770f, 150.552690f);
        path.Close();
        path.Move(268.580080f, 156.396480f);
        path.Cubic(268.128610f, 156.586350f, 
                   267.570920f, 156.752230f, 
                   268.067760f, 157.259020f);
        path.Cubic(268.530340f, 158.125190f, 
                   269.087100f, 158.940190f, 
                   269.716800f, 159.693360f);
        path.Cubic(270.118460f, 159.391250f, 
                   270.589760f, 159.103560f, 
                   270.011300f, 158.706870f);
        path.Cubic(269.457750f, 157.987940f, 
                   268.974080f, 157.214050f, 
                   268.580080f, 156.396480f);
        path.Close();
        path.Move(292.509770f, 156.886720f);
        path.Cubic(292.003130f, 157.855990f, 
                   291.367360f, 158.757840f, 
                   290.634770f, 159.568360f);
        path.Cubic(290.963950f, 159.871480f, 
                   291.311450f, 160.410180f, 
                   291.588670f, 159.764380f);
        path.Cubic(292.232390f, 159.000330f, 
                   292.795350f, 158.167920f, 
                   293.259770f, 157.283200f);
        path.Cubic(293.009770f, 157.151040f, 
                   292.759770f, 157.018880f, 
                   292.509770f, 156.886720f);
        path.Close();
        path.Move(272.746090f, 161.406250f);
        path.Cubic(272.421550f, 161.791070f, 
                   272.029000f, 162.193800f, 
                   272.704890f, 162.420470f);
        path.Cubic(273.508230f, 162.974370f, 
                   274.368750f, 163.444850f, 
                   275.269500f, 163.820310f);
        path.Cubic(275.438480f, 163.402700f, 
                   275.812800f, 162.905650f, 
                   275.130000f, 162.832170f);
        path.Cubic(274.287970f, 162.442610f, 
                   273.488230f, 161.962860f, 
                   272.746060f, 161.406250f);
        path.Close();
        path.Move(288.144530f, 161.710940f);
        path.Cubic(287.232510f, 162.318440f, 
                   286.248820f, 162.819080f, 
                   285.218750f, 163.193360f);
        path.Cubic(285.369590f, 163.637040f, 
                   285.460400f, 164.230770f, 
                   286.004210f, 163.798060f);
        path.Cubic(286.920780f, 163.427040f, 
                   287.798300f, 162.960400f, 
                   288.621090f, 162.412110f);
        path.Cubic(288.462240f, 162.178390f, 
                   288.303380f, 161.944660f, 
                   288.144530f, 161.710940f);
        path.Close();
        path.Move(278.750000f, 163.896480f);
        path.Cubic(278.664200f, 164.368290f, 
                   278.478290f, 164.927800f, 
                   279.167590f, 164.800410f);
        path.Cubic(280.149020f, 164.899410f, 
                   281.140620f, 164.892110f, 
                   282.121090f, 164.785110f);
        path.Cubic(282.115090f, 164.231120f, 
                   282.077190f, 163.735910f, 
                   281.402200f, 163.996740f);
        path.Cubic(280.517780f, 164.051040f, 
                   279.627520f, 164.021140f, 
                   278.750000f, 163.896430f);
        path.Close();
    }

    private void SetPathData_path4387_6(IRenderPath path)
    { // Label: 
        path.Move(287.707710f, 150.552990f);
        path.Cubic(287.726963f, 153.407021f, 
                   286.022555f, 155.990749f, 
                   283.391281f, 157.096306f);
        path.Cubic(280.760006f, 158.201863f, 
                   277.721693f, 157.610838f, 
                   275.696724f, 155.599529f);
        path.Cubic(273.671755f, 153.588220f, 
                   273.060178f, 150.553977f, 
                   274.147900f, 147.915279f);
        path.Cubic(275.235622f, 145.276582f, 
                   277.807754f, 143.554725f, 
                   280.661850f, 143.554660f);
        path.Cubic(284.540055f, 143.541514f, 
                   287.694606f, 146.674785f, 
                   287.707710f, 150.552990f);
        path.Close();
    }

    private void SetPathData_path4389_4(IRenderPath path)
    { // Label: 
        path.Move(280.662110f, 143.148440f);
        path.Cubic(280.381740f, 143.150440f, 
                   280.100920f, 143.161540f, 
                   279.822270f, 143.193340f);
        path.Cubic(279.850270f, 143.462220f, 
                   279.878270f, 143.731100f, 
                   279.906270f, 143.999980f);
        path.Cubic(280.924300f, 143.893740f, 
                   281.967890f, 144.000820f, 
                   282.931660f, 144.351540f);
        path.Cubic(283.020860f, 144.095680f, 
                   283.110050f, 143.839820f, 
                   283.199240f, 143.583960f);
        path.Cubic(282.387310f, 143.292820f, 
                   281.524600f, 143.145390f, 
                   280.662130f, 143.148420f);
        path.Close();
        path.Move(276.611330f, 144.320310f);
        path.Cubic(275.647420f, 144.942340f, 
                   274.838020f, 145.798290f, 
                   274.257810f, 146.787110f);
        path.Cubic(274.489580f, 146.927730f, 
                   274.721350f, 147.068360f, 
                   274.953120f, 147.208980f);
        path.Cubic(275.467180f, 146.328430f, 
                   276.186130f, 145.566240f, 
                   277.041020f, 145.009770f);
        path.Cubic(276.897790f, 144.779950f, 
                   276.754560f, 144.550130f, 
                   276.611330f, 144.320310f);
        path.Close();
        path.Move(286.060550f, 145.449220f);
        path.Cubic(285.863280f, 145.634770f, 
                   285.666020f, 145.820310f, 
                   285.468750f, 146.005860f);
        path.Cubic(286.175260f, 146.742760f, 
                   286.705930f, 147.646060f, 
                   287.007810f, 148.621090f);
        path.Cubic(287.266930f, 148.542990f, 
                   287.526040f, 148.464840f, 
                   287.785160f, 148.386720f);
        path.Cubic(287.449150f, 147.291180f, 
                   286.852150f, 146.277490f, 
                   286.060550f, 145.449220f);
        path.Close();
        path.Move(273.222660f, 150.029300f);
        path.Cubic(273.124860f, 151.174980f, 
                   273.299560f, 152.344600f, 
                   273.738280f, 153.408200f);
        path.Cubic(273.988280f, 153.304030f, 
                   274.238280f, 153.199870f, 
                   274.488280f, 153.095700f);
        path.Cubic(274.099650f, 152.154760f, 
                   273.948580f, 151.121000f, 
                   274.031250f, 150.107420f);
        path.Cubic(273.761720f, 150.081420f, 
                   273.492190f, 150.055320f, 
                   273.222660f, 150.029320f);
        path.Close();
        path.Move(287.300780f, 150.552730f);
        path.Cubic(287.311580f, 151.575100f, 
                   287.095240f, 152.602240f, 
                   286.648440f, 153.523440f);
        path.Cubic(286.892580f, 153.640630f, 
                   287.136720f, 153.757810f, 
                   287.380860f, 153.875000f);
        path.Cubic(287.879910f, 152.845070f, 
                   288.124820f, 151.697940f, 
                   288.113280f, 150.554690f);
        path.Cubic(287.842450f, 150.554040f, 
                   287.571610f, 150.553690f, 
                   287.300780f, 150.552690f);
        path.Close();
        path.Move(276.259770f, 155.572270f);
        path.Cubic(276.078130f, 155.772790f, 
                   275.896480f, 155.973310f, 
                   275.714840f, 156.173830f);
        path.Cubic(276.568040f, 156.940070f, 
                   277.596950f, 157.517680f, 
                   278.707030f, 157.812500f);
        path.Cubic(278.777330f, 157.551430f, 
                   278.847660f, 157.290370f, 
                   278.917970f, 157.029300f);
        path.Cubic(277.932290f, 156.763600f, 
                   277.019060f, 156.252530f, 
                   276.259770f, 155.572270f);
        path.Close();
        path.Move(284.718750f, 155.863280f);
        path.Cubic(283.906480f, 156.484710f, 
                   282.949140f, 156.913990f, 
                   281.947270f, 157.117190f);
        path.Cubic(282.003270f, 157.382160f, 
                   282.059240f, 157.647140f, 
                   282.115230f, 157.912110f);
        path.Cubic(283.236390f, 157.685350f, 
                   284.305030f, 157.201130f, 
                   285.214840f, 156.507810f);
        path.Cubic(285.049480f, 156.292970f, 
                   284.884110f, 156.078120f, 
                   284.718750f, 155.863280f);
        path.Close();
    }

    private void SetPathData_path105(IRenderPath path)
    { // Label: safe
        path.Move(60.398083f, 201.366350f);
        path.Cubic(55.230215f, 203.584140f, 
                   49.341132f, 200.499500f, 
                   48.198786f, 194.994730f);
        path.Cubic(47.053538f, 189.475960f, 
                   51.253513f, 184.308790f, 
                   56.894999f, 184.325860f);
        path.Cubic(58.099523f, 184.322860f, 
                   59.291594f, 184.568230f, 
                   60.398083f, 185.044210f);
        path.Line(77.553666f, 193.246290f);
        path.Close();
    }

    private void SetPathData_path99(IRenderPath path)
    { // Label: low
        path.Move(73.464514f, 195.123510f);
        path.Cubic(72.384931f, 195.586740f, 
                   70.881799f, 194.493130f, 
                   70.827579f, 193.431680f);
        path.Cubic(70.768549f, 192.276040f, 
                   71.410994f, 191.193780f, 
                   72.656873f, 191.192700f);
        path.Cubic(72.934573f, 191.190700f, 
                   73.209401f, 191.247200f, 
                   73.464514f, 191.356850f);
        path.Line(77.420643f, 193.246290f);
        path.Close();
    }

    private void SetPathData_path1097(IRenderPath path)
    { // Label: absmin
        path.Move(77.115185f, 193.454360f);
        path.Cubic(76.951623f, 193.521660f, 
                   76.825342f, 193.423860f, 
                   76.792975f, 193.303560f);
        path.Cubic(76.761045f, 193.184930f, 
                   76.820495f, 193.044420f, 
                   77.025668f, 193.018680f);
        path.Cubic(77.056448f, 193.018460f, 
                   77.086908f, 193.024680f, 
                   77.115188f, 193.036880f);
        path.Line(77.553666f, 193.246290f);
        path.Close();
    }

    private void SetPathData_path7845(IRenderPath path)
    { // Label: high
        path.Move(29.981951f, 215.340740f);
        path.Cubic(23.810790f, 217.989090f, 
                   9.746006f, 210.622100f, 
                   7.017763f, 197.475170f);
        path.Cubic(4.282589f, 184.294790f, 
                   14.313309f, 171.954140f, 
                   27.786762f, 171.994910f);
        path.Cubic(30.663504f, 171.988910f, 
                   33.510504f, 172.573760f, 
                   36.153111f, 173.710530f);
        path.Line(77.125462f, 193.299400f);
        path.Close();
    }

    private void SetPathData_use7671(IRenderPath path)
    { // Label: Line
        path.Move(60.454679f, 201.485924f);
        path.Line(77.861623f, 193.246890f);
        path.Line(60.455145f, 184.924858f);
        path.Line(60.450359f, 184.922685f);
        path.Cubic(59.331478f, 184.441375f, 
                   58.112834f, 184.190535f, 
                   56.894670f, 184.193569f);
        path.Cubic(51.190717f, 184.176308f, 
                   46.911234f, 189.441295f, 
                   48.069254f, 195.021610f);
        path.Cubic(49.224315f, 200.587653f, 
                   55.224568f, 203.730522f, 
                   60.450255f, 201.487920f);
        path.Line(60.454679f, 201.485924f);
        path.Close();
        path.Move(60.345911f, 201.244780f);
        path.Cubic(55.235862f, 203.437758f, 
                   49.457949f, 200.411347f, 
                   48.328318f, 194.967850f);
        path.Cubic(47.195842f, 189.510625f, 
                   51.316309f, 184.441272f, 
                   56.894599f, 184.458151f);
        path.Cubic(58.086212f, 184.455185f, 
                   59.251710f, 184.695085f, 
                   60.345807f, 185.165735f);
        path.Line(77.245709f, 193.245690f);
        path.Line(60.343689f, 201.245734f);
        path.Close();
    }

    private void SetPathData_path5273(IRenderPath path)
    { // Label: normal
        path.Move(86.436732f, 208.044450f);
        path.Cubic(93.196839f, 208.044450f, 
                   97.197339f, 215.876110f, 
                   97.197339f, 220.553950f);
        path.Line(97.197339f, 230.854180f);
        path.Cubic(97.197339f, 232.341740f, 
                   95.991437f, 233.547640f, 
                   94.503881f, 233.547640f);
        path.Line(88.759777f, 233.547640f);
        path.Cubic(85.521277f, 233.547640f, 
                   82.042003f, 230.922970f, 
                   82.042003f, 227.684470f);
        path.Line(82.042003f, 213.920840f);
        path.Cubic(82.042003f, 210.669110f, 
                   83.198232f, 208.044450f, 
                   86.436732f, 208.044450f);
        path.Close();
        path.Move(63.973606f, 220.553950f);
        path.Line(63.973606f, 230.854180f);
        path.Cubic(63.979406f, 232.341130f, 
                   65.188044f, 233.542630f, 
                   66.675002f, 233.539700f);
        path.Line(72.416461f, 233.539700f);
        path.Cubic(75.654961f, 233.539700f, 
                   79.136879f, 230.915030f, 
                   79.136879f, 227.676530f);
        path.Line(79.136879f, 213.899680f);
        path.Cubic(79.131579f, 210.661180f, 
                   77.975358f, 208.044450f, 
                   74.736857f, 208.044450f);
        path.Cubic(67.976752f, 208.044450f, 
                   63.973606f, 215.876110f, 
                   63.973606f, 220.553950f);
        path.Close();
    }

    private void SetPathData_path5277(IRenderPath path)
    { // Label: outside
        path.Move(89.986816f, 198.198970f);
        path.Cubic(101.035500f, 200.256960f, 
                   107.241800f, 211.790560f, 
                   107.276100f, 220.420190f);
        path.Line(107.322900f, 232.188610f);
        path.Cubic(107.229400f, 237.977540f, 
                   100.202240f, 243.684910f, 
                   95.474013f, 243.630590f);
        path.Line(92.594847f, 243.597490f);
        path.Cubic(87.391823f, 243.537690f, 
                   83.894079f, 243.624390f, 
                   80.752150f, 241.367870f);
        path.Line(80.752150f, 199.282790f);
        path.Cubic(82.653427f, 198.280740f, 
                   84.925222f, 197.348490f, 
                   89.986846f, 198.198940f);
        path.Close();
        path.Move(53.894839f, 220.420190f);
        path.Line(53.894839f, 231.908210f);
        path.Cubic(53.894839f, 236.638370f, 
                   59.611261f, 243.523770f, 
                   65.438143f, 243.593930f);
        path.Line(66.335672f, 243.584930f);
        path.Cubic(71.538786f, 243.533730f, 
                   76.033204f, 244.289850f, 
                   80.746095f, 241.355310f);
        path.Line(80.746095f, 199.249540f);
        path.Cubic(75.453011f, 197.130010f, 
                   72.589821f, 198.015910f, 
                   71.188380f, 198.289000f);
        path.Cubic(61.144602f, 199.810360f, 
                   53.894839f, 211.930640f, 
                   53.894839f, 220.420020f);
        path.Close();
    }

    private void SetPathData_path6201(IRenderPath path)
    { // Label: inside
        path.Move(86.183045f, 211.655220f);
        path.Cubic(91.028947f, 211.655220f, 
                   94.691784f, 217.269250f, 
                   94.691784f, 220.622500f);
        path.Line(94.691784f, 228.006100f);
        path.Cubic(94.691784f, 229.072440f, 
                   93.032220f, 230.825540f, 
                   91.965883f, 230.825540f);
        path.Line(87.848292f, 230.825540f);
        path.Cubic(85.526812f, 230.825540f, 
                   83.032737f, 228.055410f, 
                   83.032737f, 225.733930f);
        path.Line(83.032737f, 215.867640f);
        path.Cubic(83.032737f, 213.536680f, 
                   83.861565f, 211.655220f, 
                   86.183045f, 211.655220f);
        path.Close();
        path.Move(67.040432f, 220.622500f);
        path.Line(67.040432f, 228.006100f);
        path.Cubic(67.044632f, 229.072000f, 
                   68.191620f, 230.775180f, 
                   69.257528f, 230.773080f);
        path.Line(73.373225f, 230.773080f);
        path.Cubic(75.694704f, 230.773080f, 
                   78.190675f, 228.049720f, 
                   78.190675f, 225.728240f);
        path.Line(78.190675f, 215.852470f);
        path.Cubic(78.186875f, 213.530990f, 
                   77.358053f, 211.655220f, 
                   75.036572f, 211.655220f);
        path.Cubic(70.190672f, 211.655220f, 
                   67.040432f, 217.269250f, 
                   67.040432f, 220.622500f);
        path.Close();
    }

    private void SetPathData_path7273(IRenderPath path)
    { // Label: minimum
        path.Move(86.752764f, 213.693450f);
        path.Cubic(90.568214f, 213.693450f, 
                   93.452170f, 218.113690f, 
                   93.452170f, 220.753890f);
        path.Line(93.452170f, 226.567410f);
        path.Cubic(93.452170f, 227.407000f, 
                   92.145503f, 228.787310f, 
                   91.305916f, 228.787310f);
        path.Line(88.063906f, 228.787310f);
        path.Cubic(86.236076f, 228.787310f, 
                   84.272351f, 226.606230f, 
                   84.272351f, 224.778400f);
        path.Line(84.272351f, 217.010120f);
        path.Cubic(84.272351f, 215.174830f, 
                   84.924934f, 213.693450f, 
                   86.752764f, 213.693450f);
        path.Close();
        path.Move(68.222604f, 220.747960f);
        path.Line(68.222604f, 226.565910f);
        path.Cubic(68.225904f, 227.405790f, 
                   69.129690f, 228.747820f, 
                   69.969578f, 228.746160f);
        path.Line(73.212565f, 228.746160f);
        path.Cubic(75.041788f, 228.746160f, 
                   77.008503f, 226.600280f, 
                   77.008503f, 224.771050f);
        path.Line(77.008503f, 216.989380f);
        path.Cubic(77.005503f, 215.160160f, 
                   76.352433f, 213.682140f, 
                   74.523209f, 213.682140f);
        path.Cubic(70.704854f, 213.682140f, 
                   68.222604f, 218.105740f, 
                   68.222604f, 220.747960f);
        path.Close();
    }

    private void SetPathData_path26136(IRenderPath path)
    { // Label: 
        path.Move(87.135229f, 212.466190f);
        path.Line(84.550249f, 210.918380f);
        path.Line(86.666916f, 210.465940f);
        path.Cubic(87.244172f, 210.246370f, 
                   87.196634f, 209.414460f, 
                   86.598126f, 209.262090f);
        path.Cubic(86.450595f, 209.228790f, 
                   86.299539f, 209.213690f, 
                   86.148335f, 209.217090f);
        path.Line(82.785481f, 208.976320f);
        path.Line(82.745791f, 208.994820f);
        path.Line(82.745791f, 206.033100f);
        path.Cubic(81.926626f, 208.365750f, 
                   79.046444f, 207.936260f, 
                   78.541562f, 206.143510f);
        path.Line(78.512462f, 208.563500f);
        path.Line(76.861462f, 210.293870f);
        path.Line(73.443045f, 209.132350f);
        path.Cubic(73.286818f, 209.086650f, 
                   73.124125f, 209.066950f, 
                   72.961504f, 209.074150f);
        path.Cubic(72.759749f, 209.073250f, 
                   72.575037f, 209.187150f, 
                   72.485254f, 209.367830f);
        path.Cubic(72.297399f, 209.706500f, 
                   72.506424f, 210.108670f, 
                   72.842441f, 210.312400f);
        path.Line(75.488274f, 211.849620f);
        path.Line(73.059399f, 214.397560f);
        path.Cubic(72.571747f, 214.748100f, 
                   72.818663f, 215.517900f, 
                   73.419233f, 215.519400f);
        path.Cubic(73.547989f, 215.519150f, 
                   73.673575f, 215.479400f, 
                   73.779066f, 215.405620f);
        path.Line(76.218524f, 213.857810f);
        path.Line(75.800483f, 215.649040f);
        path.Cubic(75.718833f, 215.981340f, 
                   75.921035f, 216.317150f, 
                   76.252920f, 216.400460f);
        path.Cubic(76.446960f, 216.449060f, 
                   76.652511f, 216.399670f, 
                   76.803253f, 216.268170f);
        path.Cubic(76.901873f, 216.185370f, 
                   76.971411f, 216.073180f, 
                   77.001691f, 215.948020f);
        path.Line(78.684441f, 212.296770f);
        path.Line(79.742774f, 211.627370f);
        path.Cubic(80.040959f, 211.485390f, 
                   80.361388f, 211.395890f, 
                   80.689983f, 211.362790f);
        path.Cubic(80.992232f, 211.382190f, 
                   81.288691f, 211.454790f, 
                   81.565753f, 211.577100f);
        path.Line(86.185378f, 213.527080f);
        path.Cubic(86.374437f, 213.606980f, 
                   86.578091f, 213.646680f, 
                   86.783337f, 213.643500f);
        path.Cubic(87.002946f, 213.627800f, 
                   87.200801f, 213.505150f, 
                   87.312503f, 213.315420f);
        path.Cubic(87.476968f, 213.028260f, 
                   87.400833f, 212.663490f, 
                   87.135233f, 212.466100f);
        path.Close();
    }

    private void SetPathData_use5195(IRenderPath path)
    { // Label: Line
        path.Move(86.436732f, 207.911950f);
        path.Cubic(83.111815f, 207.911950f, 
                   81.909503f, 210.641218f, 
                   81.909503f, 213.920840f);
        path.Line(81.909503f, 227.684470f);
        path.Cubic(81.909503f, 230.988989f, 
                   85.476905f, 233.680140f, 
                   88.759777f, 233.680140f);
        path.Line(94.503881f, 233.680140f);
        path.Cubic(96.046320f, 233.680140f, 
                   97.329839f, 232.396623f, 
                   97.329839f, 230.854180f);
        path.Line(97.329839f, 220.553950f);
        path.Cubic(97.329839f, 215.844228f, 
                   93.277942f, 207.911950f, 
                   86.436732f, 207.911950f);
        path.Close();
        path.Move(86.436732f, 208.176950f);
        path.Cubic(93.115736f, 208.176950f, 
                   97.064839f, 215.907992f, 
                   97.064839f, 220.553950f);
        path.Line(97.064839f, 230.854180f);
        path.Cubic(97.064839f, 232.286857f, 
                   95.936554f, 233.415140f, 
                   94.503881f, 233.415140f);
        path.Line(88.759777f, 233.415140f);
        path.Cubic(85.565649f, 233.415140f, 
                   82.174503f, 230.856951f, 
                   82.174503f, 227.684470f);
        path.Line(82.174503f, 213.920840f);
        path.Cubic(82.174503f, 210.697002f, 
                   83.284649f, 208.176950f, 
                   86.436732f, 208.176950f);
        path.Close();
        path.Move(64.106106f, 220.553950f);
        path.Cubic(64.106106f, 215.908011f, 
                   68.057831f, 208.176950f, 
                   74.736857f, 208.176950f);
        path.Cubic(77.889046f, 208.176950f, 
                   78.999125f, 210.689252f, 
                   79.004379f, 213.899897f);
        path.Line(79.004379f, 227.676530f);
        path.Cubic(79.004379f, 230.848981f, 
                   75.610616f, 233.407200f, 
                   72.416461f, 233.407200f);
        path.Line(66.675002f, 233.407200f);
        path.Line(66.674741f, 233.407200f);
        path.Cubic(65.242589f, 233.410022f, 
                   64.111691f, 232.285803f, 
                   64.106105f, 230.853663f);
        path.Line(64.106106f, 220.553950f);
        path.Close();
        path.Move(63.841106f, 220.553950f);
        path.Line(63.841106f, 230.854180f);
        path.Line(63.841107f, 230.854697f);
        path.Cubic(63.847121f, 232.396457f, 
                   65.133499f, 233.675238f, 
                   66.675263f, 233.672200f);
        path.Line(72.416461f, 233.672200f);
        path.Cubic(75.699306f, 233.672200f, 
                   79.269379f, 230.981079f, 
                   79.269379f, 227.676530f);
        path.Line(79.269379f, 213.899680f);
        path.Line(79.269379f, 213.899463f);
        path.Cubic(79.264033f, 210.633108f, 
                   78.061670f, 207.911950f, 
                   74.736857f, 207.911950f);
        path.Cubic(67.895673f, 207.911950f, 
                   63.841106f, 215.844209f, 
                   63.841106f, 220.553950f);
        path.Close();
    }

    private void SetPathData_use2968(IRenderPath path)
    { // Label: dashed line
        path.Move(86.433594f, 207.861330f);
        path.Line(86.281250f, 207.863330f);
        path.Line(86.251950f, 207.865330f);
        path.Line(86.265620f, 208.230570f);
        path.Line(86.291010f, 208.228570f);
        path.Line(86.437494f, 208.226570f);
        path.Cubic(86.438142f, 208.226570f, 
                   86.438794f, 208.226570f, 
                   86.439494f, 208.226570f);
        path.Cubic(87.153343f, 208.226560f, 
                   87.867436f, 208.317070f, 
                   88.556682f, 208.500010f);
        path.Line(88.650432f, 208.148450f);
        path.Cubic(87.929002f, 207.956950f, 
                   87.182933f, 207.861150f, 
                   86.437541f, 207.861340f);
        path.Line(86.437541f, 208.105480f);
        path.Close();
        path.Move(74.332031f, 207.871330f);
        path.Cubic(73.586649f, 207.904230f, 
                   72.846112f, 208.036060f, 
                   72.134766f, 208.260010f);
        path.Line(72.244141f, 208.607660f);
        path.Cubic(72.925326f, 208.393210f, 
                   73.634455f, 208.268090f, 
                   74.347656f, 208.236570f);
        path.Close();
        path.Move(76.560547f, 208.195550f);
        path.Line(76.417969f, 208.531490f);
        path.Line(76.499999f, 208.566690f);
        path.Line(76.603515f, 208.615490f);
        path.Line(76.705077f, 208.666290f);
        path.Line(76.804687f, 208.718990f);
        path.Line(76.900387f, 208.777590f);
        path.Line(76.994137f, 208.836190f);
        path.Line(77.085937f, 208.898690f);
        path.Line(77.173827f, 208.965090f);
        path.Line(77.261717f, 209.033490f);
        path.Line(77.345697f, 209.103790f);
        path.Line(77.425777f, 209.177990f);
        path.Line(77.505857f, 209.254190f);
        path.Line(77.582027f, 209.332290f);
        path.Line(77.658197f, 209.414290f);
        path.Line(77.732417f, 209.500190f);
        path.Cubic(77.824897f, 209.611170f, 
                   77.910887f, 209.727050f, 
                   77.990229f, 209.847850f);
        path.Line(78.294917f, 209.648630f);
        path.Cubic(78.207157f, 209.515010f, 
                   78.112283f, 209.386610f, 
                   78.009761f, 209.263860f);
        path.Line(78.009761f, 209.261860f);
        path.Line(77.929681f, 209.170060f);
        path.Line(77.847651f, 209.080260f);
        path.Line(77.763671f, 208.994360f);
        path.Line(77.675781f, 208.910360f);
        path.Line(77.583981f, 208.828360f);
        path.Line(77.492181f, 208.750260f);
        path.Line(77.396481f, 208.674060f);
        path.Line(77.296871f, 208.601760f);
        path.Line(77.195308f, 208.531460f);
        path.Line(77.091793f, 208.465060f);
        path.Line(76.984371f, 208.402560f);
        path.Line(76.874996f, 208.342060f);
        path.Line(76.761715f, 208.285460f);
        path.Line(76.646480f, 208.232760f);
        path.Close();
        path.Move(84.074219f, 208.472900f);
        path.Line(83.978519f, 208.533400f);
        path.Line(83.876956f, 208.603700f);
        path.Line(83.777346f, 208.676000f);
        path.Line(83.681646f, 208.752200f);
        path.Line(83.587896f, 208.832300f);
        path.Line(83.498056f, 208.912400f);
        path.Line(83.410166f, 208.998300f);
        path.Line(83.326186f, 209.084200f);
        path.Line(83.244156f, 209.174100f);
        path.Line(83.244156f, 209.176100f);
        path.Cubic(83.162826f, 209.267900f, 
                   83.086218f, 209.362830f, 
                   83.013687f, 209.461260f);
        path.Cubic(82.849152f, 209.684900f, 
                   82.705316f, 209.923860f, 
                   82.583999f, 210.172190f);
        path.Line(82.912124f, 210.332350f);
        path.Cubic(83.024338f, 210.102650f, 
                   83.155842f, 209.883050f, 
                   83.306656f, 209.678050f);
        path.Cubic(83.372096f, 209.589250f, 
                   83.442852f, 209.502620f, 
                   83.515640f, 209.420240f);
        path.Line(83.517640f, 209.416240f);
        path.Line(83.591860f, 209.336140f);
        path.Line(83.668030f, 209.256040f);
        path.Line(83.748110f, 209.179840f);
        path.Line(83.830140f, 209.105640f);
        path.Line(83.914120f, 209.035340f);
        path.Line(84.000060f, 208.966940f);
        path.Line(84.087950f, 208.900540f);
        path.Line(84.179750f, 208.838040f);
        path.Line(84.271550f, 208.779440f);
        path.Close();
        path.Move(90.714844f, 208.982660f);
        path.Line(90.539062f, 209.302970f);
        path.Line(90.628902f, 209.351770f);
        path.Line(90.874996f, 209.498260f);
        path.Line(91.117183f, 209.648650f);
        path.Line(91.353512f, 209.808800f);
        path.Line(91.587887f, 209.974820f);
        path.Line(91.816402f, 210.148650f);
        path.Line(92.041012f, 210.326380f);
        path.Line(92.259762f, 210.511930f);
        path.Line(92.291012f, 210.541230f);
        path.Line(92.533199f, 210.267790f);
        path.Line(92.498039f, 210.236590f);
        path.Line(92.271476f, 210.045180f);
        path.Line(92.039054f, 209.859630f);
        path.Line(91.802726f, 209.679950f);
        path.Line(91.562492f, 209.508070f);
        path.Line(91.316398f, 209.344010f);
        path.Line(91.064445f, 209.185810f);
        path.Line(90.808586f, 209.035420f);
        path.Close();
        path.Move(70.105469f, 209.187740f);
        path.Line(69.857422f, 209.343990f);
        path.Line(69.611328f, 209.508050f);
        path.Line(69.369141f, 209.679930f);
        path.Line(69.132812f, 209.859610f);
        path.Line(68.900391f, 210.045160f);
        path.Line(68.673828f, 210.236570f);
        path.Line(68.451172f, 210.433830f);
        path.Line(68.341797f, 210.537350f);
        path.Line(68.589844f, 210.804930f);
        path.Line(68.697266f, 210.703360f);
        path.Line(68.912109f, 210.511960f);
        path.Line(69.132812f, 210.326410f);
        path.Line(69.357422f, 210.148680f);
        path.Line(69.585937f, 209.974850f);
        path.Line(69.818359f, 209.808830f);
        path.Line(70.056641f, 209.648680f);
        path.Line(70.298828f, 209.496330f);
        path.Close();
        path.Move(79.113281f, 211.738520f);
        path.Line(78.757812f, 211.812720f);
        path.Line(78.779292f, 211.920140f);
        path.Line(78.826162f, 212.185770f);
        path.Line(78.865222f, 212.459200f);
        path.Line(78.898422f, 212.736550f);
        path.Line(78.921862f, 213.019750f);
        path.Line(78.939442f, 213.308810f);
        path.Line(78.951162f, 213.601780f);
        path.Line(78.955062f, 213.900610f);
        path.Line(78.955062f, 213.953310f);
        path.Line(79.320296f, 213.953310f);
        path.Line(79.320296f, 213.898610f);
        path.Line(79.316396f, 213.593920f);
        path.Line(79.304676f, 213.291190f);
        path.Line(79.287096f, 212.994310f);
        path.Line(79.259756f, 212.699390f);
        path.Line(79.228506f, 212.412280f);
        path.Line(79.187486f, 212.127120f);
        path.Line(79.136706f, 211.849780f);
        path.Close();
        path.Move(94.066406f, 211.871330f);
        path.Line(93.781250f, 212.099850f);
        path.Line(93.853520f, 212.189650f);
        path.Line(94.031254f, 212.418170f);
        path.Line(94.205082f, 212.652540f);
        path.Line(94.373051f, 212.888870f);
        path.Line(94.537113f, 213.129110f);
        path.Line(94.695316f, 213.373250f);
        path.Line(94.847660f, 213.619340f);
        path.Line(94.996098f, 213.867390f);
        path.Line(95.003898f, 213.879090f);
        path.Line(95.320304f, 213.697450f);
        path.Line(95.312504f, 213.681850f);
        path.Line(95.160160f, 213.427940f);
        path.Line(95.001957f, 213.175990f);
        path.Line(94.839848f, 212.927940f);
        path.Line(94.671879f, 212.681850f);
        path.Line(94.500000f, 212.437500f);
        path.Line(94.322266f, 212.197270f);
        path.Line(94.138672f, 211.962890f);
        path.Close();
        path.Move(66.859375f, 212.185790f);
        path.Line(66.849575f, 212.197490f);
        path.Line(66.671841f, 212.437720f);
        path.Line(66.499966f, 212.681860f);
        path.Line(66.331997f, 212.927950f);
        path.Line(66.169888f, 213.176000f);
        path.Line(66.011685f, 213.427950f);
        path.Line(65.859341f, 213.681860f);
        path.Line(65.712857f, 213.939670f);
        path.Line(65.654267f, 214.045140f);
        path.Line(65.974579f, 214.220920f);
        path.Line(66.031219f, 214.117410f);
        path.Line(66.175750f, 213.867410f);
        path.Line(66.324188f, 213.619360f);
        path.Line(66.476531f, 213.373270f);
        path.Line(66.636688f, 213.129130f);
        path.Line(66.798797f, 212.888890f);
        path.Line(66.968719f, 212.652560f);
        path.Line(67.140594f, 212.418190f);
        path.Line(67.148394f, 212.410190f);
        path.Close();
        path.Move(81.964844f, 212.320550f);
        path.Line(81.949214f, 212.427970f);
        path.Line(81.916014f, 212.717040f);
        path.Line(81.890624f, 213.011960f);
        path.Line(81.873044f, 213.308830f);
        path.Line(81.873044f, 213.310830f);
        path.Cubic(81.852314f, 213.723570f, 
                   81.861244f, 214.130250f, 
                   81.859374f, 214.531530f);
        path.Line(82.224608f, 214.533530f);
        path.Cubic(82.226508f, 214.126710f, 
                   82.218508f, 213.725290f, 
                   82.238278f, 213.330410f);
        path.Line(82.238278f, 213.328410f);
        path.Line(82.255858f, 213.037400f);
        path.Line(82.279298f, 212.752240f);
        path.Line(82.310548f, 212.472950f);
        path.Line(82.326178f, 212.373350f);
        path.Close();
        path.Move(96.302734f, 215.679930f);
        path.Line(95.964844f, 215.820550f);
        path.Line(96.003904f, 215.910350f);
        path.Line(96.105467f, 216.168160f);
        path.Line(96.203127f, 216.427920f);
        path.Line(96.294927f, 216.685740f);
        path.Line(96.380867f, 216.943550f);
        path.Line(96.460947f, 217.199410f);
        path.Line(96.537117f, 217.455270f);
        path.Line(96.607427f, 217.709170f);
        path.Line(96.648447f, 217.871280f);
        path.Line(97.001963f, 217.781480f);
        path.Line(96.960943f, 217.615460f);
        path.Line(96.888673f, 217.355700f);
        path.Line(96.810543f, 217.093980f);
        path.Line(96.728513f, 216.830310f);
        path.Line(96.638673f, 216.566640f);
        path.Line(96.544923f, 216.302960f);
        path.Line(96.445313f, 216.037340f);
        path.Line(96.341798f, 215.773670f);
        path.Close();
        path.Move(64.718750f, 216.052970f);
        path.Line(64.626950f, 216.302970f);
        path.Line(64.531250f, 216.566650f);
        path.Line(64.443360f, 216.830320f);
        path.Line(64.361330f, 217.093990f);
        path.Line(64.283200f, 217.355710f);
        path.Line(64.210930f, 217.615470f);
        path.Line(64.144520f, 217.875240f);
        path.Line(64.083970f, 218.133050f);
        path.Line(64.076170f, 218.172150f);
        path.Line(64.431639f, 218.250250f);
        path.Line(64.439439f, 218.213150f);
        path.Line(64.499989f, 217.961200f);
        path.Line(64.564439f, 217.709240f);
        path.Line(64.634749f, 217.455340f);
        path.Line(64.708969f, 217.199480f);
        path.Line(64.790999f, 216.943620f);
        path.Line(64.876939f, 216.685810f);
        path.Line(64.968739f, 216.427990f);
        path.Line(65.060539f, 216.181900f);
        path.Close();
        path.Move(78.955078f, 216.142870f);
        path.Line(78.955078f, 218.332320f);
        path.Line(79.320312f, 218.332320f);
        path.Line(79.320312f, 216.142870f);
        path.Close();
        path.Move(81.859375f, 216.722950f);
        path.Line(81.859375f, 218.912400f);
        path.Line(82.224609f, 218.912400f);
        path.Line(82.224609f, 216.722950f);
        path.Close();
        path.Move(97.359375f, 219.972950f);
        path.Line(96.996094f, 219.996350f);
        path.Line(97.003894f, 220.117450f);
        path.Cubic(97.040164f, 220.787400f, 
                   96.972884f, 221.478860f, 
                   97.015614f, 222.185810f);
        path.Line(97.378895f, 222.162410f);
        path.Cubic(97.338485f, 221.493790f, 
                   97.405435f, 220.802760f, 
                   97.367175f, 220.096000f);
        path.Close();
        path.Move(63.792969f, 220.377240f);
        path.Line(63.790969f, 220.551070f);
        path.Line(64.035109f, 220.555070f);
        path.Line(63.790969f, 220.555070f);
        path.Line(63.790969f, 222.744520f);
        path.Line(64.156203f, 222.744520f);
        path.Line(64.156203f, 220.557020f);
        path.Line(64.156203f, 220.555020f);
        path.Line(64.158203f, 220.383140f);
        path.Close();
        path.Move(78.955078f, 220.521770f);
        path.Line(78.955078f, 222.713180f);
        path.Line(79.320312f, 222.713180f);
        path.Line(79.320312f, 220.521770f);
        path.Close();
        path.Move(81.859375f, 221.101850f);
        path.Line(81.859375f, 223.293260f);
        path.Line(82.224609f, 223.293260f);
        path.Line(82.224609f, 221.101850f);
        path.Close();
        path.Move(97.015625f, 224.363570f);
        path.Line(97.015625f, 226.554980f);
        path.Line(97.378906f, 226.554980f);
        path.Line(97.378906f, 224.363570f);
        path.Close();
        path.Move(78.955078f, 224.902630f);
        path.Line(78.955078f, 227.092090f);
        path.Line(79.320312f, 227.092090f);
        path.Line(79.320312f, 224.902630f);
        path.Close();
        path.Move(63.791016f, 224.933830f);
        path.Line(63.791016f, 227.123290f);
        path.Line(64.156250f, 227.123290f);
        path.Line(64.156250f, 224.933830f);
        path.Close();
        path.Move(81.859375f, 225.482660f);
        path.Line(81.859375f, 227.672110f);
        path.Line(82.224609f, 227.672110f);
        path.Line(82.224609f, 225.482660f);
        path.Close();
        path.Move(97.015625f, 228.744380f);
        path.Line(97.015625f, 230.851800f);
        path.Line(97.013625f, 230.929900f);
        path.Line(97.376906f, 230.937900f);
        path.Line(97.378906f, 230.857800f);
        path.Line(97.378906f, 228.744520f);
        path.Close();
        path.Move(78.685547f, 229.189690f);
        path.Line(78.675747f, 229.218990f);
        path.Line(78.624967f, 229.351800f);
        path.Line(78.570277f, 229.484610f);
        path.Line(78.509727f, 229.615470f);
        path.Line(78.447227f, 229.744380f);
        path.Line(78.380817f, 229.873290f);
        path.Line(78.310507f, 229.998290f);
        path.Line(78.238237f, 230.123290f);
        path.Line(78.160107f, 230.246330f);
        path.Line(78.080027f, 230.369380f);
        path.Line(77.996047f, 230.488520f);
        path.Line(77.908157f, 230.607660f);
        path.Line(77.818317f, 230.722900f);
        path.Line(77.724567f, 230.838130f);
        path.Line(77.626907f, 230.951410f);
        path.Line(77.593707f, 230.988510f);
        path.Line(77.865191f, 231.232650f);
        path.Line(77.902301f, 231.191650f);
        path.Line(78.003863f, 231.072510f);
        path.Line(78.103473f, 230.951410f);
        path.Line(78.199173f, 230.828360f);
        path.Line(78.292923f, 230.701410f);
        path.Line(78.380813f, 230.574460f);
        path.Line(78.466753f, 230.445550f);
        path.Line(78.548783f, 230.314690f);
        path.Line(78.628863f, 230.179930f);
        path.Line(78.703083f, 230.045160f);
        path.Line(78.773393f, 229.908440f);
        path.Line(78.841753f, 229.769770f);
        path.Line(78.904253f, 229.629150f);
        path.Line(78.962843f, 229.488520f);
        path.Line(79.019483f, 229.343990f);
        path.Line(79.031203f, 229.310790f);
        path.Close();
        path.Move(63.791016f, 229.314690f);
        path.Line(63.791016f, 230.857660f);
        path.Line(63.794916f, 231.002190f);
        path.Line(63.806636f, 231.148680f);
        path.Line(63.826166f, 231.293210f);
        path.Line(63.851556f, 231.433830f);
        path.Line(63.876946f, 231.539300f);
        path.Line(64.232415f, 231.455300f);
        path.Line(64.208975f, 231.359600f);
        path.Line(64.187495f, 231.236560f);
        path.Line(64.169915f, 231.109600f);
        path.Line(64.160115f, 230.982650f);
        path.Line(64.156215f, 230.851790f);
        path.Line(64.156215f, 229.314680f);
        path.Close();
        path.Move(82.707031f, 229.705320f);
        path.Line(82.378906f, 229.863520f);
        path.Line(82.404296f, 229.916220f);
        path.Line(82.474606f, 230.052930f);
        path.Line(82.550776f, 230.187700f);
        path.Line(82.628906f, 230.322470f);
        path.Line(82.710936f, 230.453320f);
        path.Line(82.796876f, 230.582230f);
        path.Line(82.886716f, 230.709180f);
        path.Line(82.978516f, 230.836140f);
        path.Line(83.074216f, 230.959180f);
        path.Line(83.173826f, 231.080280f);
        path.Line(83.275389f, 231.199420f);
        path.Line(83.380857f, 231.314650f);
        path.Line(83.380857f, 231.316650f);
        path.Cubic(83.487854f, 231.433070f, 
                   83.598383f, 231.545780f, 
                   83.712889f, 231.654540f);
        path.Line(83.714889f, 231.654540f);
        path.Line(83.722689f, 231.662540f);
        path.Line(83.970736f, 231.396910f);
        path.Line(83.964836f, 231.388910f);
        path.Cubic(83.856518f, 231.286030f, 
                   83.751366f, 231.180380f, 
                   83.650383f, 231.070550f);
        path.Line(83.650383f, 231.068550f);
        path.Line(83.550773f, 230.959170f);
        path.Line(83.453113f, 230.845890f);
        path.Line(83.359363f, 230.730660f);
        path.Line(83.269523f, 230.615420f);
        path.Line(83.181633f, 230.496280f);
        path.Line(83.099603f, 230.377140f);
        path.Line(83.017573f, 230.256050f);
        path.Line(82.941403f, 230.131050f);
        path.Line(82.867183f, 230.008000f);
        path.Line(82.796873f, 229.881050f);
        path.Line(82.730463f, 229.752140f);
        path.Close();
        path.Move(75.947266f, 232.338130f);
        path.Cubic(75.836682f, 232.405230f, 
                   75.722084f, 232.467590f, 
                   75.605469f, 232.529540f);
        path.Cubic(75.379376f, 232.648980f, 
                   75.147213f, 232.758130f, 
                   74.910156f, 232.853760f);
        path.Cubic(74.721171f, 232.929960f, 
                   74.530487f, 232.996790f, 
                   74.335937f, 233.056880f);
        path.Cubic(74.217661f, 233.092880f, 
                   74.100552f, 233.128280f, 
                   73.984375f, 233.156480f);
        path.Line(74.070315f, 233.510000f);
        path.Cubic(74.197284f, 233.479100f, 
                   74.320386f, 233.443300f, 
                   74.441409f, 233.406480f);
        path.Line(74.443409f, 233.406480f);
        path.Cubic(74.647868f, 233.343280f, 
                   74.848628f, 233.271620f, 
                   75.046925f, 233.191640f);
        path.Cubic(75.295653f, 233.091300f, 
                   75.540333f, 232.977030f, 
                   75.777394f, 232.851790f);
        path.Cubic(75.897776f, 232.787790f, 
                   76.017916f, 232.720810f, 
                   76.136769f, 232.648670f);
        path.Close();
        path.Move(85.718750f, 232.613520f);
        path.Line(85.556641f, 232.939690f);
        path.Cubic(85.744386f, 233.033990f, 
                   85.934450f, 233.120920f, 
                   86.128906f, 233.199460f);
        path.Cubic(86.327144f, 233.279460f, 
                   86.529973f, 233.351150f, 
                   86.734375f, 233.414300f);
        path.Cubic(86.886896f, 233.461400f, 
                   87.039924f, 233.504100f, 
                   87.195312f, 233.541260f);
        path.Cubic(87.349799f, 233.578260f, 
                   87.505319f, 233.610360f, 
                   87.662109f, 233.636960f);
        path.Line(87.664109f, 233.636960f);
        path.Line(87.681689f, 233.638960f);
        path.Line(87.738329f, 233.279590f);
        path.Line(87.724659f, 233.275590f);
        path.Line(87.722659f, 233.275590f);
        path.Cubic(87.574718f, 233.250490f, 
                   87.427360f, 233.220690f, 
                   87.281253f, 233.185790f);
        path.Cubic(87.133668f, 233.150490f, 
                   86.986920f, 233.109490f, 
                   86.841800f, 233.064690f);
        path.Cubic(86.647310f, 233.004590f, 
                   86.454550f, 232.937800f, 
                   86.265628f, 232.861570f);
        path.Cubic(86.080035f, 232.786570f, 
                   85.897319f, 232.703170f, 
                   85.718753f, 232.613520f);
        path.Close();
        path.Move(96.175781f, 232.726800f);
        path.Line(96.101561f, 232.791300f);
        path.Line(96.005861f, 232.867500f);
        path.Line(95.908201f, 232.935900f);
        path.Line(95.806639f, 233.002300f);
        path.Line(95.701170f, 233.062900f);
        path.Line(95.591795f, 233.117600f);
        path.Line(95.480467f, 233.168400f);
        path.Line(95.367185f, 233.213300f);
        path.Line(95.249998f, 233.252400f);
        path.Line(95.130857f, 233.285600f);
        path.Line(95.009764f, 233.314900f);
        path.Line(94.886717f, 233.336400f);
        path.Line(94.761717f, 233.352000f);
        path.Line(94.632810f, 233.362000f);
        path.Line(94.501951f, 233.366000f);
        path.Line(94.275389f, 233.366000f);
        path.Line(94.275389f, 233.731240f);
        path.Line(94.505857f, 233.731240f);
        path.Line(94.652342f, 233.727240f);
        path.Line(94.796873f, 233.715540f);
        path.Line(94.941404f, 233.697940f);
        path.Line(95.083982f, 233.672540f);
        path.Line(95.222654f, 233.639340f);
        path.Line(95.359373f, 233.602240f);
        path.Line(95.492185f, 233.555340f);
        path.Line(95.623045f, 233.504540f);
        path.Line(95.749998f, 233.447940f);
        path.Line(95.874998f, 233.383440f);
        path.Line(95.996092f, 233.315040f);
        path.Line(96.111326f, 233.238840f);
        path.Line(96.224607f, 233.158740f);
        path.Line(96.333982f, 233.074740f);
        path.Line(96.416012f, 233.002440f);
        path.Close();
        path.Move(65.435547f, 233.033440f);
        path.Line(65.253906f, 233.349850f);
        path.Line(65.304686f, 233.379150f);
        path.Line(65.427733f, 233.441650f);
        path.Line(65.556640f, 233.498250f);
        path.Line(65.685546f, 233.550950f);
        path.Line(65.820311f, 233.595850f);
        path.Line(65.957030f, 233.632950f);
        path.Line(66.095702f, 233.666150f);
        path.Line(66.238280f, 233.689550f);
        path.Line(66.380858f, 233.709050f);
        path.Line(66.527343f, 233.719050f);
        path.Line(66.673827f, 233.723050f);
        path.Line(67.474608f, 233.723050f);
        path.Line(67.474608f, 233.357810f);
        path.Line(66.677733f, 233.357810f);
        path.Line(66.544921f, 233.353810f);
        path.Line(66.417968f, 233.343810f);
        path.Line(66.292968f, 233.328210f);
        path.Line(66.167968f, 233.306710f);
        path.Line(66.046874f, 233.279410f);
        path.Line(65.927733f, 233.246210f);
        path.Line(65.810546f, 233.207110f);
        path.Line(65.697265f, 233.162210f);
        path.Line(65.585936f, 233.111410f);
        path.Line(65.476561f, 233.056710f);
        path.Close();
        path.Move(69.664062f, 233.357660f);
        path.Line(69.664062f, 233.722900f);
        path.Line(71.855469f, 233.722900f);
        path.Line(71.855469f, 233.357660f);
        path.Close();
        path.Move(89.894531f, 233.365660f);
        path.Line(89.894531f, 233.730900f);
        path.Line(92.085937f, 233.730900f);
        path.Line(92.085937f, 233.365660f);
        path.Close();
    }

    private void SetPathData_path123(IRenderPath path)
    { // Label: safe
        path.Move(72.106896f, 229.055000f);
        path.Line(72.106896f, 219.921580f);
        path.Cubic(72.107162f, 218.189140f, 
                   72.965178f, 216.569217f, 
                   74.398188f, 215.595650f);
        path.Cubic(72.968139f, 214.621864f, 
                   72.110756f, 213.005111f, 
                   72.106896f, 211.275000f);
        path.Line(72.106896f, 206.703000f);
        path.Line(69.828833f, 208.983710f);
        path.Line(69.299667f, 209.512870f);
        path.Line(68.744042f, 208.957250f);
        path.Line(66.439521f, 206.652730f);
        path.Line(66.439521f, 232.317310f);
        path.Line(68.744042f, 230.012790f);
        path.Line(69.299667f, 229.454520f);
        path.Line(69.828833f, 229.983690f);
        path.Line(72.106896f, 232.261750f);
        path.Close();
    }

    private void SetPathData_path126(IRenderPath path)
    { // Label: low
        path.Move(73.318026f, 214.850180f);
        path.Line(71.831729f, 214.664310f);
        path.Cubic(70.339479f, 214.465880f, 
                   70.204542f, 213.550420f, 
                   70.178083f, 212.267190f);
        path.Line(70.178083f, 208.629170f);
        path.Line(69.299667f, 209.507580f);
        path.Line(68.397437f, 208.602710f);
        path.Line(68.397437f, 230.346170f);
        path.Line(69.299667f, 229.441290f);
        path.Line(70.178083f, 230.319710f);
        path.Line(70.178083f, 218.868540f);
        path.Cubic(70.204543f, 217.590600f, 
                   70.339479f, 216.672500f, 
                   71.831729f, 216.474060f);
        path.Line(73.486037f, 216.257760f);
        path.Line(74.183875f, 215.596310f);
        path.Close();
    }

    private void SetPathData_path7917(IRenderPath path)
    { // Label: high
        path.Move(69.273208f, 203.104670f);
        path.Line(66.317812f, 200.014340f);
        path.Line(66.439521f, 206.652730f);
        path.Line(66.439521f, 232.317310f);
        path.Line(66.367421f, 238.333940f);
        path.Line(69.273207f, 235.841560f);
        path.Line(72.122109f, 238.125580f);
        path.Line(72.106899f, 232.261750f);
        path.Line(72.106899f, 229.055000f);
        path.Line(72.204799f, 224.943380f);
        path.Line(72.188259f, 220.515570f);
        path.Line(72.371483f, 218.400230f);
        path.Line(73.269085f, 216.807430f);
        path.Line(74.398192f, 215.595650f);
        path.Line(73.638676f, 214.931620f);
        path.Line(72.436306f, 213.168760f);
        path.Line(72.072504f, 210.872830f);
        path.Line(72.106904f, 206.703000f);
        path.Line(72.204794f, 200.239230f);
        path.Close();
    }

    private void SetPathData_use7919(IRenderPath path)
    { // Label: line
        path.Move(71.974604f, 229.055000f);
        path.Line(71.974604f, 231.942370f);
        path.Line(69.922377f, 229.890146f);
        path.Line(69.299445f, 229.267209f);
        path.Line(68.650387f, 229.919357f);
        path.Line(66.571812f, 231.997930f);
        path.Line(66.571812f, 206.972110f);
        path.Line(68.650498f, 209.050794f);
        path.Line(69.299667f, 209.699957f);
        path.Line(69.922404f, 209.077227f);
        path.Line(71.974604f, 207.022642f);
        path.Line(71.974604f, 211.275000f);
        path.Line(71.974605f, 211.275295f);
        path.Cubic(71.978538f, 213.038156f, 
                   72.866609f, 214.712778f, 
                   74.323728f, 215.704997f);
        path.Cubic(72.863654f, 216.478257f, 
                   71.974876f, 218.156258f, 
                   71.974605f, 219.921560f);
        path.Line(71.974604f, 219.921580f);
        path.Line(71.974604f, 229.055000f);
        path.Close();
        path.Move(72.239187f, 229.055000f);
        path.Line(72.239187f, 219.921580f);
        path.Line(72.239187f, 219.921600f);
        path.Cubic(72.239448f, 218.222021f, 
                   73.066702f, 216.660176f, 
                   74.472531f, 215.705077f);
        path.Cubic(73.069670f, 214.530951f, 
                   72.242974f, 212.972065f, 
                   72.239187f, 211.274705f);
        path.Line(72.239187f, 206.383358f);
        path.Line(69.735262f, 208.890193f);
        path.Line(69.299667f, 209.325783f);
        path.Line(68.837586f, 208.863705f);
        path.Line(66.307229f, 206.333350f);
        path.Line(66.307229f, 232.636690f);
        path.Line(68.837697f, 230.106223f);
        path.Line(69.299889f, 229.641831f);
        path.Line(69.735288f, 230.077234f);
        path.Line(72.239187f, 232.581130f);
        path.Line(72.239187f, 229.055000f);
        path.Close();
    }

    private void SetPathData_path180(IRenderPath path)
    { // Label: Max
        path.Move(96.714521f, 218.626670f);
        path.Cubic(96.834034f, 217.055080f, 
                   96.773671f, 215.474980f, 
                   96.534605f, 213.917080f);
        path.Cubic(96.098042f, 211.350620f, 
                   95.314876f, 209.739310f, 
                   93.946980f, 208.125350f);
        path.Cubic(92.913091f, 206.894090f, 
                   91.590542f, 205.937860f, 
                   90.097292f, 205.341940f);
        path.Cubic(89.107996f, 204.948020f, 
                   88.053271f, 204.744250f, 
                   86.988438f, 204.741330f);
        path.Cubic(84.991912f, 204.770730f, 
                   83.016615f, 205.441090f, 
                   81.754980f, 207.006170f);
        path.Cubic(80.635792f, 208.424330f, 
                   80.109272f, 209.702270f, 
                   80.220397f, 212.091460f);
        path.Line(80.220397f, 214.020270f);
        path.Line(82.393287f, 213.768920f);
        path.Line(84.456376f, 213.948830f);
        path.Line(84.456376f, 210.908770f);
        path.Cubic(84.501356f, 210.154710f, 
                   84.784459f, 209.760480f, 
                   85.485605f, 209.461500f);
        path.Cubic(87.571922f, 208.765780f, 
                   89.538981f, 209.464500f, 
                   90.957188f, 211.128370f);
        path.Cubic(91.865691f, 212.260900f, 
                   92.458147f, 213.613790f, 
                   92.674334f, 215.049500f);
        path.Cubic(92.884559f, 216.296960f, 
                   92.853185f, 217.474780f, 
                   92.785459f, 218.642540f);
        path.Cubic(92.637292f, 221.175490f, 
                   92.372709f, 223.672270f, 
                   91.991709f, 226.132890f);
        path.Line(93.658584f, 228.368620f);
        path.Line(95.854626f, 226.741440f);
        path.Cubic(96.182709f, 224.704140f, 
                   96.735688f, 218.946810f, 
                   96.714521f, 218.626670f);
        path.Close();
    }

    private void SetPathData_path1050(IRenderPath path)
    { // Label: Mid
        path.Move(96.047410f, 211.857220f);
        path.Cubic(95.581014f, 210.392850f, 
                   94.908433f, 209.259750f, 
                   93.946980f, 208.125350f);
        path.Cubic(92.913091f, 206.894090f, 
                   91.590542f, 205.937860f, 
                   90.097292f, 205.341940f);
        path.Cubic(89.107996f, 204.948020f, 
                   88.053271f, 204.744250f, 
                   86.988438f, 204.741330f);
        path.Cubic(84.991912f, 204.770730f, 
                   83.016615f, 205.441090f, 
                   81.754980f, 207.006170f);
        path.Cubic(80.635792f, 208.424330f, 
                   80.109272f, 209.702270f, 
                   80.220397f, 212.091460f);
        path.Line(80.220397f, 214.020270f);
        path.Line(82.393287f, 213.768920f);
        path.Line(84.456376f, 213.948830f);
        path.Line(84.456376f, 210.908770f);
        path.Cubic(84.501356f, 210.154710f, 
                   84.784459f, 209.760480f, 
                   85.485605f, 209.461500f);
        path.Cubic(87.571922f, 208.765780f, 
                   89.538981f, 209.464500f, 
                   90.957188f, 211.128370f);
        path.Cubic(91.456693f, 211.751050f, 
                   91.860660f, 212.440340f, 
                   92.159079f, 213.173380f);
        path.Cubic(92.403426f, 213.773600f, 
                   92.577009f, 214.403160f, 
                   92.674334f, 215.049500f);
        path.Cubic(92.798024f, 215.909450f, 
                   92.820993f, 217.703630f, 
                   92.832390f, 218.084170f);
        path.Line(94.604726f, 220.124460f);
        path.Line(96.737387f, 218.377760f);
        path.Cubic(96.836497f, 215.541660f, 
                   96.584010f, 213.386370f, 
                   96.047410f, 211.857220f);
        path.Close();
    }

    private void SetPathData_path1907(IRenderPath path)
    { // Label: Min
        path.Move(93.946980f, 208.125350f);
        path.Cubic(92.913091f, 206.894090f, 
                   91.590542f, 205.937860f, 
                   90.097292f, 205.341940f);
        path.Cubic(89.107996f, 204.948020f, 
                   88.053271f, 204.744250f, 
                   86.988438f, 204.741330f);
        path.Cubic(84.991912f, 204.770730f, 
                   83.016615f, 205.441090f, 
                   81.754980f, 207.006170f);
        path.Cubic(80.635792f, 208.424330f, 
                   80.109272f, 209.702270f, 
                   80.220397f, 212.091460f);
        path.Line(80.220397f, 214.020270f);
        path.Line(82.393287f, 213.768920f);
        path.Line(84.456376f, 213.948830f);
        path.Line(84.456376f, 210.908770f);
        path.Cubic(84.501356f, 210.154710f, 
                   84.784459f, 209.760480f, 
                   85.485605f, 209.461500f);
        path.Cubic(87.571922f, 208.765780f, 
                   89.538981f, 209.464500f, 
                   90.957188f, 211.128370f);
        path.Line(93.956166f, 211.289620f);
        path.Close();
    }

    private void SetPathData_path12973(IRenderPath path)
    { // Label: 
        path.Move(82.655396f, 211.291953f);
        path.Cubic(83.029505f, 211.291953f, 
                   83.332781f, 210.995130f, 
                   83.332781f, 210.628980f);
        path.Cubic(83.332781f, 210.262830f, 
                   83.029505f, 209.966007f, 
                   82.655396f, 209.966007f);
        path.Cubic(82.281287f, 209.966007f, 
                   81.978011f, 210.262830f, 
                   81.978011f, 210.628980f);
        path.Cubic(81.978011f, 210.995130f, 
                   82.281287f, 211.291953f, 
                   82.655396f, 211.291953f);
        path.Close();
    }

    private void SetPathData_use3991(IRenderPath path)
    { // Label: Line
        path.Move(95.922581f, 211.901024f);
        path.Cubic(96.454324f, 213.416332f, 
                   96.703935f, 215.547077f, 
                   96.605176f, 218.373140f);
        path.Line(94.620322f, 219.940687f);
        path.Line(92.963329f, 218.033178f);
        path.Cubic(92.953259f, 217.700803f, 
                   92.930194f, 215.899143f, 
                   92.805278f, 215.030666f);
        path.Cubic(92.706647f, 214.375631f, 
                   92.528889f, 213.730931f, 
                   92.281606f, 213.123500f);
        path.Cubic(91.979602f, 212.381653f, 
                   91.565937f, 211.675815f, 
                   91.060380f, 211.045591f);
        path.Cubic(89.616666f, 209.351705f, 
                   87.573282f, 208.625873f, 
                   85.443756f, 209.336002f);
        path.Cubic(84.698566f, 209.653290f, 
                   84.371578f, 210.108630f, 
                   84.324319f, 210.900893f);
        path.Line(84.324085f, 210.908770f);
        path.Line(84.324085f, 213.804500f);
        path.Line(82.391414f, 213.635963f);
        path.Line(80.352689f, 213.871793f);
        path.Line(80.352689f, 212.091460f);
        path.Line(80.352546f, 212.085314f);
        path.Cubic(80.242786f, 209.725487f, 
                   80.751076f, 208.491794f, 
                   81.858828f, 207.088125f);
        path.Cubic(83.095503f, 205.554020f, 
                   85.014695f, 204.902700f, 
                   86.990386f, 204.873607f);
        path.Cubic(88.040429f, 204.876507f, 
                   89.070650f, 205.075543f, 
                   90.048353f, 205.464846f);
        path.Cubic(91.526300f, 206.054659f, 
                   92.822310f, 206.991701f, 
                   93.845669f, 208.210421f);
        path.Cubic(94.800337f, 209.336818f, 
                   95.459545f, 210.447388f, 
                   95.921357f, 211.897367f);
        path.Close();
        path.Move(96.173463f, 211.817073f);
        path.Cubic(95.702483f, 210.338312f, 
                   95.016529f, 209.182682f, 
                   94.047900f, 208.039816f);
        path.Cubic(93.003872f, 206.796479f, 
                   91.654784f, 205.821061f, 
                   90.146326f, 205.219071f);
        path.Cubic(89.145342f, 204.820497f, 
                   88.066113f, 204.611993f, 
                   86.988801f, 204.609039f);
        path.Cubic(84.969129f, 204.638760f, 
                   82.937727f, 205.328160f, 
                   81.651986f, 206.923145f);
        path.Cubic(80.520508f, 208.356866f, 
                   79.975758f, 209.679053f, 
                   80.088248f, 212.097606f);
        path.Line(80.088106f, 214.168747f);
        path.Line(82.395160f, 213.901877f);
        path.Line(84.588668f, 214.093160f);
        path.Line(84.588668f, 210.912749f);
        path.Cubic(84.631134f, 210.200790f, 
                   84.870352f, 209.867670f, 
                   85.537496f, 209.583190f);
        path.Cubic(87.570562f, 208.905687f, 
                   89.461296f, 209.577295f, 
                   90.856507f, 211.214186f);
        path.Cubic(91.347449f, 211.826285f, 
                   91.741718f, 212.499027f, 
                   92.036552f, 213.223261f);
        path.Cubic(92.277963f, 213.816269f, 
                   92.447371f, 214.430689f, 
                   92.543517f, 215.069198f);
        path.Cubic(92.665854f, 215.919757f, 
                   92.688727f, 217.706457f, 
                   92.700158f, 218.088130f);
        path.Line(92.732518f, 218.170926f);
        path.Line(94.589130f, 220.308233f);
        path.Line(96.821211f, 218.480106f);
        path.Line(96.869598f, 218.382380f);
        path.Cubic(96.969059f, 215.536243f, 
                   96.713696f, 213.356408f, 
                   96.172239f, 211.813416f);
        path.Close();
    }

    private void SetPathData_path192(IRenderPath path)
    { // Label: outer
        path.Move(73.887542f, 214.952710f);
        path.Cubic(73.628038f, 217.746380f, 
                   75.242374f, 220.090940f, 
                   76.927605f, 221.903310f);
        path.Cubic(78.548619f, 223.739520f, 
                   80.256945f, 225.492820f, 
                   82.052584f, 227.163230f);
        path.Cubic(83.847627f, 225.496560f, 
                   85.558095f, 223.741050f, 
                   87.177563f, 221.903310f);
        path.Cubic(88.974613f, 219.942020f, 
                   90.504739f, 217.483920f, 
                   90.222918f, 214.952710f);
        path.Cubic(89.841842f, 212.576650f, 
                   87.896426f, 211.105580f, 
                   85.828078f, 210.971890f);
        path.Cubic(84.492320f, 210.885590f, 
                   83.105292f, 211.356990f, 
                   82.055230f, 212.502670f);
        path.Cubic(81.146075f, 211.510880f, 
                   79.857812f, 210.952860f, 
                   78.031621f, 210.974650f);
        path.Cubic(76.205431f, 210.996450f, 
                   74.255168f, 212.677660f, 
                   73.887542f, 214.952710f);
        path.Close();
    }

    private void SetPathData_path2417(IRenderPath path)
    { // Label: inner
        path.Move(74.856693f, 215.224110f);
        path.Cubic(74.641867f, 217.536810f, 
                   76.415306f, 219.914750f, 
                   77.810400f, 221.415090f);
        path.Cubic(79.152333f, 222.935170f, 
                   80.566546f, 224.386620f, 
                   82.053040f, 225.769440f);
        path.Cubic(83.539040f, 224.389710f, 
                   84.955026f, 222.936440f, 
                   86.295679f, 221.415090f);
        path.Cubic(87.783341f, 219.791470f, 
                   89.534459f, 217.372370f, 
                   89.301158f, 215.276940f);
        path.Cubic(88.985690f, 213.309950f, 
                   87.375205f, 212.092150f, 
                   85.662953f, 211.981480f);
        path.Cubic(84.557166f, 211.909980f, 
                   82.924509f, 212.684480f, 
                   82.055230f, 213.632910f);
        path.Cubic(81.302599f, 212.811870f, 
                   79.799094f, 211.912890f, 
                   78.287309f, 211.930930f);
        path.Cubic(76.775524f, 211.948930f, 
                   75.161027f, 213.340740f, 
                   74.856693f, 215.224110f);
        path.Close();
    }

    private void SetPathData_path14970(IRenderPath path)
    { // Label: grey heart
        path.Move(73.887542f, 214.952710f);
        path.Cubic(73.628038f, 217.746380f, 
                   75.242374f, 220.090940f, 
                   76.927605f, 221.903310f);
        path.Cubic(78.548619f, 223.739520f, 
                   80.256945f, 225.492820f, 
                   82.052584f, 227.163230f);
        path.Cubic(83.847627f, 225.496560f, 
                   85.558095f, 223.741050f, 
                   87.177563f, 221.903310f);
        path.Cubic(88.974613f, 219.942020f, 
                   90.504739f, 217.483920f, 
                   90.222918f, 214.952710f);
        path.Cubic(89.841842f, 212.576650f, 
                   87.896426f, 211.105580f, 
                   85.828078f, 210.971890f);
        path.Cubic(84.492320f, 210.885590f, 
                   83.105292f, 211.356990f, 
                   82.055230f, 212.502670f);
        path.Cubic(81.146075f, 211.510880f, 
                   79.857812f, 210.952860f, 
                   78.031621f, 210.974650f);
        path.Cubic(76.205431f, 210.996450f, 
                   74.255168f, 212.677660f, 
                   73.887542f, 214.952710f);
        path.Close();
    }

    private void SetPathData_path14972(IRenderPath path)
    { // Label: dashed outline
        path.Move(85.447266f, 210.712890f);
        path.Cubic(85.141837f, 210.717890f, 
                   84.836234f, 210.747590f, 
                   84.537109f, 210.810590f);
        path.Cubic(84.577199f, 211.100870f, 
                   84.585449f, 211.422160f, 
                   84.951633f, 211.248150f);
        path.Cubic(85.473480f, 211.181950f, 
                   86.006568f, 211.207250f, 
                   86.519531f, 211.324250f);
        path.Cubic(86.612081f, 211.023140f, 
                   86.692551f, 210.719360f, 
                   86.267148f, 210.768480f);
        path.Cubic(85.995713f, 210.729280f, 
                   85.721653f, 210.707480f, 
                   85.447266f, 210.712880f);
        path.Close();
        path.Move(78.025391f, 210.724590f);
        path.Cubic(77.824313f, 210.778890f, 
                   77.286719f, 210.644390f, 
                   77.427764f, 210.975730f);
        path.Cubic(77.383704f, 211.381910f, 
                   77.697990f, 211.240030f, 
                   77.970148f, 211.227040f);
        path.Cubic(78.444147f, 211.214540f, 
                   78.920436f, 211.246440f, 
                   79.386719f, 211.333960f);
        path.Cubic(79.454729f, 211.048190f, 
                   79.557492f, 210.729240f, 
                   79.143248f, 210.788630f);
        path.Cubic(78.773073f, 210.738730f, 
                   78.398751f, 210.720730f, 
                   78.025391f, 210.724630f);
        path.Close();
        path.Move(81.412109f, 211.617170f);
        path.Cubic(81.249416f, 211.847180f, 
                   81.006455f, 212.082060f, 
                   81.385869f, 212.218750f);
        path.Cubic(81.632025f, 212.409810f, 
                   81.843611f, 212.639280f, 
                   82.054687f, 212.867170f);
        path.Cubic(82.322759f, 212.577520f, 
                   82.597573f, 212.290910f, 
                   82.919922f, 212.060530f);
        path.Cubic(82.762288f, 211.836690f, 
                   82.608130f, 211.512490f, 
                   82.376751f, 211.850690f);
        path.Cubic(82.184306f, 212.038500f, 
                   82.013888f, 212.250510f, 
                   81.825733f, 211.932790f);
        path.Cubic(81.693613f, 211.820430f, 
                   81.555514f, 211.714760f, 
                   81.412109f, 211.617210f);
        path.Close();
        path.Move(88.529297f, 211.699170f);
        path.Cubic(88.325758f, 211.928990f, 
                   88.113318f, 212.154010f, 
                   88.496097f, 212.310500f);
        path.Cubic(88.885783f, 212.649830f, 
                   89.220473f, 213.054000f, 
                   89.468753f, 213.507760f);
        path.Cubic(89.711710f, 213.382180f, 
                   90.066027f, 213.278180f, 
                   89.748073f, 212.999890f);
        path.Cubic(89.427275f, 212.495920f, 
                   89.008201f, 212.055450f, 
                   88.529300f, 211.699170f);
        path.Close();
        path.Move(75.501953f, 211.712870f);
        path.Cubic(74.955406f, 212.150550f, 
                   74.506518f, 212.706860f, 
                   74.177734f, 213.324200f);
        path.Cubic(74.423013f, 213.459330f, 
                   74.682727f, 213.680670f, 
                   74.774756f, 213.286600f);
        path.Cubic(75.051739f, 212.834800f, 
                   75.408617f, 212.433150f, 
                   75.818359f, 212.097600f);
        path.Cubic(75.712890f, 211.969340f, 
                   75.607422f, 211.841090f, 
                   75.501953f, 211.712830f);
        path.Close();
        path.Move(73.638672f, 214.931620f);
        path.Cubic(73.575012f, 215.618910f, 
                   73.620022f, 216.316090f, 
                   73.767578f, 216.990210f);
        path.Cubic(74.085538f, 216.956410f, 
                   74.376556f, 216.912510f, 
                   74.189893f, 216.537780f);
        path.Cubic(74.106973f, 216.021050f, 
                   74.089607f, 215.493870f, 
                   74.136723f, 214.972640f);
        path.Cubic(73.970707f, 214.958940f, 
                   73.804692f, 214.945340f, 
                   73.638676f, 214.931640f);
        path.Close();
        path.Move(90.500000f, 215.275390f);
        path.Cubic(90.219580f, 215.285890f, 
                   89.878087f, 215.227690f, 
                   90.005859f, 215.618150f);
        path.Cubic(89.997559f, 216.154090f, 
                   89.916429f, 216.688240f, 
                   89.767578f, 217.203120f);
        path.Cubic(90.061254f, 217.310930f, 
                   90.360208f, 217.410760f, 
                   90.339643f, 216.986650f);
        path.Cubic(90.467664f, 216.426780f, 
                   90.526685f, 215.849470f, 
                   90.500000f, 215.275390f);
        path.Close();
        path.Move(74.912109f, 218.703120f);
        path.Cubic(74.614083f, 218.820500f, 
                   74.337274f, 218.948870f, 
                   74.637220f, 219.253710f);
        path.Cubic(74.906258f, 219.744190f, 
                   75.217073f, 220.210960f, 
                   75.552734f, 220.658200f);
        path.Cubic(75.777288f, 220.495650f, 
                   76.098282f, 220.348560f, 
                   75.765625f, 220.103520f);
        path.Cubic(75.448562f, 219.657750f, 
                   75.158095f, 219.192060f, 
                   74.912109f, 218.703120f);
        path.Close();
        path.Move(89.019531f, 218.984370f);
        path.Cubic(88.704342f, 219.557500f, 
                   88.336310f, 220.100660f, 
                   87.935547f, 220.617190f);
        path.Cubic(88.156436f, 220.808990f, 
                   88.386675f, 221.059900f, 
                   88.531311f, 220.661490f);
        path.Cubic(88.868490f, 220.204220f, 
                   89.179242f, 219.727270f, 
                   89.455078f, 219.230470f);
        path.Cubic(89.309896f, 219.148470f, 
                   89.164713f, 219.066400f, 
                   89.019531f, 218.984370f);
        path.Close();
        path.Move(77.230469f, 221.867190f);
        path.Cubic(76.998937f, 222.050010f, 
                   76.723713f, 222.231000f, 
                   77.078013f, 222.448770f);
        path.Cubic(77.449465f, 222.864810f, 
                   77.827410f, 223.275010f, 
                   78.207031f, 223.683590f);
        path.Cubic(78.434822f, 223.493880f, 
                   78.710446f, 223.305810f, 
                   78.343750f, 223.095700f);
        path.Cubic(77.969021f, 222.689490f, 
                   77.596595f, 222.281180f, 
                   77.230469f, 221.867190f);
        path.Close();
        path.Move(86.646484f, 222.125000f);
        path.Cubic(86.204468f, 222.620470f, 
                   85.753776f, 223.108210f, 
                   85.298828f, 223.591800f);
        path.Cubic(85.508698f, 223.833100f, 
                   85.718874f, 224.050870f, 
                   85.909752f, 223.671000f);
        path.Cubic(86.283968f, 223.270920f, 
                   86.653800f, 222.866780f, 
                   87.019531f, 222.458940f);
        path.Cubic(86.895182f, 222.347610f, 
                   86.770833f, 222.236290f, 
                   86.646484f, 222.124960f);
        path.Close();
        path.Move(79.953125f, 224.777340f);
        path.Cubic(79.698287f, 224.983020f, 
                   79.486498f, 225.188780f, 
                   79.862505f, 225.395510f);
        path.Cubic(80.246769f, 225.780780f, 
                   80.635518f, 226.161500f, 
                   81.027345f, 226.539060f);
        path.Cubic(81.259863f, 226.333830f, 
                   81.493843f, 226.130970f, 
                   81.124215f, 225.937750f);
        path.Cubic(80.729445f, 225.555450f, 
                   80.340178f, 225.167450f, 
                   79.953128f, 224.777340f);
        path.Close();
        path.Move(83.910156f, 225.023440f);
        path.Cubic(83.441100f, 225.493300f, 
                   82.966768f, 225.957890f, 
                   82.484375f, 226.414060f);
        path.Cubic(82.682367f, 226.672200f, 
                   82.882740f, 226.894510f, 
                   83.096473f, 226.521210f);
        path.Cubic(83.490491f, 226.143560f, 
                   83.879570f, 225.760780f, 
                   84.265625f, 225.375000f);
        path.Cubic(84.147135f, 225.257810f, 
                   84.028646f, 225.140630f, 
                   83.910156f, 225.023440f);
        path.Close();
    }

    private void SetPathData_path3652_f0(IRenderPath path)
    { // Label: filling of grey lightning
        path.Move(78.338432f, 212.434000f);
        path.Cubic(78.039057f, 212.822570f, 
                   78.013525f, 213.040030f, 
                   78.412642f, 213.572610f);
        path.Cubic(80.021903f, 214.945870f, 
                   81.354315f, 216.807390f, 
                   81.581116f, 219.863090f);
        path.Cubic(81.548986f, 220.296880f, 
                   81.690234f, 221.579010f, 
                   81.462359f, 221.749930f);
        path.Cubic(80.671798f, 221.041170f, 
                   79.806462f, 220.314640f, 
                   79.220547f, 219.776640f);
        path.Cubic(78.489828f, 219.304150f, 
                   77.651449f, 219.936230f, 
                   77.976970f, 220.768420f);
        path.Cubic(78.169214f, 221.339260f, 
                   78.648487f, 221.498370f, 
                   79.610850f, 222.495520f);
        path.Cubic(80.633827f, 223.493060f, 
                   80.987560f, 223.830720f, 
                   82.062067f, 224.774250f);
        path.Cubic(83.459779f, 223.467940f, 
                   84.759679f, 222.304670f, 
                   86.094352f, 220.935310f);
        path.Cubic(86.508258f, 220.485780f, 
                   86.483908f, 219.849300f, 
                   85.893292f, 219.619810f);
        path.Cubic(85.345169f, 219.328030f, 
                   85.003172f, 219.798930f, 
                   84.622033f, 220.205290f);
        path.Cubic(84.244266f, 220.505390f, 
                   83.418753f, 221.478920f, 
                   83.174420f, 221.501650f);
        path.Cubic(83.411223f, 218.794150f, 
                   82.946599f, 216.564100f, 
                   81.536057f, 214.692170f);
        path.Cubic(80.818000f, 213.731760f, 
                   80.810621f, 213.820600f, 
                   79.862492f, 212.827490f);
        path.Cubic(78.842896f, 212.034790f, 
                   78.598339f, 212.394510f, 
                   78.338436f, 212.434000f);
        path.Close();
    }

    private void SetPathData_path3652_s0(IRenderPath path)
    { // Label: stroke of grey lightning
        path.Move(78.353458f, 212.532865f);
        path.Cubic(78.656503f, 212.486820f, 
                   78.865667f, 212.179160f, 
                   79.801113f, 212.906437f);
        path.Cubic(80.891869f, 214.050517f, 
                   80.895827f, 214.002856f, 
                   81.455967f, 214.752050f);
        path.Cubic(82.853266f, 216.606406f, 
                   83.310319f, 218.800119f, 
                   83.074800f, 221.492937f);
        path.Cubic(83.468638f, 221.574711f, 
                   84.314173f, 220.577569f, 
                   84.684235f, 220.283590f);
        path.Cubic(85.080400f, 219.862767f, 
                   85.374965f, 219.457177f, 
                   85.846302f, 219.708082f);
        path.Cubic(86.386491f, 219.918731f, 
                   86.406754f, 220.448387f, 
                   86.020786f, 220.867574f);
        path.Cubic(84.690450f, 222.232428f, 
                   83.392287f, 223.394143f, 
                   81.993785f, 224.701191f);
        path.Cubic(81.055105f, 223.756950f, 
                   80.703261f, 223.421093f, 
                   79.680665f, 222.423925f);
        path.Cubic(78.703351f, 221.411217f, 
                   78.248063f, 221.260070f, 
                   78.071740f, 220.736504f);
        path.Cubic(77.772203f, 219.970426f, 
                   78.494221f, 219.426075f, 
                   79.166248f, 219.860614f);
        path.Cubic(79.740462f, 220.389799f, 
                   80.606253f, 221.116712f, 
                   81.395605f, 221.824388f);
        path.Cubic(81.795880f, 221.624772f, 
                   81.649393f, 220.295083f, 
                   81.680843f, 219.870477f);
        path.Cubic(81.451964f, 216.772004f, 
                   80.096109f, 214.877732f, 
                   78.477555f, 213.496542f);
        path.Cubic(78.117500f, 213.012022f, 
                   78.135150f, 212.861696f, 
                   78.417648f, 212.495032f);
        path.Close();
        path.Move(78.259216f, 212.372968f);
        path.Cubic(77.942964f, 212.783444f, 
                   77.909550f, 213.068038f, 
                   78.332619f, 213.632579f);
        path.Cubic(79.947697f, 215.014008f, 
                   81.256666f, 216.842776f, 
                   81.481390f, 219.870492f);
        path.Cubic(81.448579f, 220.298677f, 
                   81.584588f, 221.533248f, 
                   81.402356f, 221.669932f);
        path.Cubic(80.737343f, 220.965628f, 
                   79.872462f, 220.239481f, 
                   79.288182f, 219.702982f);
        path.Cubic(78.485435f, 219.182225f, 
                   77.530695f, 219.902034f, 
                   77.883841f, 220.804848f);
        path.Cubic(78.090365f, 221.418450f, 
                   78.593623f, 221.585523f, 
                   79.538895f, 222.564964f);
        path.Cubic(80.564393f, 223.565027f, 
                   80.920015f, 223.904490f, 
                   81.996084f, 224.849392f);
        path.Cubic(83.527271f, 223.541737f, 
                   84.828908f, 222.376912f, 
                   86.165964f, 221.005108f);
        path.Cubic(86.609762f, 220.523173f, 
                   86.581325f, 219.779869f, 
                   85.929510f, 219.526599f);
        path.Cubic(85.315373f, 219.198883f, 
                   84.925944f, 219.735093f, 
                   84.549095f, 220.136879f);
        path.Cubic(84.174359f, 220.433211f, 
                   83.368868f, 221.383129f, 
                   83.165157f, 221.402080f);
        path.Cubic(83.512127f, 218.788181f, 
                   83.039932f, 216.521794f, 
                   81.615922f, 214.631990f);
        path.Cubic(80.740173f, 213.460664f, 
                   80.729373f, 213.590683f, 
                   79.934822f, 212.758436f);
        path.Cubic(78.820125f, 211.890420f, 
                   78.540175f, 212.302200f, 
                   78.323414f, 212.335135f);
        path.Close();
    }

    private void SetPathData_path3582_f1(IRenderPath path)
    { // Label: filling of ST1
        path.Move(88.458146f, 218.416100f);
        path.Line(75.644375f, 218.416100f);
        path.Cubic(76.214448f, 219.471660f, 
                   76.986974f, 220.528030f, 
                   77.694896f, 221.286830f);
        path.Cubic(78.369583f, 222.054130f, 
                   79.068083f, 222.808190f, 
                   79.782458f, 223.543730f);
        path.Line(84.317417f, 223.543730f);
        path.Cubic(85.022972f, 222.808190f, 
                   85.717062f, 222.055890f, 
                   86.399687f, 221.286830f);
        path.Cubic(87.198419f, 220.311010f, 
                   87.982345f, 219.425380f, 
                   88.458146f, 218.416100f);
        path.Close();
    }

    private void SetPathData_path3582_s1(IRenderPath path)
    { // Label: stroke of ST1
        path.Move(88.338485f, 218.359689f);
        path.Cubic(87.870749f, 219.351860f, 
                   87.097667f, 220.225240f, 
                   86.297316f, 221.203037f);
        path.Cubic(85.618968f, 221.967119f, 
                   84.926613f, 222.717539f, 
                   84.221947f, 223.452152f);
        path.Line(79.838423f, 223.411439f);
        path.Cubic(79.164072f, 222.717143f, 
                   78.467799f, 221.965487f, 
                   77.794243f, 221.199474f);
        path.Cubic(77.089094f, 220.443562f, 
                   76.326560f, 219.400854f, 
                   75.760776f, 218.353236f);
        path.Line(88.245204f, 218.548392f);
        path.Close();
        path.Move(88.577807f, 218.472511f);
        path.Line(88.458146f, 218.283808f);
        path.Line(75.644375f, 218.283808f);
        path.Line(75.527974f, 218.478964f);
        path.Cubic(76.102336f, 219.542466f, 
                   76.884854f, 220.612498f, 
                   77.598165f, 221.377075f);
        path.Cubic(78.271367f, 222.142773f, 
                   78.972094f, 222.899237f, 
                   79.687558f, 223.635899f);
        path.Line(79.782458f, 223.676022f);
        path.Line(84.317417f, 223.676022f);
        path.Line(84.412887f, 223.635308f);
        path.Cubic(85.119331f, 222.898841f, 
                   85.815156f, 222.144661f, 
                   86.498626f, 221.374649f);
        path.Cubic(87.299171f, 220.396780f, 
                   88.093941f, 219.498900f, 
                   88.577807f, 218.472511f);
        path.Close();
    }

    private void SetPathData_path3626_f2(IRenderPath path)
    { // Label: filling of ST2
        path.Move(77.694896f, 221.286830f);
        path.Cubic(79.070729f, 222.847880f, 
                   80.528583f, 224.350710f, 
                   82.052583f, 225.766230f);
        path.Cubic(82.934528f, 224.944260f, 
                   83.793542f, 224.092300f, 
                   84.629625f, 223.210350f);
        path.Line(79.959729f, 218.418750f);
        path.Line(75.641729f, 218.418750f);
        path.Cubic(76.215234f, 219.473840f, 
                   76.986118f, 220.528310f, 
                   77.694896f, 221.286830f);
        path.Close();
    }

    private void SetPathData_path3626_s2(IRenderPath path)
    { // Label: stroke of ST2
        path.Move(77.791556f, 221.196509f);
        path.Cubic(77.088215f, 220.443807f, 
                   76.327245f, 219.402898f, 
                   75.757960f, 218.355572f);
        path.Line(79.903933f, 218.551042f);
        path.Line(84.446039f, 223.211521f);
        path.Cubic(83.698937f, 223.999806f, 
                   82.842829f, 224.848884f, 
                   81.962387f, 225.669453f);
        path.Cubic(80.621138f, 224.256124f, 
                   79.167885f, 222.758037f, 
                   77.794142f, 221.199359f);
        path.Close();
        path.Move(77.595650f, 221.374301f);
        path.Cubic(78.973573f, 222.937723f, 
                   80.436028f, 224.445296f, 
                   81.962552f, 225.863160f);
        path.Cubic(83.026227f, 225.039636f, 
                   83.888147f, 224.184794f, 
                   84.725632f, 223.301364f);
        path.Line(84.724365f, 223.118017f);
        path.Line(80.015525f, 218.286459f);
        path.Line(75.641729f, 218.286459f);
        path.Line(75.525498f, 218.481928f);
        path.Cubic(76.103223f, 219.544782f, 
                   76.884021f, 220.612813f, 
                   77.598236f, 221.377151f);
        path.Close();
    }

    private void SetPathData_path3650_f3(IRenderPath path)
    { // Label: filling of ST3
        path.Move(79.464958f, 223.207710f);
        path.Cubic(80.303688f, 224.086130f, 
                   81.166229f, 224.943380f, 
                   82.052583f, 225.766230f);
        path.Cubic(83.576583f, 224.350710f, 
                   85.023854f, 222.855810f, 
                   86.399688f, 221.286830f);
        path.Cubic(87.164845f, 220.476265f, 
                   87.826909f, 219.574258f, 
                   88.370833f, 218.601310f);
        path.Cubic(88.402583f, 218.540410f, 
                   88.429043f, 218.476960f, 
                   88.460793f, 218.413460f);
        path.Line(84.137500f, 218.413460f);
        path.Close();
    }

    private void SetPathData_path3650_s3(IRenderPath path)
    { // Label: stroke of ST3
        path.Move(79.648851f, 223.208568f);
        path.Line(84.193296f, 218.545751f);
        path.Line(88.460793f, 218.545751f);
        path.Line(88.342468f, 218.354297f);
        path.Cubic(88.308689f, 218.421855f, 
                   88.282661f, 218.484270f, 
                   88.253526f, 218.540153f);
        path.Cubic(87.715426f, 219.502569f, 
                   87.063034f, 220.391398f, 
                   86.303488f, 221.196019f);
        path.Cubic(84.926539f, 222.766136f, 
                   83.483979f, 224.256169f, 
                   81.962552f, 225.669300f);
        path.Cubic(81.257887f, 224.847960f, 
                   80.398173f, 223.993520f, 
                   79.560639f, 223.116352f);
        path.Close();
        path.Move(79.370219f, 223.115376f);
        path.Line(79.369277f, 223.299068f);
        path.Cubic(80.209203f, 224.178740f, 
                   81.074571f, 225.038800f, 
                   81.962576f, 225.863183f);
        path.Cubic(83.669187f, 224.445251f, 
                   85.121169f, 222.945484f, 
                   86.499154f, 221.374051f);
        path.Cubic(87.266655f, 220.561132f, 
                   87.938393f, 219.645946f, 
                   88.486305f, 218.665864f);
        path.Cubic(88.522505f, 218.596550f, 
                   88.549397f, 218.532065f, 
                   88.579118f, 218.472623f);
        path.Line(88.460793f, 218.281168f);
        path.Line(84.081704f, 218.281168f);
        path.Line(79.370219f, 223.115376f);
        path.Close();
    }

    private void SetPathData_path195_f4(IRenderPath path)
    { // Label: filling of ST3_zero
        path.Move(314.468750f, 239.058590f);
        path.Line(308.384770f, 245.300780f);
        path.Cubic(308.374770f, 246.611680f, 
                   308.274880f, 247.757200f, 
                   307.888670f, 248.046880f);
        path.Cubic(307.501020f, 247.699340f, 
                   307.109080f, 247.363720f, 
                   306.714840f, 247.015620f);
        path.Line(301.960940f, 251.892580f);
        path.Cubic(304.913230f, 254.761640f, 
                   306.571830f, 256.329060f, 
                   310.156250f, 259.476560f);
        path.Cubic(315.438940f, 254.539330f, 
                   320.352050f, 250.142330f, 
                   325.396480f, 244.966800f);
        path.Cubic(326.960850f, 243.267790f, 
                   326.868970f, 240.861500f, 
                   324.636720f, 239.994140f);
        path.Cubic(322.565070f, 238.891350f, 
                   321.272560f, 240.671180f, 
                   319.832030f, 242.207030f);
        path.Cubic(318.404250f, 243.341270f, 
                   315.282840f, 247.021510f, 
                   314.359380f, 247.107420f);
        path.Cubic(314.605870f, 244.289150f, 
                   314.643730f, 241.612540f, 
                   314.468750f, 239.058590f);
        path.Close();
    }

    private void SetPathData_path195_s4(IRenderPath path)
    { // Label: stroke of ST3_zero
        path.Move(313.969920f, 239.092767f);
        path.Cubic(314.143488f, 241.626116f, 
                   314.106179f, 244.263798f, 
                   313.861282f, 247.063856f);
        path.Cubic(315.532233f, 247.500467f, 
                   318.753761f, 243.702184f, 
                   320.143040f, 242.598530f);
        path.Cubic(321.658705f, 240.990359f, 
                   322.714065f, 239.537093f, 
                   324.401773f, 240.435501f);
        path.Cubic(326.381861f, 241.208647f, 
                   326.453347f, 243.080810f, 
                   325.028653f, 244.628122f);
        path.Cubic(320.005897f, 249.781125f, 
                   315.101476f, 254.170349f, 
                   309.814843f, 259.111265f);
        path.Cubic(306.908610f, 255.959382f, 
                   305.259190f, 254.400636f, 
                   302.309403f, 251.534009f);
        path.Line(306.741786f, 247.704293f);
        path.Cubic(306.780986f, 247.741037f, 
                   307.171488f, 248.075425f, 
                   307.554902f, 248.419168f);
        path.Cubic(308.753585f, 248.023160f, 
                   308.874604f, 246.635342f, 
                   308.884755f, 245.304594f);
        path.Line(314.033024f, 240.222005f);
        path.Close();
        path.Move(314.967580f, 239.024413f);
        path.Line(314.110688f, 238.709604f);
        path.Line(308.026708f, 244.951794f);
        path.Line(307.884785f, 245.296966f);
        path.Cubic(307.874936f, 246.588018f, 
                   307.796175f, 247.491240f, 
                   307.588655f, 247.646892f);
        path.Cubic(307.830552f, 247.323255f, 
                   307.437174f, 246.986403f, 
                   307.045779f, 246.640815f);
        path.Line(306.356799f, 246.666613f);
        path.Line(301.602899f, 251.543573f);
        path.Line(301.612477f, 252.251151f);
        path.Cubic(304.567270f, 255.122644f, 
                   306.235050f, 256.698738f, 
                   309.826338f, 259.852269f);
        path.Cubic(315.776404f, 254.908311f, 
                   320.698203f, 250.503535f, 
                   325.754539f, 245.315789f);
        path.Cubic(327.468353f, 243.454770f, 
                   327.356079f, 240.514353f, 
                   324.817809f, 239.528086f);
        path.Cubic(322.416075f, 238.245607f, 
                   320.886415f, 240.352001f, 
                   319.467341f, 241.864975f);
        path.Cubic(318.054739f, 242.980356f, 
                   315.033447f, 246.542553f, 
                   314.313065f, 246.609570f);
        path.Cubic(315.105561f, 244.314502f, 
                   315.143972f, 241.598964f, 
                   314.967580f, 239.024413f);
        path.Close();
    }

    private void SetPathData_path198_f5(IRenderPath path)
    { // Label: filling of ST2_zero
        path.Move(297.343750f, 239.978520f);
        path.Cubic(295.345110f, 240.044420f, 
                   293.794060f, 241.976970f, 
                   294.716800f, 244.335940f);
        path.Cubic(295.443390f, 246.493440f, 
                   297.253350f, 247.094530f, 
                   300.890620f, 250.863280f);
        path.Cubic(304.756990f, 254.633510f, 
                   306.095120f, 255.910460f, 
                   310.156250f, 259.476560f);
        path.Cubic(312.937590f, 256.877110f, 
                   315.614150f, 254.422000f, 
                   318.263670f, 251.929690f);
        path.Line(308.337890f, 241.742190f);
        path.Cubic(308.343890f, 243.769580f, 
                   308.645950f, 247.478870f, 
                   307.888670f, 248.046880f);
        path.Cubic(304.900720f, 245.368100f, 
                   301.630500f, 242.621280f, 
                   299.416020f, 240.587890f);
        path.Cubic(298.725570f, 240.141440f, 
                   298.009960f, 239.956530f, 
                   297.343750f, 239.978520f);
        path.Close();
    }

    private void SetPathData_path198_s5(IRenderPath path)
    { // Label: stroke of ST2_zero
        path.Move(297.360245f, 240.478247f);
        path.Cubic(297.954538f, 240.458631f, 
                   298.522079f, 240.605281f, 
                   299.144528f, 241.007761f);
        path.Cubic(301.300460f, 242.997039f, 
                   304.572959f, 245.745773f, 
                   307.554903f, 248.419169f);
        path.Cubic(309.166695f, 247.713296f, 
                   308.843829f, 243.748517f, 
                   308.837887f, 241.740710f);
        path.Line(317.550242f, 251.913940f);
        path.Cubic(315.273854f, 254.055656f, 
                   312.597889f, 256.510221f, 
                   309.814843f, 259.111264f);
        path.Cubic(306.432815f, 255.541584f, 
                   305.104131f, 254.273649f, 
                   301.239694f, 250.505304f);
        path.Cubic(297.527690f, 246.658788f, 
                   295.837647f, 246.097522f, 
                   295.190650f, 244.176360f);
        path.Cubic(294.365105f, 242.064284f, 
                   295.591232f, 240.536576f, 
                   297.360227f, 240.478248f);
        path.Close();
        path.Move(297.327273f, 239.478792f);
        path.Cubic(295.098988f, 239.552264f, 
                   293.223015f, 241.889656f, 
                   294.251157f, 244.518082f);
        path.Cubic(295.049133f, 246.889358f, 
                   296.979010f, 247.530272f, 
                   300.530847f, 251.210502f);
        path.Cubic(304.409849f, 254.993371f, 
                   305.757425f, 256.279336f, 
                   309.826338f, 259.852269f);
        path.Cubic(313.277291f, 257.243999f, 
                   315.954446f, 254.788344f, 
                   318.606253f, 252.293883f);
        path.Line(318.621793f, 251.580767f);
        path.Line(308.696013f, 241.393267f);
        path.Line(307.837893f, 241.743670f);
        path.Cubic(307.843951f, 243.790643f, 
                   308.125205f, 247.244444f, 
                   307.588653f, 247.646893f);
        path.Cubic(305.228481f, 244.990427f, 
                   301.960540f, 242.245521f, 
                   299.754194f, 240.219599f);
        path.Cubic(298.929061f, 239.677599f, 
                   298.065382f, 239.454429f, 
                   297.327255f, 239.478793f);
        path.Close();
    }

    private void SetPathData_path201_f6(IRenderPath path)
    { // Label: filling of ST1_zero
        path.Move(307.550780f, 235.445310f);
        path.Cubic(307.919040f, 237.151700f, 
                   308.193070f, 238.962890f, 
                   308.337890f, 240.914060f);
        path.Cubic(308.216450f, 242.553580f, 
                   308.749930f, 247.400880f, 
                   307.888670f, 248.046880f);
        path.Cubic(304.900720f, 245.368100f, 
                   301.630500f, 242.621280f, 
                   299.416020f, 240.587890f);
        path.Cubic(296.654240f, 238.802100f, 
                   293.486480f, 241.190650f, 
                   294.716800f, 244.335940f);
        path.Cubic(295.443390f, 246.493440f, 
                   297.253350f, 247.094530f, 
                   300.890620f, 250.863280f);
        path.Cubic(302.638470f, 252.567660f, 
                   303.814310f, 253.699200f, 
                   305.013670f, 254.826170f);
        path.Line(315.158200f, 254.826170f);
        path.Cubic(318.600520f, 251.633960f, 
                   321.988710f, 248.463140f, 
                   325.396480f, 244.966800f);
        path.Cubic(326.960850f, 243.267790f, 
                   326.868970f, 240.861500f, 
                   324.636720f, 239.994140f);
        path.Cubic(322.565070f, 238.891350f, 
                   321.272560f, 240.671180f, 
                   319.832030f, 242.207030f);
        path.Cubic(318.404250f, 243.341270f, 
                   315.282840f, 247.021510f, 
                   314.359380f, 247.107420f);
        path.Cubic(314.724950f, 242.927640f, 
                   314.640590f, 239.053700f, 
                   314.058590f, 235.445310f);
        path.Close();
    }

    private void SetPathData_path201_s6(IRenderPath path)
    { // Label: stroke of ST1_zero
        path.Move(308.165305f, 235.945309f);
        path.Line(313.630336f, 235.945309f);
        path.Cubic(314.141462f, 239.099168f, 
                   314.224475f, 242.911252f, 
                   313.861282f, 247.063856f);
        path.Cubic(315.532233f, 247.500467f, 
                   318.753761f, 243.702184f, 
                   320.143040f, 242.598530f);
        path.Cubic(321.658705f, 240.990359f, 
                   322.714065f, 239.537093f, 
                   324.401773f, 240.435501f);
        path.Cubic(326.381861f, 241.208647f, 
                   326.453347f, 243.080810f, 
                   325.028653f, 244.628122f);
        path.Cubic(321.638671f, 248.105922f, 
                   318.259702f, 251.268113f, 
                   314.818217f, 254.459549f);
        path.Line(305.211861f, 254.326171f);
        path.Cubic(304.158866f, 253.336861f, 
                   302.986361f, 252.208531f, 
                   301.239693f, 250.505303f);
        path.Cubic(297.527690f, 246.658788f, 
                   295.837647f, 246.097522f, 
                   295.190650f, 244.176360f);
        path.Cubic(294.090243f, 241.361608f, 
                   296.676221f, 239.411733f, 
                   299.144528f, 241.007761f);
        path.Cubic(301.300460f, 242.997039f, 
                   304.572959f, 245.745773f, 
                   307.554903f, 248.419169f);
        path.Cubic(309.278133f, 247.629712f, 
                   308.718483f, 242.544623f, 
                   308.836524f, 240.950994f);
        path.Cubic(308.690290f, 238.906906f, 
                   308.411079f, 237.061474f, 
                   308.039527f, 235.339832f);
        path.Close();
        path.Move(307.550780f, 234.945311f);
        path.Line(307.062033f, 235.550788f);
        path.Cubic(307.427001f, 237.241926f, 
                   307.695850f, 239.018874f, 
                   307.839262f, 240.951069f);
        path.Cubic(307.714417f, 242.562537f, 
                   308.221727f, 247.172048f, 
                   307.588654f, 247.646893f);
        path.Cubic(305.228481f, 244.990427f, 
                   301.960540f, 242.245521f, 
                   299.754194f, 240.219599f);
        path.Cubic(296.632259f, 238.192467f, 
                   292.882717f, 241.019692f, 
                   294.251157f, 244.518082f);
        path.Cubic(295.049133f, 246.889358f, 
                   296.979010f, 247.530272f, 
                   300.530847f, 251.210502f);
        path.Cubic(302.290579f, 252.926789f, 
                   303.469754f, 254.061539f, 
                   304.671284f, 255.190548f);
        path.Line(305.013670f, 255.326170f);
        path.Line(315.158200f, 255.326170f);
        path.Line(315.498183f, 255.192791f);
        path.Cubic(318.941338f, 251.999807f, 
                   322.338749f, 248.820358f, 
                   325.754539f, 245.315789f);
        path.Cubic(327.468353f, 243.454770f, 
                   327.356079f, 240.514353f, 
                   324.817809f, 239.528086f);
        path.Cubic(322.416075f, 238.245607f, 
                   320.886415f, 240.352001f, 
                   319.467341f, 241.864975f);
        path.Cubic(318.054739f, 242.980356f, 
                   315.033447f, 246.542553f, 
                   314.313065f, 246.609570f);
        path.Cubic(315.225425f, 242.944028f, 
                   315.139718f, 239.008232f, 
                   314.552210f, 235.365694f);
        path.Line(314.058590f, 234.945310f);
        path.Line(307.550780f, 234.945311f);
        path.Close();
    }

    private void SetPathData_path26748(IRenderPath path)
    { // Label: P98
        path.Move(22.675396f, 54.717215f);
        path.Cubic(21.029873f, 46.153592f, 
                   -0.047170f, 59.755750f, 
                   8.339139f, 70.332543f);
        path.Cubic(19.845680f, 84.844565f, 
                   44.317518f, 109.183560f, 
                   58.229515f, 121.297750f);
        path.Cubic(71.819716f, 108.297910f, 
                   95.272423f, 85.827866f, 
                   106.348270f, 71.743727f);
        path.Cubic(114.030210f, 61.975315f, 
                   100.795480f, 52.261306f, 
                   94.742791f, 59.028331f);
        path.Cubic(88.690256f, 65.795180f, 
                   74.413573f, 82.962394f, 
                   67.263255f, 88.938451f);
        path.Cubic(70.965109f, 57.305796f, 
                   57.823443f, 30.062415f, 
                   32.903435f, 14.251781f);
        path.Cubic(28.846131f, 11.492510f, 
                   23.783926f, 12.084887f, 
                   21.288855f, 15.164631f);
        path.Cubic(18.608809f, 18.472696f, 
                   18.767136f, 24.483509f, 
                   22.593460f, 27.259142f);
        path.Cubic(42.791713f, 40.465809f, 
                   56.477820f, 64.793155f, 
                   49.908499f, 90.420271f);
        path.Cubic(42.947527f, 83.578571f, 
                   24.748866f, 65.507958f, 
                   22.675396f, 54.717215f);
        path.Close();
    }

    private void SetPathData_path25475(IRenderPath path)
    { // Label: P10
        path.Move(30.280554f, 69.267686f);
        path.Cubic(24.647703f, 62.610781f, 
                   9.951412f, 72.166364f, 
                   18.788567f, 82.369472f);
        path.Cubic(31.107266f, 96.592263f, 
                   44.597501f, 109.083850f, 
                   58.229515f, 121.297750f);
        path.Cubic(71.819716f, 108.297910f, 
                   86.673464f, 95.882033f, 
                   97.749314f, 81.797894f);
        path.Cubic(105.431250f, 72.029482f, 
                   92.196524f, 62.315473f, 
                   86.143832f, 69.082498f);
        path.Cubic(80.091297f, 75.849347f, 
                   74.413573f, 82.962394f, 
                   67.263255f, 88.938451f);
        path.Cubic(70.965109f, 57.305796f, 
                   57.823443f, 30.062415f, 
                   32.903435f, 14.251781f);
        path.Cubic(28.846131f, 11.492510f, 
                   23.783926f, 12.084887f, 
                   21.288855f, 15.164631f);
        path.Cubic(18.608809f, 18.472696f, 
                   18.767136f, 24.483509f, 
                   22.593460f, 27.259142f);
        path.Cubic(42.791713f, 40.465809f, 
                   56.477820f, 64.793155f, 
                   49.908499f, 90.420271f);
        path.Cubic(42.947527f, 83.578571f, 
                   36.388920f, 76.486554f, 
                   30.280554f, 69.267686f);
        path.Close();
    }

    private void SetPathData_path25500(IRenderPath path)
    { // Label: P09
        path.Move(35.996649f, 78.283811f);
        path.Cubic(29.608337f, 77.663658f, 
                   21.581093f, 85.511696f, 
                   29.303562f, 93.095664f);
        path.Cubic(42.764762f, 106.315440f, 
                   44.758830f, 108.942220f, 
                   58.229515f, 121.297750f);
        path.Cubic(71.647946f, 108.071300f, 
                   78.158186f, 103.124230f, 
                   89.979541f, 90.023601f);
        path.Cubic(97.009666f, 82.232697f, 
                   88.427850f, 73.973018f, 
                   81.911957f, 75.638254f);
        path.Cubic(75.556796f, 80.747567f, 
                   70.207089f, 86.286742f, 
                   67.263255f, 88.938451f);
        path.Cubic(70.965109f, 57.305796f, 
                   57.823443f, 30.062415f, 
                   32.903435f, 14.251781f);
        path.Cubic(28.846131f, 11.492510f, 
                   23.783926f, 12.084887f, 
                   21.288855f, 15.164631f);
        path.Cubic(18.608809f, 18.472696f, 
                   18.767136f, 24.483509f, 
                   22.593460f, 27.259142f);
        path.Cubic(42.791713f, 40.465809f, 
                   57.018292f, 64.937808f, 
                   49.908499f, 90.420271f);
        path.Cubic(45.027773f, 86.375166f, 
                   40.129113f, 78.930110f, 
                   35.996649f, 78.283811f);
        path.Close();
    }

    private void SetPathData_path25502(IRenderPath path)
    { // Label: P08
        path.Move(44.446093f, 88.032542f);
        path.Cubic(40.143913f, 89.322664f, 
                   37.602730f, 97.532670f, 
                   42.243739f, 101.953640f);
        path.Cubic(48.244580f, 107.669970f, 
                   53.424491f, 113.954190f, 
                   58.593571f, 118.691240f);
        path.Cubic(63.972988f, 113.785320f, 
                   67.705180f, 110.023250f, 
                   76.293251f, 100.794420f);
        path.Cubic(82.239123f, 94.404923f, 
                   80.269318f, 86.707013f, 
                   76.251991f, 84.816686f);
        path.Cubic(72.998887f, 83.721006f, 
                   69.139473f, 86.820288f, 
                   67.263259f, 88.938451f);
        path.Cubic(70.965113f, 57.305796f, 
                   57.823447f, 30.062415f, 
                   32.903439f, 14.251781f);
        path.Cubic(28.846135f, 11.492510f, 
                   23.783930f, 12.084887f, 
                   21.288859f, 15.164631f);
        path.Cubic(18.608813f, 18.472696f, 
                   18.767140f, 24.483509f, 
                   22.593464f, 27.259142f);
        path.Cubic(42.791717f, 40.465809f, 
                   56.477824f, 64.793155f, 
                   49.908503f, 90.420271f);
        path.Cubic(48.562666f, 88.727596f, 
                   46.612058f, 87.418750f, 
                   44.446097f, 88.032542f);
        path.Close();
    }

    private void SetPathData_path25504(IRenderPath path)
    { // Label: P07
        path.Move(49.331859f, 92.470562f);
        path.Cubic(47.019600f, 94.149071f, 
                   48.527614f, 98.216880f, 
                   50.217980f, 100.473640f);
        path.Cubic(51.793212f, 102.576680f, 
                   54.511774f, 104.918870f, 
                   59.619952f, 104.984780f);
        path.Cubic(61.573229f, 105.009980f, 
                   65.316890f, 103.330540f, 
                   67.055783f, 101.150300f);
        path.Cubic(68.996824f, 98.716603f, 
                   70.026368f, 95.937948f, 
                   69.382787f, 92.105978f);
        path.Cubic(69.292897f, 91.570731f, 
                   67.098166f, 90.099978f, 
                   67.263255f, 88.938451f);
        path.Cubic(70.965109f, 57.305796f, 
                   57.823443f, 30.062415f, 
                   32.903435f, 14.251781f);
        path.Cubic(28.846131f, 11.492510f, 
                   23.783926f, 12.084887f, 
                   21.288855f, 15.164631f);
        path.Cubic(18.608809f, 18.472696f, 
                   18.767136f, 24.483509f, 
                   22.593460f, 27.259142f);
        path.Cubic(42.791713f, 40.465809f, 
                   56.477820f, 64.793155f, 
                   49.908499f, 90.420271f);
        path.Cubic(49.824629f, 90.706457f, 
                   49.536824f, 91.975231f, 
                   49.331859f, 92.470562f);
        path.Close();
    }

    private void SetPathData_path25506(IRenderPath path)
    { // Label: P06
        path.Move(53.600483f, 89.877845f);
        path.Cubic(54.359512f, 90.697433f, 
                   54.881813f, 91.014134f, 
                   55.867728f, 91.566948f);
        path.Cubic(56.996052f, 92.199612f, 
                   58.960615f, 92.573524f, 
                   60.401171f, 92.419219f);
        path.Cubic(62.365155f, 92.208847f, 
                   63.273339f, 91.625557f, 
                   63.948532f, 91.247651f);
        path.Cubic(64.446286f, 90.969058f, 
                   66.077348f, 89.753586f, 
                   66.817571f, 88.352157f);
        path.Cubic(67.131156f, 87.758460f, 
                   67.494729f, 86.733677f, 
                   67.621513f, 85.235678f);
        path.Cubic(69.915708f, 55.185523f, 
                   56.845667f, 29.442060f, 
                   32.903435f, 14.251781f);
        path.Cubic(28.846131f, 11.492510f, 
                   23.783926f, 12.084887f, 
                   21.288855f, 15.164631f);
        path.Cubic(18.608809f, 18.472696f, 
                   18.767136f, 24.483509f, 
                   22.593460f, 27.259142f);
        path.Cubic(40.277889f, 38.822141f, 
                   53.042194f, 59.633195f, 
                   51.454250f, 81.008601f);
        path.Cubic(51.372410f, 85.106791f, 
                   51.134942f, 87.203828f, 
                   53.600483f, 89.877845f);
        path.Close();
    }

    private void SetPathData_path27072(IRenderPath path)
    { // Label: P05
        path.Move(53.187949f, 72.749394f);
        path.Cubic(54.463472f, 74.176840f, 
                   55.990557f, 74.505754f, 
                   56.666539f, 74.802829f);
        path.Cubic(57.850813f, 75.323284f, 
                   59.081549f, 75.229571f, 
                   60.272415f, 75.070758f);
        path.Cubic(61.208865f, 74.945874f, 
                   62.393776f, 74.547206f, 
                   63.368252f, 73.974216f);
        path.Cubic(64.454484f, 73.335514f, 
                   65.428217f, 72.350406f, 
                   66.045185f, 71.458897f);
        path.Cubic(67.376699f, 69.534882f, 
                   67.258705f, 67.269295f, 
                   66.567929f, 63.800497f);
        path.Cubic(62.776583f, 43.083873f, 
                   50.917333f, 25.680796f, 
                   32.903435f, 14.251781f);
        path.Cubic(28.846131f, 11.492510f, 
                   23.783926f, 12.084887f, 
                   21.288855f, 15.164631f);
        path.Cubic(18.608809f, 18.472696f, 
                   18.767136f, 24.483509f, 
                   22.593460f, 27.259142f);
        path.Cubic(36.073305f, 36.072965f, 
                   46.652694f, 49.839847f, 
                   50.246517f, 65.640581f);
        path.Cubic(51.122372f, 69.820778f, 
                   51.591364f, 70.962647f, 
                   53.187949f, 72.749394f);
        path.Close();
    }

    private void SetPathData_path27852(IRenderPath path)
    { // Label: P04
        path.Move(48.676209f, 55.809045f);
        path.Cubic(49.668679f, 56.310615f, 
                   50.645883f, 56.649310f, 
                   52.407337f, 56.842442f);
        path.Cubic(53.604029f, 56.973652f, 
                   54.819489f, 56.784822f, 
                   55.969307f, 56.245818f);
        path.Cubic(56.935591f, 55.792852f, 
                   57.818583f, 55.203984f, 
                   58.676796f, 54.446797f);
        path.Cubic(59.999680f, 52.655102f, 
                   60.260095f, 52.643267f, 
                   60.603720f, 51.460920f);
        path.Cubic(61.199179f, 49.681555f, 
                   62.277925f, 47.867697f, 
                   57.908601f, 40.070617f);
        path.Cubic(51.961182f, 29.759186f, 
                   43.496443f, 20.972572f, 
                   32.903435f, 14.251781f);
        path.Cubic(28.846131f, 11.492510f, 
                   23.783926f, 12.084887f, 
                   21.288855f, 15.164631f);
        path.Cubic(18.608809f, 18.472696f, 
                   18.767136f, 24.483509f, 
                   22.593460f, 27.259142f);
        path.Cubic(30.858448f, 32.663221f, 
                   38.033048f, 39.929336f, 
                   43.175641f, 48.384608f);
        path.Cubic(45.573465f, 52.198191f, 
                   46.505191f, 54.711866f, 
                   48.676209f, 55.809045f);
        path.Close();
    }

    private void SetPathData_path28596(IRenderPath path)
    { // Label: P03
        path.Move(37.636193f, 37.670208f);
        path.Cubic(39.606963f, 37.609998f, 
                   39.703690f, 37.610098f, 
                   40.679496f, 37.307629f);
        path.Cubic(41.830051f, 36.950995f, 
                   42.966752f, 36.415535f, 
                   43.880514f, 35.630675f);
        path.Cubic(44.684332f, 34.940249f, 
                   45.256236f, 34.085091f, 
                   45.763729f, 33.069656f);
        path.Cubic(46.266630f, 32.063409f, 
                   46.450397f, 30.952183f, 
                   46.641583f, 29.890454f);
        path.Cubic(47.466340f, 25.310282f, 
                   42.101543f, 21.187109f, 
                   39.885278f, 19.222468f);
        path.Cubic(37.674276f, 17.460208f, 
                   35.345406f, 15.801103f, 
                   32.903435f, 14.251781f);
        path.Cubic(28.846131f, 11.492510f, 
                   23.783926f, 12.084887f, 
                   21.288855f, 15.164631f);
        path.Cubic(18.608809f, 18.472696f, 
                   18.767136f, 24.483509f, 
                   22.593460f, 27.259142f);
        path.Cubic(24.960212f, 28.806647f, 
                   27.237550f, 30.506842f, 
                   29.403365f, 32.343926f);
        path.Cubic(30.938997f, 33.716803f, 
                   34.217359f, 37.774657f, 
                   37.636193f, 37.670208f);
        path.Close();
    }

    private void SetPathData_path30398(IRenderPath path)
    { // Label: P02
        path.Move(30.713802f, 29.002648f);
        path.Cubic(31.268946f, 28.800259f, 
                   32.461427f, 28.108877f, 
                   32.926213f, 27.748834f);
        path.Cubic(33.631902f, 27.202177f, 
                   34.258401f, 26.541628f, 
                   34.784177f, 25.820247f);
        path.Cubic(35.263431f, 25.162695f, 
                   35.804580f, 24.304766f, 
                   35.939220f, 23.669805f);
        path.Cubic(36.096407f, 22.928511f, 
                   36.135788f, 22.089552f, 
                   36.145003f, 21.383238f);
        path.Cubic(36.167043f, 19.694220f, 
                   35.719935f, 17.956302f, 
                   34.980500f, 16.417448f);
        path.Cubic(34.569332f, 15.827780f, 
                   33.324345f, 14.518830f, 
                   32.903435f, 14.251781f);
        path.Cubic(28.846131f, 11.492510f, 
                   23.783926f, 12.084887f, 
                   21.288855f, 15.164631f);
        path.Cubic(18.608809f, 18.472696f, 
                   18.767136f, 24.483509f, 
                   22.593460f, 27.259142f);
        path.Cubic(22.944552f, 27.488704f, 
                   24.445166f, 28.522806f, 
                   24.792250f, 28.759036f);
        path.Cubic(26.998628f, 29.605084f, 
                   29.872205f, 29.307334f, 
                   30.713802f, 29.002648f);
        path.Close();
    }

    private void SetPathData_path32072(IRenderPath path)
    { // Label: P01
        path.Move(22.367432f, 16.795763f);
        path.Cubic(22.804724f, 16.647008f, 
                   22.583648f, 16.660379f, 
                   22.670959f, 16.569177f);
        path.Cubic(22.747619f, 16.489097f, 
                   22.813971f, 16.395944f, 
                   22.858109f, 16.294249f);
        path.Cubic(22.920849f, 16.149704f, 
                   22.954709f, 15.990469f, 
                   22.961875f, 15.833059f);
        path.Cubic(22.966075f, 15.739889f, 
                   22.956875f, 15.643447f, 
                   22.925515f, 15.555621f);
        path.Cubic(22.855075f, 15.358578f, 
                   22.750218f, 15.161738f, 
                   22.593972f, 15.022542f);
        path.Cubic(22.447134f, 14.891728f, 
                   22.257107f, 14.767619f, 
                   22.060474f, 14.770663f);
        path.Cubic(21.771716f, 14.775163f, 
                   22.279140f, 14.251477f, 
                   21.288851f, 15.164631f);
        path.Cubic(20.512709f, 15.880318f, 
                   20.697016f, 15.917301f, 
                   20.955960f, 16.377253f);
        path.Cubic(21.063455f, 16.568193f, 
                   21.281091f, 16.740742f, 
                   21.549247f, 16.856117f);
        path.Cubic(21.861674f, 16.990540f, 
                   21.813548f, 16.984177f, 
                   22.367428f, 16.795767f);
        path.Close();
    }

    private void SetPathData_path33110(IRenderPath path)
    { // Label: P99
        path.Move(21.288855f, 15.164631f);
        path.Cubic(21.981717f, 15.165008f, 
                   20.677810f, 15.277292f, 
                   21.288855f, 15.164631f);
        path.Cubic(21.793451f, 15.071601f, 
                   20.938787f, 15.503594f, 
                   21.288855f, 15.164631f);
        path.Cubic(21.710330f, 14.756526f, 
                   21.179390f, 15.843055f, 
                   21.288855f, 15.164631f);
        path.Cubic(21.379835f, 14.600753f, 
                   20.518434f, 15.355105f, 
                   21.288855f, 15.164631f);
        path.Cubic(20.967540f, 14.409603f, 
                   21.780687f, 15.567675f, 
                   21.288855f, 15.164631f);
        path.Cubic(21.100981f, 15.108301f, 
                   21.456227f, 15.263541f, 
                   21.288855f, 15.164631f);
        path.Cubic(20.878044f, 15.448860f, 
                   21.973052f, 14.438759f, 
                   21.288855f, 15.164631f);
        path.Cubic(20.707998f, 15.780869f, 
                   21.599177f, 14.562499f, 
                   21.288855f, 15.164631f);
        path.Cubic(21.428465f, 15.249651f, 
                   21.150839f, 15.077141f, 
                   21.288855f, 15.164631f);
        path.Cubic(21.967742f, 15.863350f, 
                   20.725943f, 14.880583f, 
                   21.288855f, 15.164631f);
        path.Close();
    }

    private void SetPathData_path174(IRenderPath path)
    { // Label: 
        path.Move(81.522437f, 207.363850f);
        path.Line(81.504897f, 196.561520f);
        path.Cubic(81.504897f, 196.508120f, 
                   81.468177f, 196.484920f, 
                   81.444037f, 196.468920f);
        path.Cubic(81.362907f, 196.412420f, 
                   80.980322f, 196.382120f, 
                   80.615122f, 196.378420f);
        path.Cubic(80.313371f, 196.375420f, 
                   80.023488f, 196.390420f, 
                   79.925328f, 196.423920f);
        path.Cubic(79.832728f, 196.455720f, 
                   79.771870f, 196.500620f, 
                   79.771870f, 196.531060f);
        path.Line(79.789410f, 207.363830f);
        path.Cubic(79.789410f, 207.609900f, 
                   80.319486f, 207.632550f, 
                   80.618284f, 207.632760f);
        path.Cubic(80.928666f, 207.636760f, 
                   81.522877f, 207.634760f, 
                   81.522437f, 207.363850f);
        path.Close();
    }

    private void SetPathData_path171(IRenderPath path)
    { // Label: 
        path.Move(82.783531f, 205.350180f);
        path.Line(82.783538f, 195.919440f);
        path.Cubic(82.785838f, 195.868540f, 
                   82.780438f, 195.805640f, 
                   82.779838f, 195.754470f);
        path.Cubic(82.056880f, 196.178350f, 
                   81.414864f, 196.413010f, 
                   80.580323f, 196.436530f);
        path.Cubic(79.785521f, 196.415830f, 
                   79.180786f, 196.287550f, 
                   78.487927f, 195.897570f);
        path.Cubic(78.488040f, 195.930470f, 
                   78.487478f, 195.982970f, 
                   78.487927f, 196.005920f);
        path.Line(78.487927f, 205.436650f);
        path.Cubic(78.492027f, 206.683360f, 
                   79.305302f, 207.606540f, 
                   80.640341f, 207.610590f);
        path.Cubic(81.976342f, 207.607590f, 
                   82.779461f, 206.597840f, 
                   82.783531f, 205.350180f);
        path.Close();
    }

    private void SetPathData_path168(IRenderPath path)
    { // Label: 
        path.Move(91.831583f, 205.620850f);
        path.Line(91.831583f, 196.013830f);
        path.Cubic(91.833083f, 195.658750f, 
                   91.546376f, 195.369710f, 
                   91.191291f, 195.368250f);
        path.Cubic(91.191291f, 195.368250f, 
                   84.129562f, 196.042940f, 
                   80.375125f, 196.042940f);
        path.Cubic(76.874688f, 196.042940f, 
                   70.090771f, 195.429100f, 
                   70.082833f, 195.429100f);
        path.Cubic(69.724992f, 195.430100f, 
                   69.434852f, 195.719500f, 
                   69.431958f, 196.077330f);
        path.Line(69.431958f, 205.620850f);
        path.Cubic(69.431958f, 206.957000f, 
                   74.337333f, 208.052380f, 
                   80.631770f, 208.052380f);
        path.Cubic(86.928854f, 208.052380f, 
                   91.831583f, 206.957000f, 
                   91.831583f, 205.620850f);
        path.Close();
    }

    private void SetPathData_path165(IRenderPath path)
    { // Label: 
        path.Move(96.572916f, 205.620820f);
        path.Line(96.572916f, 196.013790f);
        path.Cubic(96.571416f, 193.046160f, 
                   94.166856f, 190.640380f, 
                   90.969042f, 190.649380f);
        path.Cubic(88.164458f, 190.902070f, 
                   83.087104f, 191.312180f, 
                   80.385708f, 191.312180f);
        path.Cubic(78.086479f, 191.312180f, 
                   73.802875f, 191.005260f, 
                   70.324927f, 190.708910f);
        path.Cubic(67.123743f, 190.700910f, 
                   64.718810f, 193.104970f, 
                   64.714437f, 196.072000f);
        path.Line(64.714437f, 205.615520f);
        path.Cubic(66.078541f, 212.500480f, 
                   74.234517f, 212.751120f, 
                   80.646322f, 212.772500f);
        path.Cubic(85.706393f, 212.568220f, 
                   96.466017f, 212.784900f, 
                   96.572916f, 205.620820f);
        path.Close();
    }

    private void SetPathData_path61670(IRenderPath path)
    { // Label: 
        path.Move(80.891013f, 207.363850f);
        path.Line(80.886113f, 196.561520f);
        path.Cubic(80.886113f, 196.508120f, 
                   80.875883f, 196.484920f, 
                   80.869153f, 196.468920f);
        path.Cubic(80.846553f, 196.412420f, 
                   80.739959f, 196.382120f, 
                   80.638212f, 196.378420f);
        path.Cubic(80.554142f, 196.375420f, 
                   80.473380f, 196.390420f, 
                   80.446032f, 196.423920f);
        path.Cubic(80.420232f, 196.455720f, 
                   80.403282f, 196.500620f, 
                   80.403282f, 196.531060f);
        path.Line(80.408182f, 207.363830f);
        path.Cubic(80.408182f, 207.609900f, 
                   80.555864f, 207.632550f, 
                   80.639111f, 207.632760f);
        path.Cubic(80.725581f, 207.636760f, 
                   80.891136f, 207.634760f, 
                   80.891014f, 207.363850f);
        path.Close();
    }

    private void SetPathData_use27516(IRenderPath path)
    { // Label: line
        path.Move(82.783531f, 205.217889f);
        path.Line(82.783478f, 205.217888f);
        path.Line(82.651187f, 205.349854f);
        path.Cubic(82.650183f, 205.757183f, 
                   82.562979f, 206.150050f, 
                   82.366287f, 206.503060f);
        path.Cubic(81.935240f, 207.340533f, 
                   80.916426f, 207.649572f, 
                   80.035301f, 207.402685f);
        path.Cubic(79.186373f, 207.209138f, 
                   78.631211f, 206.405509f, 
                   78.622905f, 205.551274f);
        path.Cubic(78.616512f, 202.334291f, 
                   78.622012f, 199.115966f, 
                   78.620211f, 195.897496f);
        path.Cubic(78.822996f, 196.240441f, 
                   79.271868f, 196.411223f, 
                   79.729194f, 196.490097f);
        path.Cubic(80.796485f, 196.710882f, 
                   81.938377f, 196.438685f, 
                   82.850149f, 195.866526f);
        path.Cubic(82.656139f, 198.952987f, 
                   82.648839f, 202.151519f, 
                   82.651240f, 205.350279f);
        path.Line(82.783531f, 205.217889f);
        path.Close();
        path.Move(82.783531f, 205.482472f);
        path.Line(82.915822f, 205.350081f);
        path.Cubic(82.913423f, 202.151721f, 
                   82.920723f, 198.952933f, 
                   82.912122f, 195.754114f);
        path.Cubic(81.834645f, 196.191415f, 
                   80.792407f, 196.439858f, 
                   79.778468f, 196.230180f);
        path.Cubic(79.342046f, 196.154837f, 
                   78.936132f, 196.000399f, 
                   78.553345f, 195.782589f);
        path.Cubic(78.357428f, 199.115814f, 
                   78.351928f, 202.334329f, 
                   78.358329f, 205.552823f);
        path.Cubic(78.367429f, 206.489171f, 
                   79.027209f, 207.444242f, 
                   79.970225f, 207.659057f);
        path.Cubic(80.919364f, 207.925168f, 
                   82.119242f, 207.561207f, 
                   82.599481f, 206.627983f);
        path.Cubic(82.812905f, 206.245090f, 
                   82.914695f, 205.786517f, 
                   82.915769f, 205.350506f);
        path.Line(82.783478f, 205.482472f);
        path.Line(82.783531f, 205.482472f);
        path.Close();
    }

    private void SetPathData_path322(IRenderPath path)
    { // Label: 
        path.Move(58.115729f, 169.335900f);
        path.Cubic(58.167406f, 169.335887f, 
                   58.218292f, 169.348594f, 
                   58.263896f, 169.372900f);
        path.Cubic(58.404683f, 169.455629f, 
                   58.452012f, 169.636662f, 
                   58.369729f, 169.777710f);
        path.Line(58.171292f, 170.119020f);
        path.Line(58.121022f, 170.209020f);
        path.Line(58.208332f, 170.264620f);
        path.Line(58.380311f, 170.362520f);
        path.Cubic(58.448384f, 170.401685f, 
                   58.497935f, 170.466483f, 
                   58.517895f, 170.542440f);
        path.Cubic(58.539185f, 170.617372f, 
                   58.528659f, 170.697765f, 
                   58.488795f, 170.764690f);
        path.Cubic(58.434890f, 170.859311f, 
                   58.333053f, 170.916336f, 
                   58.224211f, 170.912850f);
        path.Cubic(58.173024f, 170.912889f, 
                   58.122766f, 170.899178f, 
                   58.078690f, 170.873150f);
        path.Line(57.906711f, 170.775250f);
        path.Line(57.819401f, 170.724950f);
        path.Line(57.769131f, 170.812250f);
        path.Line(57.570693f, 171.153560f);
        path.Line(57.520423f, 171.243560f);
        path.Line(57.607733f, 171.293860f);
        path.Line(58.128962f, 171.587550f);
        path.Cubic(58.246810f, 171.653060f, 
                   58.304913f, 171.790398f, 
                   58.269860f, 171.920595f);
        path.Cubic(58.234807f, 172.050791f, 
                   58.115605f, 172.140393f, 
                   57.980796f, 172.137880f);
        path.Cubic(57.929609f, 172.137919f, 
                   57.879351f, 172.124208f, 
                   57.835275f, 172.098180f);
        path.Line(57.306108f, 171.801840f);
        path.Line(57.218798f, 171.751540f);
        path.Line(57.168528f, 171.838840f);
        path.Line(56.639361f, 172.738420f);
        path.Line(56.602321f, 172.801920f);
        path.Line(56.652591f, 172.857520f);
        path.Cubic(56.792401f, 173.007575f, 
                   56.894041f, 173.189077f, 
                   56.948925f, 173.386690f);
        path.Line(56.970095f, 173.460790f);
        path.Line(58.208345f, 173.460790f);
        path.Line(58.208345f, 172.764940f);
        path.Cubic(58.197720f, 172.652873f, 
                   58.251511f, 172.544462f, 
                   58.347178f, 172.485134f);
        path.Cubic(58.442845f, 172.425806f, 
                   58.563866f, 172.425806f, 
                   58.659533f, 172.485134f);
        path.Cubic(58.755200f, 172.544462f, 
                   58.808991f, 172.652873f, 
                   58.798366f, 172.764940f);
        path.Line(58.798366f, 173.460790f);
        path.Line(59.396324f, 173.460790f);
        path.Line(59.396324f, 173.161810f);
        path.Cubic(59.385699f, 173.049743f, 
                   59.439490f, 172.941332f, 
                   59.535157f, 172.882004f);
        path.Cubic(59.630824f, 172.822676f, 
                   59.751845f, 172.822676f, 
                   59.847512f, 172.882004f);
        path.Cubic(59.943179f, 172.941332f, 
                   59.996970f, 173.049743f, 
                   59.986345f, 173.161810f);
        path.Line(59.986345f, 173.460790f);
        path.Line(60.483762f, 173.460790f);
        path.Cubic(60.595831f, 173.450163f, 
                   60.704243f, 173.503953f, 
                   60.763572f, 173.599621f);
        path.Cubic(60.822902f, 173.695288f, 
                   60.822902f, 173.816312f, 
                   60.763572f, 173.911979f);
        path.Cubic(60.704243f, 174.007647f, 
                   60.595831f, 174.061437f, 
                   60.483762f, 174.050810f);
        path.Line(59.986345f, 174.050810f);
        path.Line(59.986345f, 174.349790f);
        path.Cubic(59.971921f, 174.501933f, 
                   59.844160f, 174.618155f, 
                   59.691334f, 174.618155f);
        path.Cubic(59.538509f, 174.618155f, 
                   59.410748f, 174.501933f, 
                   59.396324f, 174.349790f);
        path.Line(59.396324f, 174.050810f);
        path.Line(58.798366f, 174.050810f);
        path.Line(58.798366f, 174.746670f);
        path.Cubic(58.783942f, 174.898813f, 
                   58.656181f, 175.015035f, 
                   58.503355f, 175.015035f);
        path.Cubic(58.350530f, 175.015035f, 
                   58.222769f, 174.898813f, 
                   58.208345f, 174.746670f);
        path.Line(58.208345f, 174.050810f);
        path.Line(56.978033f, 174.050810f);
        path.Line(56.956863f, 174.122210f);
        path.Cubic(56.897143f, 174.310522f, 
                   56.794837f, 174.482542f, 
                   56.657884f, 174.624920f);
        path.Line(56.604964f, 174.680520f);
        path.Line(56.642004f, 174.746720f);
        path.Line(57.171171f, 175.667470f);
        path.Line(57.221441f, 175.754770f);
        path.Line(57.308751f, 175.704470f);
        path.Line(57.837918f, 175.408130f);
        path.Cubic(57.881993f, 175.382102f, 
                   57.932251f, 175.368391f, 
                   57.983438f, 175.368430f);
        path.Cubic(58.118247f, 175.365916f, 
                   58.237450f, 175.455519f, 
                   58.272503f, 175.585715f);
        path.Cubic(58.307556f, 175.715911f, 
                   58.249453f, 175.853250f, 
                   58.131605f, 175.918760f);
        path.Line(57.618313f, 176.215090f);
        path.Line(57.531003f, 176.265390f);
        path.Line(57.581273f, 176.352690f);
        path.Line(57.779710f, 176.696650f);
        path.Line(57.829980f, 176.783950f);
        path.Line(57.917290f, 176.733650f);
        path.Line(58.089269f, 176.635750f);
        path.Cubic(58.133345f, 176.609722f, 
                   58.183603f, 176.596011f, 
                   58.234790f, 176.596050f);
        path.Cubic(58.369606f, 176.593528f, 
                   58.488819f, 176.683133f, 
                   58.523873f, 176.813336f);
        path.Cubic(58.558927f, 176.943540f, 
                   58.500816f, 177.080885f, 
                   58.382956f, 177.146390f);
        path.Line(58.210977f, 177.244290f);
        path.Line(58.123667f, 177.294590f);
        path.Line(58.173937f, 177.381890f);
        path.Line(58.372375f, 177.725840f);
        path.Cubic(58.412084f, 177.793789f, 
                   58.422582f, 177.874922f, 
                   58.401475f, 177.950740f);
        path.Cubic(58.382332f, 178.025652f, 
                   58.333648f, 178.089610f, 
                   58.266538f, 178.128010f);
        path.Cubic(58.221638f, 178.154376f, 
                   58.170438f, 178.168095f, 
                   58.118371f, 178.167710f);
        path.Cubic(58.010223f, 178.171146f, 
                   57.908801f, 178.115363f, 
                   57.853788f, 178.022190f);
        path.Line(57.655350f, 177.678230f);
        path.Line(57.605080f, 177.590930f);
        path.Line(57.517770f, 177.641230f);
        path.Line(57.345791f, 177.739130f);
        path.Cubic(57.301715f, 177.765158f, 
                   57.251457f, 177.778869f, 
                   57.200270f, 177.778830f);
        path.Cubic(57.091425f, 177.782314f, 
                   56.989589f, 177.725284f, 
                   56.935686f, 177.630660f);
        path.Cubic(56.895822f, 177.563735f, 
                   56.885296f, 177.483342f, 
                   56.906586f, 177.408410f);
        path.Cubic(56.926549f, 177.332457f, 
                   56.976099f, 177.267663f, 
                   57.044170f, 177.228500f);
        path.Line(57.216149f, 177.130600f);
        path.Line(57.303459f, 177.080300f);
        path.Line(57.253189f, 176.990300f);
        path.Line(57.054752f, 176.648990f);
        path.Line(57.004482f, 176.561690f);
        path.Line(56.914522f, 176.611990f);
        path.Line(56.401230f, 176.908320f);
        path.Cubic(56.357154f, 176.934348f, 
                   56.306896f, 176.948059f, 
                   56.255709f, 176.948020f);
        path.Cubic(56.122889f, 176.947205f, 
                   56.006836f, 176.858111f, 
                   55.971732f, 176.730012f);
        path.Cubic(55.936628f, 176.601912f, 
                   55.991048f, 176.466102f, 
                   56.104897f, 176.397690f);
        path.Line(56.634063f, 176.101350f);
        path.Line(56.721373f, 176.048450f);
        path.Line(56.671103f, 175.961150f);
        path.Line(56.141936f, 175.037760f);
        path.Line(56.104896f, 174.971660f);
        path.Line(56.030816f, 174.990160f);
        path.Cubic(55.936100f, 175.011054f, 
                   55.839414f, 175.021715f, 
                   55.742421f, 175.021960f);
        path.Cubic(55.645437f, 175.021554f, 
                   55.548767f, 175.010895f, 
                   55.454025f, 174.990160f);
        path.Line(55.379945f, 174.971660f);
        path.Line(55.342905f, 175.037760f);
        path.Line(54.813738f, 175.961150f);
        path.Line(54.763468f, 176.048450f);
        path.Line(54.850778f, 176.101350f);
        path.Line(55.366715f, 176.397690f);
        path.Cubic(55.484563f, 176.463200f, 
                   55.542666f, 176.600538f, 
                   55.507613f, 176.730735f);
        path.Cubic(55.472560f, 176.860931f, 
                   55.353358f, 176.950533f, 
                   55.218549f, 176.948020f);
        path.Cubic(55.167217f, 176.949187f, 
                   55.116655f, 176.935393f, 
                   55.073028f, 176.908320f);
        path.Line(54.543861f, 176.611990f);
        path.Line(54.456551f, 176.561690f);
        path.Line(54.406281f, 176.648990f);
        path.Line(54.207843f, 176.990300f);
        path.Line(54.157573f, 177.080300f);
        path.Line(54.244883f, 177.130600f);
        path.Line(54.416862f, 177.228500f);
        path.Cubic(54.484130f, 177.267968f, 
                   54.532743f, 177.332782f, 
                   54.551800f, 177.408410f);
        path.Cubic(54.573087f, 177.483343f, 
                   54.562557f, 177.563737f, 
                   54.522690f, 177.630660f);
        path.Cubic(54.469226f, 177.725724f, 
                   54.367098f, 177.782918f, 
                   54.258107f, 177.778830f);
        path.Cubic(54.206920f, 177.778869f, 
                   54.156662f, 177.765158f, 
                   54.112586f, 177.739130f);
        path.Line(53.940607f, 177.641230f);
        path.Line(53.853297f, 177.590930f);
        path.Line(53.803027f, 177.678230f);
        path.Line(53.604589f, 178.022190f);
        path.Cubic(53.549570f, 178.115358f, 
                   53.448145f, 178.171132f, 
                   53.340000f, 178.167690f);
        path.Cubic(53.288814f, 178.167732f, 
                   53.238556f, 178.154025f, 
                   53.194479f, 178.128000f);
        path.Cubic(53.126589f, 178.089217f, 
                   53.076966f, 178.024963f, 
                   53.056604f, 177.949474f);
        path.Cubic(53.036243f, 177.873985f, 
                   53.046822f, 177.793493f, 
                   53.086000f, 177.725830f);
        path.Line(53.284437f, 177.381880f);
        path.Line(53.334707f, 177.294580f);
        path.Line(53.247397f, 177.244280f);
        path.Line(53.075418f, 177.146380f);
        path.Cubic(52.957558f, 177.080875f, 
                   52.899447f, 176.943530f, 
                   52.934501f, 176.813326f);
        path.Cubic(52.969555f, 176.683123f, 
                   53.088768f, 176.593518f, 
                   53.223584f, 176.596040f);
        path.Cubic(53.275651f, 176.595655f, 
                   53.326851f, 176.609374f, 
                   53.371751f, 176.635740f);
        path.Line(53.541084f, 176.733640f);
        path.Line(53.631044f, 176.783940f);
        path.Line(53.681314f, 176.696640f);
        path.Line(53.879752f, 176.352680f);
        path.Line(53.930022f, 176.265380f);
        path.Line(53.842712f, 176.215080f);
        path.Line(53.326775f, 175.918750f);
        path.Cubic(53.208927f, 175.853240f, 
                   53.150824f, 175.715902f, 
                   53.185877f, 175.585705f);
        path.Cubic(53.220930f, 175.455509f, 
                   53.340132f, 175.365907f, 
                   53.474941f, 175.368420f);
        path.Cubic(53.526273f, 175.367253f, 
                   53.576835f, 175.381047f, 
                   53.620462f, 175.408120f);
        path.Line(54.149629f, 175.704460f);
        path.Line(54.236939f, 175.754760f);
        path.Line(54.287209f, 175.667460f);
        path.Line(54.816376f, 174.746710f);
        path.Line(54.856066f, 174.680510f);
        path.Line(54.803146f, 174.624910f);
        path.Cubic(54.665388f, 174.482684f, 
                   54.562187f, 174.310681f, 
                   54.501521f, 174.122200f);
        path.Line(54.480351f, 174.050800f);
        path.Line(53.250039f, 174.050800f);
        path.Line(53.250039f, 174.746660f);
        path.Cubic(53.235615f, 174.898803f, 
                   53.107854f, 175.015025f, 
                   52.955028f, 175.015025f);
        path.Cubic(52.802203f, 175.015025f, 
                   52.674442f, 174.898803f, 
                   52.660018f, 174.746660f);
        path.Line(52.660018f, 174.050800f);
        path.Line(52.070000f, 174.050800f);
        path.Line(52.070000f, 174.349780f);
        path.Cubic(52.055576f, 174.501923f, 
                   51.927815f, 174.618145f, 
                   51.774990f, 174.618145f);
        path.Cubic(51.622164f, 174.618145f, 
                   51.494403f, 174.501923f, 
                   51.479979f, 174.349780f);
        path.Line(51.479979f, 174.050800f);
        path.Line(50.982562f, 174.050800f);
        path.Cubic(50.870493f, 174.061427f, 
                   50.762081f, 174.007637f, 
                   50.702752f, 173.911969f);
        path.Cubic(50.643422f, 173.816302f, 
                   50.643422f, 173.695278f, 
                   50.702752f, 173.599611f);
        path.Cubic(50.762081f, 173.503943f, 
                   50.870493f, 173.450153f, 
                   50.982562f, 173.460780f);
        path.Line(51.479979f, 173.460780f);
        path.Line(51.479979f, 173.161800f);
        path.Cubic(51.469354f, 173.049733f, 
                   51.523145f, 172.941322f, 
                   51.618812f, 172.881994f);
        path.Cubic(51.714479f, 172.822666f, 
                   51.835500f, 172.822666f, 
                   51.931167f, 172.881994f);
        path.Cubic(52.026834f, 172.941322f, 
                   52.080625f, 173.049733f, 
                   52.070000f, 173.161800f);
        path.Line(52.070000f, 173.460780f);
        path.Line(52.667958f, 173.460780f);
        path.Line(52.667958f, 172.764930f);
        path.Cubic(52.657333f, 172.652863f, 
                   52.711124f, 172.544452f, 
                   52.806791f, 172.485124f);
        path.Cubic(52.902458f, 172.425796f, 
                   53.023479f, 172.425796f, 
                   53.119146f, 172.485124f);
        path.Cubic(53.214813f, 172.544452f, 
                   53.268604f, 172.652863f, 
                   53.257979f, 172.764930f);
        path.Line(53.257979f, 173.460780f);
        path.Line(54.480354f, 173.460780f);
        path.Line(54.501524f, 173.386680f);
        path.Cubic(54.557990f, 173.189722f, 
                   54.659433f, 173.008572f, 
                   54.797857f, 172.857510f);
        path.Line(54.850777f, 172.801910f);
        path.Line(54.811087f, 172.738410f);
        path.Line(54.281921f, 171.838830f);
        path.Line(54.231651f, 171.751530f);
        path.Line(54.144341f, 171.801830f);
        path.Line(53.615175f, 172.098170f);
        path.Cubic(53.571548f, 172.125243f, 
                   53.520986f, 172.139037f, 
                   53.469654f, 172.137870f);
        path.Cubic(53.334845f, 172.140384f, 
                   53.215642f, 172.050781f, 
                   53.180589f, 171.920585f);
        path.Cubic(53.145536f, 171.790389f, 
                   53.203639f, 171.653050f, 
                   53.321487f, 171.587540f);
        path.Line(53.837425f, 171.291210f);
        path.Line(53.924735f, 171.240910f);
        path.Line(53.874465f, 171.150910f);
        path.Line(53.710424f, 170.806950f);
        path.Line(53.660154f, 170.719650f);
        path.Line(53.570194f, 170.769950f);
        path.Line(53.400861f, 170.867850f);
        path.Cubic(53.355961f, 170.894216f, 
                   53.304761f, 170.907935f, 
                   53.252694f, 170.907550f);
        path.Cubic(53.143852f, 170.911036f, 
                   53.042016f, 170.854010f, 
                   52.988111f, 170.759390f);
        path.Cubic(52.948247f, 170.692465f, 
                   52.937721f, 170.612072f, 
                   52.959011f, 170.537140f);
        path.Cubic(52.978971f, 170.461183f, 
                   53.028521f, 170.396385f, 
                   53.096594f, 170.357220f);
        path.Line(53.268573f, 170.259320f);
        path.Line(53.355883f, 170.209020f);
        path.Line(53.305613f, 170.119020f);
        path.Line(53.107176f, 169.777710f);
        path.Cubic(53.067877f, 169.709644f, 
                   53.057229f, 169.628755f, 
                   53.077573f, 169.552837f);
        path.Cubic(53.097917f, 169.476920f, 
                   53.147587f, 169.412194f, 
                   53.215655f, 169.372900f);
        path.Cubic(53.260430f, 169.348912f, 
                   53.310381f, 169.336212f, 
                   53.361176f, 169.335900f);
        path.Cubic(53.469324f, 169.332464f, 
                   53.570746f, 169.388247f, 
                   53.625759f, 169.481420f);
        path.Line(53.824196f, 169.825380f);
        path.Line(53.874466f, 169.912680f);
        path.Line(53.961776f, 169.862380f);
        path.Line(54.133755f, 169.761840f);
        path.Cubic(54.179359f, 169.737534f, 
                   54.230245f, 169.724827f, 
                   54.281922f, 169.724840f);
        path.Cubic(54.373290f, 169.724959f, 
                   54.459399f, 169.767595f, 
                   54.514881f, 169.840190f);
        path.Cubic(54.570363f, 169.912784f, 
                   54.588898f, 170.007065f, 
                   54.565026f, 170.095260f);
        path.Cubic(54.546747f, 170.170587f, 
                   54.497828f, 170.234852f, 
                   54.430088f, 170.272530f);
        path.Line(54.258109f, 170.373070f);
        path.Line(54.170799f, 170.423370f);
        path.Line(54.221069f, 170.510670f);
        path.Line(54.419507f, 170.854630f);
        path.Line(54.469777f, 170.941930f);
        path.Line(54.557087f, 170.891630f);
        path.Line(55.086254f, 170.595290f);
        path.Cubic(55.129881f, 170.568217f, 
                   55.180443f, 170.554423f, 
                   55.231775f, 170.555590f);
        path.Cubic(55.366584f, 170.553077f, 
                   55.485786f, 170.642679f, 
                   55.520839f, 170.772875f);
        path.Cubic(55.555892f, 170.903072f, 
                   55.497789f, 171.040410f, 
                   55.379941f, 171.105920f);
        path.Line(54.864004f, 171.402250f);
        path.Line(54.776694f, 171.452550f);
        path.Line(54.826964f, 171.539850f);
        path.Line(55.356131f, 172.434140f);
        path.Line(55.395821f, 172.500240f);
        path.Line(55.469901f, 172.481740f);
        path.Cubic(55.569381f, 172.456744f, 
                   55.671601f, 172.444314f, 
                   55.774172f, 172.444740f);
        path.Cubic(55.877616f, 172.444287f, 
                   55.980715f, 172.456716f, 
                   56.081088f, 172.481740f);
        path.Line(56.155168f, 172.500240f);
        path.Line(56.192208f, 172.434140f);
        path.Line(56.708146f, 171.539850f);
        path.Line(56.758416f, 171.452550f);
        path.Line(56.671106f, 171.402250f);
        path.Line(56.141939f, 171.105920f);
        path.Cubic(56.028090f, 171.037508f, 
                   55.973670f, 170.901697f, 
                   56.008774f, 170.773598f);
        path.Cubic(56.043879f, 170.645498f, 
                   56.159932f, 170.556405f, 
                   56.292752f, 170.555590f);
        path.Cubic(56.343939f, 170.555551f, 
                   56.394197f, 170.569262f, 
                   56.438273f, 170.595290f);
        path.Line(56.951564f, 170.891630f);
        path.Line(57.041524f, 170.941930f);
        path.Line(57.091794f, 170.854630f);
        path.Line(57.290231f, 170.510670f);
        path.Line(57.340501f, 170.423370f);
        path.Line(57.253191f, 170.373070f);
        path.Line(57.081212f, 170.272530f);
        path.Cubic(57.012891f, 170.234914f, 
                   56.963114f, 170.170779f, 
                   56.943629f, 170.095260f);
        path.Cubic(56.922525f, 170.019445f, 
                   56.933023f, 169.938316f, 
                   56.972729f, 169.870370f);
        path.Cubic(57.027739f, 169.777193f, 
                   57.129162f, 169.721407f, 
                   57.237312f, 169.724840f);
        path.Cubic(57.288107f, 169.725152f, 
                   57.338058f, 169.737852f, 
                   57.382833f, 169.761840f);
        path.Line(57.554812f, 169.862380f);
        path.Line(57.642122f, 169.912680f);
        path.Line(57.692392f, 169.825380f);
        path.Line(57.890829f, 169.481420f);
        path.Cubic(57.945842f, 169.388246f, 
                   58.047265f, 169.332464f, 
                   58.155413f, 169.335900f);
        path.Move(55.774163f, 174.423830f);
        path.Cubic(56.151990f, 174.399356f, 
                   56.440912f, 174.077290f, 
                   56.424372f, 173.699033f);
        path.Cubic(56.407832f, 173.320776f, 
                   56.091901f, 173.025158f, 
                   55.713380f, 173.033756f);
        path.Cubic(55.334859f, 173.042354f, 
                   55.032677f, 173.352012f, 
                   55.033329f, 173.730630f);
        path.Cubic(55.033330f, 173.914938f, 
                   55.106728f, 174.091658f, 
                   55.237302f, 174.221735f);
        path.Cubic(55.367877f, 174.351811f, 
                   55.544876f, 174.424533f, 
                   55.729183f, 174.423830f);
    }

    private void SetPathData_path243(IRenderPath path)
    { // Label: 
        path.Move(52.861104f, 173.119440f);
        path.Cubic(53.034204f, 173.352400f, 
                   53.176491f, 173.606740f, 
                   53.284437f, 173.876150f);
        path.Cubic(53.744812f, 175.146150f, 
                   53.218297f, 175.839350f, 
                   52.869042f, 176.299730f);
        path.Cubic(52.826712f, 176.355330f, 
                   52.787022f, 176.405560f, 
                   52.752625f, 176.455830f);
        path.Cubic(52.189062f, 177.249580f, 
                   52.429833f, 177.707310f, 
                   52.734105f, 178.292040f);
        path.Cubic(52.802895f, 178.421690f, 
                   52.871688f, 178.556620f, 
                   52.932543f, 178.691560f);
        path.Line(52.083230f, 178.691560f);
        path.Line(52.059420f, 178.646560f);
        path.Cubic(51.736628f, 178.030080f, 
                   51.294774f, 177.183420f, 
                   52.133500f, 176.000730f);
        path.Cubic(52.173190f, 175.942530f, 
                   52.218170f, 175.884310f, 
                   52.263146f, 175.828750f);
        path.Cubic(52.583292f, 175.405420f, 
                   52.887562f, 175.005900f, 
                   52.567417f, 174.124830f);
        path.Cubic(52.480223f, 173.915852f, 
                   52.367348f, 173.718545f, 
                   52.231396f, 173.537460f);
        path.Cubic(51.816000f, 172.928920f, 
                   51.310646f, 172.188080f, 
                   51.966812f, 170.674670f);
        path.Line(51.038125f, 170.674670f);
        path.Line(52.387500f, 168.941650f);
        path.Line(53.742167f, 170.698480f);
        path.Line(52.810833f, 170.698480f);
        path.Cubic(52.122917f, 172.031980f, 
                   52.464229f, 172.537330f, 
                   52.861103f, 173.119420f);
        path.Close();
    }

    private void SetPathData_path1166(IRenderPath path)
    { // Label: Breathing
        path.Move(133.431560f, 268.821790f);
        path.Cubic(146.702450f, 267.879130f, 
                   143.255650f, 253.795340f, 
                   148.504600f, 253.844560f);
        path.Cubic(153.159860f, 253.888260f, 
                   151.113950f, 267.809450f, 
                   162.685390f, 268.649380f);
    }

    private void SetPathData_path4914(IRenderPath path)
    { // Label: BodyPulse
        path.Move(131.400240f, 286.214610f);
        path.Cubic(138.086120f, 291.003710f, 
                   138.927590f, 291.740800f, 
                   144.732940f, 292.403850f);
        path.Cubic(153.717780f, 290.769100f, 
                   151.288690f, 274.664880f, 
                   155.397330f, 274.722950f);
        path.Cubic(158.946840f, 274.775850f, 
                   158.300930f, 285.605220f, 
                   161.633560f, 286.275170f);
    }

    private void SetPathData_path46598(IRenderPath path)
    { // Label: LightningPulse
        path.Move(131.041550f, 291.842250f);
        path.Cubic(141.100020f, 279.995730f, 
                   143.466000f, 279.180690f, 
                   147.653060f, 277.544800f);
        path.Cubic(151.211840f, 276.154380f, 
                   158.186680f, 272.723500f, 
                   164.083060f, 272.244510f);
    }

    private void SetPathData_path3251(IRenderPath path)
    { // Label: HeartPulse
        path.Move(130.402940f, 278.712700f);
        path.Cubic(133.715400f, 275.999310f, 
                   134.387170f, 273.275080f, 
                   137.092530f, 273.176540f);
        path.Cubic(143.618220f, 273.192340f, 
                   144.095480f, 289.935180f, 
                   150.149820f, 289.835160f);
        path.Cubic(155.389440f, 289.969980f, 
                   155.913070f, 279.757060f, 
                   157.652920f, 278.306140f);
    }

    private void SetPathData_path2449(IRenderPath path)
    { // Label: Co2
        path.Move(114.752600f, 244.838280f);
        path.Cubic(127.134820f, 244.901780f, 
                   119.020950f, 257.382570f, 
                   131.759040f, 258.340040f);
        path.Cubic(133.721180f, 258.487530f, 
                   128.193930f, 245.069210f, 
                   144.582930f, 244.896460f);
    }

    private void SetPathData_path52326(IRenderPath path)
    { // Label: Airway
        path.Move(133.431560f, 268.991960f);
        path.Cubic(143.129740f, 268.729720f, 
                   139.630130f, 254.334010f, 
                   143.813380f, 254.100860f);
        path.Cubic(148.468640f, 254.145460f, 
                   144.915270f, 268.191600f, 
                   162.685390f, 268.815630f);
    }

    private void SetPathData_upperLeft(IRenderPath path)
    { // Label: upperLeft
        // path.Rect(-1.322914f, 160.210390f,
                       // 0.000000f, 161.533307f);
    }

    private void SetPathData_rect45026(IRenderPath path)
    { // Label: lowerRight
        // path.Rect(13.685310f, 173.769910f,
                       // 15.000000f, 175.092827f);
    }

    private void SetPathData_rect1546(IRenderPath path)
    { // Label: 
        // path.Rect(120.488080f, 170.872570f,
                       // 121.000000f, 172.195487f);
    }

    // Skill: default -> Path 4states
    private void Paint_rect3267(PaintAvatarInfo p) //Path: 4states
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_rect3267(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_rect3267(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_rect3267(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path stateback
    private void Paint_rect3269(PaintAvatarInfo p) //Path: stateback
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xffff00;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_rect3269(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_rect3269(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xffff00;
    }
    private void SetPathOpacity_rect3269(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_circle3271(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_circle3271(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_circle3271(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_circle3271(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path StateActive
    private void Paint_circle3273(PaintAvatarInfo p) //Path: StateActive
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xffff00;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_circle3273(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_circle3273(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xffff00;
    }
    private void SetPathOpacity_circle3273(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path toprect
    private void Paint_rect3281(PaintAvatarInfo p) //Path: toprect
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xffff00;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_rect3281(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_rect3281(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xffff00;
    }
    private void SetPathOpacity_rect3281(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 3states
    private void Paint_rect1399_3_7_4_54_07_5(PaintAvatarInfo p) //Path: 3states
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_rect1399_3_7_4_54_07_5(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_rect1399_3_7_4_54_07_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_rect1399_3_7_4_54_07_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 6states
    private void Paint_rect2752(PaintAvatarInfo p) //Path: 6states
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_rect2752(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_rect2752(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_rect2752(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

                private void Paint_g3301(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use11947_4(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use11947_4(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use11947_4(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use11947_4(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use11949_1(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use11949_1(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use11949_1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use11949_1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use11951_7(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use11951_7(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use11951_7(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use11951_7(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g11957_2(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.09642,0,0,1.09642,-194.022,-143.462);
        Paint_use11947_4(p);// 
        Paint_use11949_1(p);// 
        Paint_use11951_7(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g11957_2(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g11957_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g11957_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use11959_5(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use11959_5(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use11959_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use11959_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g11969_1(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.09642,0,0,1.09642,-194.223,-143.824);
        Paint_use11959_5(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g11969_1(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g11969_1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g11969_1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use11971_63(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use11971_63(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use11971_63(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use11971_63(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use11973_2(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use11973_2(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use11973_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use11973_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use11975_6(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use11975_6(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use11975_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use11975_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g11981_2(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.09642,0,0,1.09642,-194.022,-131.614);
        Paint_use11971_63(p);// 
        Paint_use11973_2(p);// 
        Paint_use11975_6(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g11981_2(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g11981_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g11981_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use11983_65(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use11983_65(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use11983_65(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use11983_65(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use11985_2(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use11985_2(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use11985_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use11985_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use11987_2(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use11987_2(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use11987_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use11987_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g11993_6(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.09642,0,0,1.09642,-194.022,-119.767);
        Paint_use11983_65(p);// 
        Paint_use11985_2(p);// 
        Paint_use11987_2(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g11993_6(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g11993_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g11993_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use11995_1(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use11995_1(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use11995_1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use11995_1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use11997_3(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use11997_3(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use11997_3(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use11997_3(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use11999_5(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use11999_5(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use11999_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use11999_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g12005_7(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.09642,0,0,1.09642,-194.022,-107.92);
        Paint_use11995_1(p);// 
        Paint_use11997_3(p);// 
        Paint_use11999_5(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g12005_7(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g12005_7(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g12005_7(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use12007_1(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.09642,0,0,1.09642,-194.022,-143.462);
        Paint_rect2752(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use12007_1(IRenderPath path)
    {
        SetPathData_rect2752(path);
    }
    private void SetPathColor_use12007_1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect2752(p, colorReceiver);
    }
    private void SetPathOpacity_use12007_1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect2752(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use19208(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use19208(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use19208(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use19208(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use19210(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use19210(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use19210(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use19210(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use19212(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use19212(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use19212(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use19212(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State4
    private void Paint_g19218(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.09642,0,0,1.09642,-194.022,-96.0723);
        Paint_use19208(p);// 
        Paint_use19210(p);// 
        Paint_use19212(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g19218(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g19218(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g19218(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use19220(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use19220(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use19220(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use19220(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use19222(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use19222(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use19222(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use19222(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use19224(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use19224(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use19224(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use19224(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State5
    private void Paint_g19230(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.09642,0,0,1.09642,-194.022,-84.2249);
        Paint_use19220(p);// 
        Paint_use19222(p);// 
        Paint_use19224(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g19230(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g19230(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g19230(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

                private void Paint_g2802(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use16791(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use16791(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use16791(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use16791(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use16793(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use16793(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use16793(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use16793(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use16795(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use16795(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use16795(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use16795(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g16801(PaintAvatarInfo p)
    {
        Paint_use16791(p);// 
        Paint_use16793(p);// 
        Paint_use16795(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g16801(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g16801(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g16801(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use16803(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use16803(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use16803(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use16803(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g16813(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use16803(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g16813(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g16813(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g16813(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use16815(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use16815(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use16815(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use16815(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use16817(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use16817(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use16817(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use16817(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use16819(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use16819(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use16819(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use16819(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g16825(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use16815(p);// 
        Paint_use16817(p);// 
        Paint_use16819(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g16825(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g16825(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g16825(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use16827(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use16827(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use16827(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use16827(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use16829(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use16829(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use16829(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use16829(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use16831(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use16831(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use16831(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use16831(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g16837(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use16827(p);// 
        Paint_use16829(p);// 
        Paint_use16831(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g16837(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g16837(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g16837(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use16839(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use16839(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use16839(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use16839(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use16841(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use16841(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use16841(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use16841(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use16843(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use16843(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use16843(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use16843(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g16849(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use16839(p);// 
        Paint_use16841(p);// 
        Paint_use16843(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g16849(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g16849(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g16849(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use16851(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3267(p);
    }
    private void SetPathData_use16851(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use16851(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use16851(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g16853(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use15848(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use15848(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use15848(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use15848(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use15850(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use15850(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use15850(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use15850(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use15852(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use15852(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use15852(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use15852(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g15858(PaintAvatarInfo p)
    {
        Paint_use15848(p);// 
        Paint_use15850(p);// 
        Paint_use15852(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g15858(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g15858(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g15858(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use15860(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use15860(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use15860(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use15860(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g15870(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use15860(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g15870(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g15870(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g15870(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use15872(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use15872(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use15872(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use15872(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use15874(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use15874(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use15874(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use15874(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use15876(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use15876(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use15876(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use15876(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g15882(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use15872(p);// 
        Paint_use15874(p);// 
        Paint_use15876(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g15882(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g15882(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g15882(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use15884(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use15884(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use15884(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use15884(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use15886(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use15886(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use15886(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use15886(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use15888(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use15888(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use15888(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use15888(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g15894(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use15884(p);// 
        Paint_use15886(p);// 
        Paint_use15888(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g15894(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g15894(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g15894(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use15908(PaintAvatarInfo p) //Use: 
    {
        Paint_rect1399_3_7_4_54_07_5(p);
    }
    private void SetPathData_use15908(IRenderPath path)
    {
        SetPathData_rect1399_3_7_4_54_07_5(path);
    }
    private void SetPathColor_use15908(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1399_3_7_4_54_07_5(p, colorReceiver);
    }
    private void SetPathOpacity_use15908(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1399_3_7_4_54_07_5(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g15910(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use14839(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use14839(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use14839(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use14839(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14841(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use14841(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use14841(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use14841(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use14843(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use14843(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use14843(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use14843(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g14849(PaintAvatarInfo p)
    {
        Paint_use14839(p);// 
        Paint_use14841(p);// 
        Paint_use14843(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g14849(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g14849(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g14849(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use14851(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14851(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use14851(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use14851(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g14861(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use14851(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g14861(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g14861(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g14861(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use14863(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use14863(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use14863(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use14863(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14865(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use14865(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use14865(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use14865(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use14867(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use14867(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use14867(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use14867(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g14873(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use14863(p);// 
        Paint_use14865(p);// 
        Paint_use14867(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g14873(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g14873(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g14873(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use14875(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use14875(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use14875(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use14875(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14877(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use14877(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use14877(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use14877(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use14879(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use14879(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use14879(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use14879(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g14885(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use14875(p);// 
        Paint_use14877(p);// 
        Paint_use14879(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g14885(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g14885(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g14885(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use14887(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use14887(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use14887(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use14887(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14889(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use14889(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use14889(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use14889(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use14891(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use14891(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use14891(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use14891(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g14897(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use14887(p);// 
        Paint_use14889(p);// 
        Paint_use14891(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g14897(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g14897(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g14897(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use14899(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3267(p);
    }
    private void SetPathData_use14899(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use14899(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use14899(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g14901(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use11947(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use11947(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use11947(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use11947(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use11949(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use11949(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use11949(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use11949(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use11951(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use11951(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use11951(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use11951(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g11957(PaintAvatarInfo p)
    {
        Paint_use11947(p);// 
        Paint_use11949(p);// 
        Paint_use11951(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g11957(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g11957(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g11957(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use11959(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use11959(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use11959(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use11959(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g11969(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use11959(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g11969(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g11969(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g11969(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use11971(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use11971(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use11971(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use11971(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use11973(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use11973(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use11973(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use11973(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use11975(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use11975(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use11975(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use11975(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g11981(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use11971(p);// 
        Paint_use11973(p);// 
        Paint_use11975(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g11981(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g11981(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g11981(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use11983(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use11983(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use11983(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use11983(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use11985(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use11985(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use11985(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use11985(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use11987(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use11987(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use11987(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use11987(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g11993(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use11983(p);// 
        Paint_use11985(p);// 
        Paint_use11987(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g11993(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g11993(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g11993(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use11995(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use11995(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use11995(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use11995(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use11997(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use11997(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use11997(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use11997(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use11999(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use11999(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use11999(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use11999(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g12005(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use11995(p);// 
        Paint_use11997(p);// 
        Paint_use11999(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g12005(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g12005(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g12005(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use12007(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(0.998769,0,0,1.17358,0.685273,-34.3795);
        Paint_rect3267(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use12007(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use12007(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use12007(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use9294(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use9294(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use9294(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use9294(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use9296(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use9296(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use9296(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use9296(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use9298(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use9298(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use9298(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use9298(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State4
    private void Paint_g9304(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,43.0996);
        Paint_use9294(p);// 
        Paint_use9296(p);// 
        Paint_use9298(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g9304(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g9304(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g9304(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

                private void Paint_g12009(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use3850(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use3850(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use3850(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use3850(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3852(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use3852(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use3852(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use3852(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use3854_7(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use3854_7(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use3854_7(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use3854_7(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g1427_2_6_9_89_0(PaintAvatarInfo p)
    {
        Paint_use3850(p);// 
        Paint_use3852(p);// 
        Paint_use3854_7(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g1427_2_6_9_89_0(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1427_2_6_9_89_0(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1427_2_6_9_89_0(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use10323(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use10323(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use10323(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use10323(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g1588_4_40_2_1_8(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use10323(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g1588_4_40_2_1_8(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1588_4_40_2_1_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1588_4_40_2_1_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use4329(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use4329(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use4329(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use4329(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use4331(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use4331(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use4331(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use4331(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use4333(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use4333(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use4333(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use4333(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_use1323(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use4329(p);// 
        Paint_use4331(p);// 
        Paint_use4333(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_use1323(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_use1323(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_use1323(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use4339(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use4339(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use4339(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use4339(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use4341(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use4341(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use4341(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use4341(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use4343(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use4343(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use4343(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use4343(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_use1325(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use4339(p);// 
        Paint_use4341(p);// 
        Paint_use4343(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_use1325(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_use1325(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_use1325(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use4319(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use4319(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use4319(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use4319(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use4321(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use4321(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use4321(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use4321(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use4323(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use4323(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use4323(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use4323(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_use1327(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use4319(p);// 
        Paint_use4321(p);// 
        Paint_use4323(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_use1327(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_use1327(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_use1327(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use4055(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(0.998726,0,0,1.17999,0.709634,-35.649);
        Paint_rect3267(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use4055(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use4055(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use4055(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use8175(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use8175(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use8175(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use8175(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use8177(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use8177(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use8177(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use8177(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use8179(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use8179(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use8179(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use8179(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State4
    private void Paint_g8185(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,43.2552);
        Paint_use8175(p);// 
        Paint_use8177(p);// 
        Paint_use8179(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g8185(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g8185(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8185(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

                private void Paint_g1420_6_7_5_1_0(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use19404(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use19404(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use19404(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use19404(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use19406(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use19406(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use19406(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use19406(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use19408(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use19408(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use19408(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use19408(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g19414(PaintAvatarInfo p)
    {
        Paint_use19404(p);// 
        Paint_use19406(p);// 
        Paint_use19408(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g19414(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g19414(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g19414(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use19416(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use19416(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use19416(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use19416(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g19426(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use19416(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g19426(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g19426(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g19426(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use19428(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use19428(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use19428(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use19428(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use19430(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use19430(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use19430(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use19430(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use19432(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use19432(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use19432(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use19432(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g19438(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use19428(p);// 
        Paint_use19430(p);// 
        Paint_use19432(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g19438(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g19438(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g19438(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use19440(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use19440(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use19440(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use19440(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use19442(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use19442(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use19442(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use19442(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use19444(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use19444(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use19444(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use19444(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g19450(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use19440(p);// 
        Paint_use19442(p);// 
        Paint_use19444(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g19450(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g19450(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g19450(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use19452(PaintAvatarInfo p) //Use: 
    {
        Paint_rect1399_3_7_4_54_07_5(p);
    }
    private void SetPathData_use19452(IRenderPath path)
    {
        SetPathData_rect1399_3_7_4_54_07_5(path);
    }
    private void SetPathColor_use19452(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1399_3_7_4_54_07_5(p, colorReceiver);
    }
    private void SetPathOpacity_use19452(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1399_3_7_4_54_07_5(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g19454(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use20227(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use20227(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use20227(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use20227(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use20229(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use20229(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use20229(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use20229(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use20231(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use20231(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use20231(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use20231(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g20237(PaintAvatarInfo p)
    {
        Paint_use20227(p);// 
        Paint_use20229(p);// 
        Paint_use20231(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g20237(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g20237(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g20237(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use20239(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use20239(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use20239(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use20239(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g20249(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use20239(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g20249(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g20249(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g20249(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use20251(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use20251(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use20251(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use20251(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use20253(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use20253(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use20253(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use20253(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use20255(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use20255(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use20255(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use20255(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g20261(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use20251(p);// 
        Paint_use20253(p);// 
        Paint_use20255(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g20261(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g20261(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g20261(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use20263(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use20263(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use20263(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use20263(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use20265(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use20265(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use20265(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use20265(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use20267(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use20267(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use20267(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use20267(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g20273(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use20263(p);// 
        Paint_use20265(p);// 
        Paint_use20267(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g20273(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g20273(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g20273(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use20275(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use20275(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use20275(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use20275(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use20277(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use20277(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use20277(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use20277(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use20279(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use20279(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use20279(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use20279(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g20285(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use20275(p);// 
        Paint_use20277(p);// 
        Paint_use20279(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g20285(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g20285(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g20285(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use20287(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3267(p);
    }
    private void SetPathData_use20287(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use20287(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use20287(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g20289(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use21068(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use21068(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use21068(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use21068(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use21070(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use21070(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use21070(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use21070(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use21072(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use21072(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use21072(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use21072(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g21078(PaintAvatarInfo p)
    {
        Paint_use21068(p);// 
        Paint_use21070(p);// 
        Paint_use21072(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g21078(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g21078(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g21078(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use21080(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use21080(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use21080(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use21080(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g21090(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use21080(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g21090(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g21090(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g21090(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use21092(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use21092(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use21092(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use21092(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use21094(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use21094(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use21094(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use21094(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use21096(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use21096(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use21096(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use21096(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g21102(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use21092(p);// 
        Paint_use21094(p);// 
        Paint_use21096(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g21102(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g21102(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g21102(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use21104(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use21104(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use21104(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use21104(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use21106(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use21106(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use21106(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use21106(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use21108(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use21108(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use21108(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use21108(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g21114(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use21104(p);// 
        Paint_use21106(p);// 
        Paint_use21108(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g21114(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g21114(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g21114(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use21116(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use21116(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use21116(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use21116(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use21118(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use21118(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use21118(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use21118(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use21120(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use21120(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use21120(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use21120(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g21126(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use21116(p);// 
        Paint_use21118(p);// 
        Paint_use21120(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g21126(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g21126(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g21126(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use21128(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3267(p);
    }
    private void SetPathData_use21128(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use21128(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use21128(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g21130(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use7774(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use7774(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use7774(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use7774(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use7776(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use7776(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use7776(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use7776(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use7778(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use7778(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use7778(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use7778(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g7784(PaintAvatarInfo p)
    {
        Paint_use7774(p);// 
        Paint_use7776(p);// 
        Paint_use7778(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g7784(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g7784(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7784(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use7786(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use7786(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use7786(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use7786(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g7796(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use7786(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g7796(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g7796(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7796(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use7798(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use7798(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use7798(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use7798(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use7800(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use7800(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use7800(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use7800(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use7802(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use7802(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use7802(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use7802(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g7808(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use7798(p);// 
        Paint_use7800(p);// 
        Paint_use7802(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g7808(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g7808(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7808(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use7810(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use7810(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use7810(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use7810(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use7812(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use7812(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use7812(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use7812(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use7814(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use7814(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use7814(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use7814(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g7820(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use7810(p);// 
        Paint_use7812(p);// 
        Paint_use7814(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g7820(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g7820(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7820(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use7822(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use7822(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use7822(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use7822(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use7824(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use7824(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use7824(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use7824(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use7826(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use7826(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use7826(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use7826(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g7832(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use7822(p);// 
        Paint_use7824(p);// 
        Paint_use7826(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g7832(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g7832(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7832(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use7834(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3267(p);
    }
    private void SetPathData_use7834(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use7834(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use7834(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g7836(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use21909(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use21909(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use21909(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use21909(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use21911(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use21911(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use21911(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use21911(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use21913(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use21913(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use21913(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use21913(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g21919(PaintAvatarInfo p)
    {
        Paint_use21909(p);// 
        Paint_use21911(p);// 
        Paint_use21913(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g21919(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g21919(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g21919(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use21921(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use21921(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use21921(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use21921(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g21931(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use21921(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g21931(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g21931(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g21931(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use21933(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use21933(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use21933(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use21933(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use21935(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use21935(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use21935(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use21935(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use21937(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use21937(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use21937(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use21937(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g21943(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use21933(p);// 
        Paint_use21935(p);// 
        Paint_use21937(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g21943(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g21943(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g21943(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use21945(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use21945(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use21945(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use21945(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use21947(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use21947(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use21947(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use21947(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use21949(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use21949(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use21949(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use21949(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g21955(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use21945(p);// 
        Paint_use21947(p);// 
        Paint_use21949(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g21955(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g21955(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g21955(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use21957(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use21957(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use21957(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use21957(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use21959(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use21959(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use21959(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use21959(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use21961(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use21961(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use21961(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use21961(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g21967(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use21957(p);// 
        Paint_use21959(p);// 
        Paint_use21961(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g21967(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g21967(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g21967(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use21969(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3267(p);
    }
    private void SetPathData_use21969(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use21969(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use21969(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g21971(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use22750(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use22750(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use22750(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use22750(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22752(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use22752(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use22752(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use22752(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use22754(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use22754(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use22754(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use22754(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g22760(PaintAvatarInfo p)
    {
        Paint_use22750(p);// 
        Paint_use22752(p);// 
        Paint_use22754(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g22760(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g22760(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g22760(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use22762(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22762(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use22762(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use22762(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g22772(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use22762(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g22772(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g22772(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g22772(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use22774(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use22774(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use22774(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use22774(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22776(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use22776(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use22776(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use22776(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use22778(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use22778(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use22778(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use22778(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g22784(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use22774(p);// 
        Paint_use22776(p);// 
        Paint_use22778(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g22784(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g22784(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g22784(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use22786(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use22786(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use22786(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use22786(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22788(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use22788(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use22788(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use22788(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use22790(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use22790(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use22790(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use22790(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g22796(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use22786(p);// 
        Paint_use22788(p);// 
        Paint_use22790(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g22796(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g22796(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g22796(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use22798(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use22798(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use22798(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use22798(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22800(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use22800(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use22800(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use22800(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use22802(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use22802(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use22802(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use22802(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g22808(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use22798(p);// 
        Paint_use22800(p);// 
        Paint_use22802(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g22808(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g22808(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g22808(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use22810(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(0.998769,0,0,1.17356,0.68527,-34.3754);
        Paint_rect3267(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22810(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use22810(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use22810(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use9306(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use9306(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use9306(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use9306(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use9308(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use9308(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use9308(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use9308(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use9310(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use9310(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use9310(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use9310(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State4
    private void Paint_g9316(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,43.2552);
        Paint_use9306(p);// 
        Paint_use9308(p);// 
        Paint_use9310(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g9316(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g9316(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g9316(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

                private void Paint_g22812(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use23559(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use23559(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use23559(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use23559(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use23561(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use23561(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use23561(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use23561(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use23563(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use23563(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use23563(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use23563(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g23569(PaintAvatarInfo p)
    {
        Paint_use23559(p);// 
        Paint_use23561(p);// 
        Paint_use23563(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g23569(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g23569(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g23569(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use23571(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use23571(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use23571(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use23571(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g23581(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use23571(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g23581(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g23581(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g23581(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use23583(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use23583(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use23583(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use23583(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use23585(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use23585(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use23585(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use23585(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use23587(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use23587(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use23587(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use23587(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g23593(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use23583(p);// 
        Paint_use23585(p);// 
        Paint_use23587(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g23593(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g23593(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g23593(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use23595(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use23595(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use23595(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use23595(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use23597(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use23597(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use23597(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use23597(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use23599(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use23599(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use23599(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use23599(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g23605(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use23595(p);// 
        Paint_use23597(p);// 
        Paint_use23599(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g23605(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g23605(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g23605(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use23607(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use23607(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use23607(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use23607(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use23609(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use23609(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use23609(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use23609(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use23611(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use23611(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use23611(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use23611(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g23617(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use23607(p);// 
        Paint_use23609(p);// 
        Paint_use23611(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g23617(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g23617(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g23617(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use23619(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3267(p);
    }
    private void SetPathData_use23619(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use23619(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use23619(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g23621(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use24368(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use24368(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use24368(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use24368(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use24370(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use24370(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use24370(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use24370(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use24372(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use24372(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use24372(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use24372(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g24378(PaintAvatarInfo p)
    {
        Paint_use24368(p);// 
        Paint_use24370(p);// 
        Paint_use24372(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g24378(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g24378(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g24378(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use24380(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use24380(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use24380(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use24380(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g24390(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use24380(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g24390(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g24390(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g24390(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use24392(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use24392(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use24392(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use24392(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use24394(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use24394(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use24394(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use24394(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use24396(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use24396(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use24396(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use24396(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g24402(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use24392(p);// 
        Paint_use24394(p);// 
        Paint_use24396(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g24402(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g24402(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g24402(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use24404(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use24404(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use24404(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use24404(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use24406(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use24406(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use24406(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use24406(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use24408(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use24408(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use24408(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use24408(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g24414(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use24404(p);// 
        Paint_use24406(p);// 
        Paint_use24408(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g24414(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g24414(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g24414(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use24416(PaintAvatarInfo p) //Use: 
    {
        Paint_rect1399_3_7_4_54_07_5(p);
    }
    private void SetPathData_use24416(IRenderPath path)
    {
        SetPathData_rect1399_3_7_4_54_07_5(path);
    }
    private void SetPathColor_use24416(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1399_3_7_4_54_07_5(p, colorReceiver);
    }
    private void SetPathOpacity_use24416(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1399_3_7_4_54_07_5(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g24418(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use28871(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use28871(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use28871(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use28871(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use28873(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use28873(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use28873(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use28873(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use28875(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use28875(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use28875(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use28875(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g28881(PaintAvatarInfo p)
    {
        Paint_use28871(p);// 
        Paint_use28873(p);// 
        Paint_use28875(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g28881(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g28881(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g28881(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use28883(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use28883(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use28883(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use28883(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g28893(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use28883(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g28893(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g28893(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g28893(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use28895(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use28895(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use28895(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use28895(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use28897(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use28897(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use28897(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use28897(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use28899(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use28899(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use28899(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use28899(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g28905(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use28895(p);// 
        Paint_use28897(p);// 
        Paint_use28899(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g28905(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g28905(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g28905(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use28907(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use28907(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use28907(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use28907(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use28909(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use28909(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use28909(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use28909(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use28911(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use28911(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use28911(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use28911(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g28917(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use28907(p);// 
        Paint_use28909(p);// 
        Paint_use28911(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g28917(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g28917(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g28917(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use28919(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use28919(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use28919(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use28919(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use28921(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use28921(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use28921(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use28921(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use28923(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use28923(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use28923(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use28923(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g28929(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use28919(p);// 
        Paint_use28921(p);// 
        Paint_use28923(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g28929(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g28929(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g28929(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use28931(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3267(p);
    }
    private void SetPathData_use28931(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use28931(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use28931(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g28933(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    // Skill: default -> use 
    private void Paint_use28935(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use28935(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use28935(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use28935(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use28937(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use28937(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use28937(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use28937(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use28939(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use28939(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use28939(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use28939(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State0
    private void Paint_g28945(PaintAvatarInfo p)
    {
        Paint_use28935(p);// 
        Paint_use28937(p);// 
        Paint_use28939(p);// Active
    }
    //----------------------------------------
    private void SetPathData_g28945(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g28945(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g28945(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use28947(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.18347,0.330471);
        Paint_rect3281(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use28947(IRenderPath path)
    {
        SetPathData_rect3281(path);
    }
    private void SetPathColor_use28947(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3281(p, colorReceiver);
    }
    private void SetPathOpacity_use28947(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3281(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: NextState
    private void Paint_g28957(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.183488,-0.330474);
        Paint_use28947(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g28957(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g28957(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g28957(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use28959(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use28959(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use28959(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use28959(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use28961(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use28961(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use28961(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use28961(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use28963(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use28963(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use28963(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use28963(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State1
    private void Paint_g28969(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,10.8054);
        Paint_use28959(p);// 
        Paint_use28961(p);// 
        Paint_use28963(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g28969(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g28969(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g28969(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use28971(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use28971(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use28971(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use28971(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use28973(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use28973(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use28973(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use28973(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use28975(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use28975(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use28975(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use28975(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State2
    private void Paint_g28981(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,21.6109);
        Paint_use28971(p);// 
        Paint_use28973(p);// 
        Paint_use28975(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g28981(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g28981(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g28981(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use28983(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3269(p);
    }
    private void SetPathData_use28983(IRenderPath path)
    {
        SetPathData_rect3269(path);
    }
    private void SetPathColor_use28983(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3269(p, colorReceiver);
    }
    private void SetPathOpacity_use28983(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3269(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use28985(PaintAvatarInfo p) //Use: 
    {
        Paint_circle3271(p);
    }
    private void SetPathData_use28985(IRenderPath path)
    {
        SetPathData_circle3271(path);
    }
    private void SetPathColor_use28985(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3271(p, colorReceiver);
    }
    private void SetPathOpacity_use28985(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3271(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Active
    private void Paint_use28987(PaintAvatarInfo p) //Use: Active
    {
        Paint_circle3273(p);
    }
    private void SetPathData_use28987(IRenderPath path)
    {
        SetPathData_circle3273(path);
    }
    private void SetPathColor_use28987(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_circle3273(p, colorReceiver);
    }
    private void SetPathOpacity_use28987(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_circle3273(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: State3
    private void Paint_g28993(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-3.8147e-06,32.4163);
        Paint_use28983(p);// 
        Paint_use28985(p);// 
        Paint_use28987(p);// Active
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g28993(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g28993(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g28993(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use28995(PaintAvatarInfo p) //Use: 
    {
        Paint_rect3267(p);
    }
    private void SetPathData_use28995(IRenderPath path)
    {
        SetPathData_rect3267(path);
    }
    private void SetPathColor_use28995(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect3267(p, colorReceiver);
    }
    private void SetPathOpacity_use28995(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect3267(p, opacityReceiver);
     }
    //----------------------------------------

                private void Paint_g28997(PaintAvatarInfo p)
                {
                    // State Control: always hidden
                }
                //----------------------------------------

    
    //skill: default -> Group: Controls
    private void Paint_g5680(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,40.3594,151.208);
        Paint_g3301(p);// Master
        Paint_g2802(p);// ST
        Paint_g16853(p);// Oxygen
        Paint_g15910(p);// Neuromuscular
        Paint_g14901(p);// ABP
        Paint_g12009(p);// PulseRateBody
        Paint_g1420_6_7_5_1_0(p);// PulseRateHeart
        Paint_g19454(p);// Brain
        Paint_g20289(p);// CO2
        Paint_g21130(p);// CVP
        Paint_g7836(p);// TV
        Paint_g21971(p);// CO
        Paint_g22812(p);// RespRate
        Paint_g23621(p);// Temp
        Paint_g24418(p);// Orientation
        Paint_g28933(p);// AWP
        Paint_g28997(p);// FiO2
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g5680(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g5680(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g5680(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    //Use (for ShadowColorFrom)
    private void Paint_use10299(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
        Paint_path10268(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathColor_use10299(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use10272(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
        Paint_path9(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use10272(IRenderPath path)
    {
        SetPathData_path9(path);
    }

    private void SetPathColor_use10272(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
    }
    private void SetPathOpacity_use10272(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path9(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use10276(PaintAvatarInfo p) //Use: Time
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path4914(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use10276(IRenderPath path)
    {
        SetPathData_path4914(path);
    }
    private void SetPathColor_use10276(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path4914(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use10276(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4914(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use10282(PaintAvatarInfo p) //Use: Max
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path10268(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use10282(IRenderPath path)
    {
        SetPathData_path10268(path);
    }
    private void SetPathColor_use10282(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path10268(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use10282(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path10268(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: Pulsing
    private void Paint_g10278(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use10272(p, MinColor);
        SetPathColor_use10276(p, TimeColor);
        SetPathColor_use10282(p, MaxColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use10272(p, MinOpacity);
        SetPathOpacity_use10276(p, TimeOpacity);
        SetPathOpacity_use10282(p, MaxOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use10272(MinPath);
        SetPathData_use10276(TimePath);
        SetPathData_use10282(MaxPath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g10280(PaintAvatarInfo p) //Group: High
    {
        if (IsVisible(p.TopicInfo.ABP,high))
        {
            Paint_use10299(p);// Shadow
            Paint_g10278(p);// Pulsing
        }
    }
    private void SetPathData_g10280(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g10280(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g10280(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use5634(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
        Paint_path9(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathColor_use5634(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
    }
    //----------------------------------------

      
    // Skill: default -> use Max
    private void Paint_use3854(PaintAvatarInfo p) //Use: Max
    {
        Paint_path9(p);
    }
    private void SetPathData_use3854(IRenderPath path)
    {
        SetPathData_path9(path);
    }
    private void SetPathColor_use3854(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path9(p, colorReceiver);
    }
    private void SetPathOpacity_use3854(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path9(p, opacityReceiver);
     }
    //----------------------------------------

    //Use (for ColorFrom)
    private void Paint_use3856(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
        Paint_path3852(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use3856(IRenderPath path)
    {
        SetPathData_path3852(path);
    }

    private void SetPathColor_use3856(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
    }
    private void SetPathOpacity_use3856(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path3852(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use5605_9(PaintAvatarInfo p) //Use: Time
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path4914(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use5605_9(IRenderPath path)
    {
        SetPathData_path4914(path);
    }
    private void SetPathColor_use5605_9(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path4914(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use5605_9(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4914(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: Pulsing
    private void Paint_g3860(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use3854(p, MaxColor);
        SetPathColor_use3856(p, MinColor);
        SetPathColor_use5605_9(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use3854(p, MaxOpacity);
        SetPathOpacity_use3856(p, MinOpacity);
        SetPathOpacity_use5605_9(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use3854(MaxPath);
        SetPathData_use3856(MinPath);
        SetPathData_use5605_9(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g5641(PaintAvatarInfo p) //Group: Safe
    {
        if (IsVisible(p.TopicInfo.ABP,safe,notavail,unknown))
        {
            Paint_use5634(p);// Shadow
            Paint_g3860(p);// Pulsing
        }
    }
    private void SetPathData_g5641(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g5641(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g5641(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use3210(PaintAvatarInfo p)
    {
TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
PushMatrix(0.996159,0,0,1,0.317619,0.133003);

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
        Paint_path186011_3_6(p);
        _patientAvatarRenderer.FillColor = colorWas;
_patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathColor_use3210(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
    }
    //----------------------------------------

      
    // Skill: default -> use Max
    private void Paint_use3212(PaintAvatarInfo p) //Use: Max
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.132153,0.132613);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path186011_3_6(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use3212(IRenderPath path)
    {
        SetPathData_path186011_3_6(path);
    }
    private void SetPathColor_use3212(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path186011_3_6(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use3212(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path186011_3_6(p, opacityReceiver);
     }
    //----------------------------------------

    //Use (for ColorFrom)
    private void Paint_use5698(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
        Paint_path5695(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use5698(IRenderPath path)
    {
        SetPathData_path5695(path);
    }

    private void SetPathColor_use5698(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
    }
    private void SetPathOpacity_use5698(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path5695(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use11024_8(PaintAvatarInfo p) //Use: Time
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path4914(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use11024_8(IRenderPath path)
    {
        SetPathData_path4914(path);
    }
    private void SetPathColor_use11024_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path4914(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use11024_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4914(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: Pulsing
    private void Paint_g11026_3(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use3212(p, MaxColor);
        SetPathColor_use5698(p, MinColor);
        SetPathColor_use11024_8(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use3212(p, MaxOpacity);
        SetPathOpacity_use5698(p, MinOpacity);
        SetPathOpacity_use11024_8(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use3212(MaxPath);
        SetPathData_use5698(MinPath);
        SetPathData_use11024_8(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g11028_5(PaintAvatarInfo p) //Group: Low
    {
        if (IsVisible(p.TopicInfo.ABP,low))
        {
            Paint_use3210(p);// Shadow
            Paint_g11026_3(p);// Pulsing
        }
    }
    private void SetPathData_g11028_5(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g11028_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g11028_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path standard
    private void Paint_path9(PaintAvatarInfo p) //Path: standard
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path9(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path9(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path9(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path minimum
    private void Paint_path3852(PaintAvatarInfo p) //Path: minimum
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path3852(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path3852(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path3852(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path outside
    private void Paint_path10268(PaintAvatarInfo p) //Path: outside
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path10268(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path10268(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path10268(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path absmini
    private void Paint_path11016(PaintAvatarInfo p) //Path: absmini
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path11016(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path11016(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path11016(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path lowMin
    private void Paint_path5695(PaintAvatarInfo p) //Path: lowMin
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path5695(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path5695(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path5695(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path lowMax
    private void Paint_path186011_3_6(PaintAvatarInfo p) //Path: lowMax
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path186011_3_6(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path186011_3_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path186011_3_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        opacityReceiver.Opacity = 0.96f;
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_use5182(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xffffff;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_use5182(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_use5182(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xffffff;
    }
    private void SetPathOpacity_use5182(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------


    private void Paint_use5001(PaintAvatarInfo p) //Path: dashedLine
    {
        if (IsVisible(p.TopicInfo.ABP,notavail,unknown))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_use5001(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------

    private void Paint_g3840(PaintAvatarInfo p) // always hidden: 'Helper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------


    private void Paint_use3865(PaintAvatarInfo p) //Path: line
    {
        if (IsVisible(p.TopicInfo.ABP,low,safe,high))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_use3865(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------

    // Skill: default -> use face
    private void Paint_use12806(PaintAvatarInfo p) //Use: face
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(0.921918,0.214646,-0.259607,0.936207,58.0541,-6.59482);
        Paint_g1886_4(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use12806(IRenderPath path)
    {
        SetPathData_g1886_4(path);
    }
    private void SetPathColor_use12806(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g1886_4(p, colorReceiver);
    }
    private void SetPathOpacity_use12806(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g1886_4(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use airway
    private void Paint_use30934_62(PaintAvatarInfo p) //Use: airway
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(0.999756,0.0220793,-0.0220793,0.999756,4.56604,-1.70667);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g1764(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use30934_62(IRenderPath path)
    {
        SetPathData_g1764(path);
    }
    private void SetPathColor_use30934_62(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g1764(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use30934_62(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g1764(p, opacityReceiver);
     }
    //----------------------------------------


    private void Paint_use4828(PaintAvatarInfo p) //Path: dashedLine
    {
        if (IsVisible(p.TopicInfo.ABP,notavail,unknown))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_use4828(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------

      

    private void Paint_g1838(PaintAvatarInfo p) //Group: relaxed
    {
        if (IsVisible(p.TopicInfo.Neuromuscular,low))
        {
            Paint_g10280(p);// High
            Paint_g5641(p);// Safe
            Paint_g11028_5(p);// Low
            Paint_g3840(p);// Helper
            Paint_use3865(p);// line
            Paint_use12806(p);// face
            Paint_use30934_62(p);// airway
            Paint_use4828(p);// dashedLine
        }
    }
    private void SetPathData_g1838(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1838(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1838(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use5545(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
        Paint_path4873(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathColor_use5545(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use4875(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
        Paint_path1995(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use4875(IRenderPath path)
    {
        SetPathData_path1995(path);
    }

    private void SetPathColor_use4875(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
    }
    private void SetPathOpacity_use4875(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path1995(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use4877(PaintAvatarInfo p) //Use: Max
    {
        Paint_path4873(p);
    }
    private void SetPathData_use4877(IRenderPath path)
    {
        SetPathData_path4873(path);
    }
    private void SetPathColor_use4877(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path4873(p, colorReceiver);
    }
    private void SetPathOpacity_use4877(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4873(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use5605_2(PaintAvatarInfo p) //Use: Time
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path4914(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use5605_2(IRenderPath path)
    {
        SetPathData_path4914(path);
    }
    private void SetPathColor_use5605_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path4914(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use5605_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4914(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g4881(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use4875(p, MinColor);
        SetPathColor_use4877(p, MaxColor);
        SetPathColor_use5605_2(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use4875(p, MinOpacity);
        SetPathOpacity_use4877(p, MaxOpacity);
        SetPathOpacity_use5605_2(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use4875(MinPath);
        SetPathData_use4877(MaxPath);
        SetPathData_use5605_2(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g5576(PaintAvatarInfo p) //Group: High
    {
        if (IsVisible(p.TopicInfo.ABP,high))
        {
            Paint_use5545(p);// Shadow
            Paint_g4881(p);// pulsing
        }
    }
    private void SetPathData_g5576(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g5576(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g5576(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use5548(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
        Paint_path1995(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathColor_use5548(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use4910(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
        Paint_path4902(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use4910(IRenderPath path)
    {
        SetPathData_path4902(path);
    }

    private void SetPathColor_use4910(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
    }
    private void SetPathOpacity_use4910(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4902(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use4904(PaintAvatarInfo p) //Use: Max
    {
        Paint_path1995(p);
    }
    private void SetPathData_use4904(IRenderPath path)
    {
        SetPathData_path1995(path);
    }
    private void SetPathColor_use4904(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path1995(p, colorReceiver);
    }
    private void SetPathOpacity_use4904(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path1995(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use5605(PaintAvatarInfo p) //Use: Time
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path4914(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use5605(IRenderPath path)
    {
        SetPathData_path4914(path);
    }
    private void SetPathColor_use5605(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path4914(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use5605(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4914(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g4908(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use4910(p, MinColor);
        SetPathColor_use4904(p, MaxColor);
        SetPathColor_use5605(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use4910(p, MinOpacity);
        SetPathOpacity_use4904(p, MaxOpacity);
        SetPathOpacity_use5605(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use4910(MinPath);
        SetPathData_use4904(MaxPath);
        SetPathData_use5605(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g5569(PaintAvatarInfo p) //Group: Safe
    {
        if (IsVisible(p.TopicInfo.ABP,safe, notavail, unknown))
        {
            Paint_use5548(p);// Shadow
            Paint_g4908(p);// pulsing
        }
    }
    private void SetPathData_g5569(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g5569(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g5569(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use6444(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
        Paint_path9777(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathColor_use6444(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use9853(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
        Paint_path9775(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use9853(IRenderPath path)
    {
        SetPathData_path9775(path);
    }

    private void SetPathColor_use9853(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
    }
    private void SetPathOpacity_use9853(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path9775(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use9855(PaintAvatarInfo p) //Use: Max
    {
        Paint_path9777(p);
    }
    private void SetPathData_use9855(IRenderPath path)
    {
        SetPathData_path9777(path);
    }
    private void SetPathColor_use9855(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path9777(p, colorReceiver);
    }
    private void SetPathOpacity_use9855(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path9777(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use11119(PaintAvatarInfo p) //Use: Time
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path4914(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use11119(IRenderPath path)
    {
        SetPathData_path4914(path);
    }
    private void SetPathColor_use11119(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path4914(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use11119(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4914(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g11121(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use9853(p, MinColor);
        SetPathColor_use9855(p, MaxColor);
        SetPathColor_use11119(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use9853(p, MinOpacity);
        SetPathOpacity_use9855(p, MaxOpacity);
        SetPathOpacity_use11119(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use9853(MinPath);
        SetPathData_use9855(MaxPath);
        SetPathData_use11119(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g11123(PaintAvatarInfo p) //Group: Low
    {
        if (IsVisible(p.TopicInfo.ABP,low))
        {
            Paint_use6444(p);// Shadow
            Paint_g11121(p);// pulsing
        }
    }
    private void SetPathData_g11123(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g11123(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g11123(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path outside
    private void Paint_path4873(PaintAvatarInfo p) //Path: outside
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path4873(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path4873(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path4873(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path standard
    private void Paint_path1995(PaintAvatarInfo p) //Path: standard
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path1995(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path1995(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path1995(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path standardLine
    private void Paint_path20074(PaintAvatarInfo p) //Path: standardLine
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path20074(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path20074(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path20074(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path minimum
    private void Paint_path4902(PaintAvatarInfo p) //Path: minimum
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path4902(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path4902(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path4902(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path absminimum
    private void Paint_path11125(PaintAvatarInfo p) //Path: absminimum
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path11125(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path11125(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path11125(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path LowMax
    private void Paint_path9777(PaintAvatarInfo p) //Path: LowMax
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path9777(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path9777(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path9777(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path LowMin
    private void Paint_path9775(PaintAvatarInfo p) //Path: LowMin
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path9775(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path9775(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path9775(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    private void Paint_g4894(PaintAvatarInfo p) // always hidden: 'Helper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> use face
    private void Paint_use12723(PaintAvatarInfo p) //Use: face
    {
        Paint_g1886_4(p);
    }
    private void SetPathData_use12723(IRenderPath path)
    {
        SetPathData_g1886_4(path);
    }
    private void SetPathColor_use12723(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g1886_4(p, colorReceiver);
    }
    private void SetPathOpacity_use12723(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g1886_4(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use airway
    private void Paint_use30934(PaintAvatarInfo p) //Use: airway
    {
        Paint_g1764(p);
    }
    private void SetPathData_use30934(IRenderPath path)
    {
        SetPathData_g1764(path);
    }
    private void SetPathColor_use30934(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g1764(p, colorReceiver);
    }
    private void SetPathOpacity_use30934(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g1764(p, opacityReceiver);
     }
    //----------------------------------------


    private void Paint_use4896(PaintAvatarInfo p) //Path: line
    {
        if (IsVisible(p.TopicInfo.ABP,low,safe,high))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_use4896(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------


    private void Paint_path24403(PaintAvatarInfo p) //Path: dashedLine
    {
        if (IsVisible(p.TopicInfo.ABP,notavail,unknown))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_path24403(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------

      

    private void Paint_g1855(PaintAvatarInfo p) //Group: thumbsup
    {
        if (IsVisible(p.TopicInfo.Neuromuscular,safe))
        {
            int colorWas = _patientAvatarRenderer.FillColor;
            _patientAvatarRenderer.FillColor = 0xe;
            Paint_g5576(p);// High
            Paint_g5569(p);// Safe
            Paint_g11123(p);// Low
            Paint_g4894(p);// Helper
            Paint_use12723(p);// face
            Paint_use30934(p);// airway
            Paint_use4896(p);// line
            Paint_path24403(p);// dashedLine
            _patientAvatarRenderer.FillColor = colorWas;
        }
    }
    private void SetPathData_g1855(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1855(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
            colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_g1855(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use2152(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
        Paint_path819(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathColor_use2152(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
    }
    //----------------------------------------

      
    // Skill: default -> use Max
    private void Paint_use841(PaintAvatarInfo p) //Use: Max
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path819(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use841(IRenderPath path)
    {
        SetPathData_path819(path);
    }
    private void SetPathColor_use841(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path819(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use841(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path819(p, opacityReceiver);
     }
    //----------------------------------------

    //Use (for ColorFrom)
    private void Paint_use843(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
        Paint_path821(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use843(IRenderPath path)
    {
        SetPathData_path821(path);
    }

    private void SetPathColor_use843(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
    }
    private void SetPathOpacity_use843(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path821(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use11119_5(PaintAvatarInfo p) //Use: Time
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path4914(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use11119_5(IRenderPath path)
    {
        SetPathData_path4914(path);
    }
    private void SetPathColor_use11119_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path4914(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use11119_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4914(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g2125(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use841(p, MaxColor);
        SetPathColor_use843(p, MinColor);
        SetPathColor_use11119_5(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use841(p, MaxOpacity);
        SetPathOpacity_use843(p, MinOpacity);
        SetPathOpacity_use11119_5(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use841(MaxPath);
        SetPathData_use843(MinPath);
        SetPathData_use11119_5(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g859(PaintAvatarInfo p) //Group: High
    {
        if (IsVisible(p.TopicInfo.ABP,high))
        {
            Paint_use2152(p);// Shadow
            Paint_g2125(p);// pulsing
        }
    }
    private void SetPathData_g859(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g859(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g859(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use2127(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
        Paint_path821(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathColor_use2127(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use861(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
        Paint_path823(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use861(IRenderPath path)
    {
        SetPathData_path823(path);
    }

    private void SetPathColor_use861(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
    }
    private void SetPathOpacity_use861(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path823(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use864(PaintAvatarInfo p) //Use: Max
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path821(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use864(IRenderPath path)
    {
        SetPathData_path821(path);
    }
    private void SetPathColor_use864(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path821(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use864(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path821(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use11119_4(PaintAvatarInfo p) //Use: Time
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path4914(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use11119_4(IRenderPath path)
    {
        SetPathData_path4914(path);
    }
    private void SetPathColor_use11119_4(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path4914(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use11119_4(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4914(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g2115(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use861(p, MinColor);
        SetPathColor_use864(p, MaxColor);
        SetPathColor_use11119_4(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use861(p, MinOpacity);
        SetPathOpacity_use864(p, MaxOpacity);
        SetPathOpacity_use11119_4(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use861(MinPath);
        SetPathData_use864(MaxPath);
        SetPathData_use11119_4(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g869(PaintAvatarInfo p) //Group: Safe
    {
        if (IsVisible(p.TopicInfo.ABP,safe, notavail, unknown))
        {
            Paint_use2127(p);// Shadow
            Paint_g2115(p);// pulsing
        }
    }
    private void SetPathData_g869(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g869(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g869(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use5531(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
        Paint_use845_2(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathColor_use5531(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.Oxygen);
    }
    //----------------------------------------

      
    // Skill: default -> use Max
    private void Paint_use5430(PaintAvatarInfo p) //Use: Max
    {
        Paint_use845_2(p);
    }
    private void SetPathData_use5430(IRenderPath path)
    {
        SetPathData_use845_2(path);
    }
    private void SetPathColor_use5430(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_use845_2(p, colorReceiver);
    }
    private void SetPathOpacity_use5430(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_use845_2(p, opacityReceiver);
     }
    //----------------------------------------

    //Use (for ColorFrom)
    private void Paint_use5347(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
        Paint_use847_1(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use5347(IRenderPath path)
    {
        SetPathData_use847_1(path);
    }

    private void SetPathColor_use5347(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.Oxygen);
    }
    private void SetPathOpacity_use5347(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_use847_1(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use11119_8(PaintAvatarInfo p) //Use: Time
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path4914(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use11119_8(IRenderPath path)
    {
        SetPathData_path4914(path);
    }
    private void SetPathColor_use11119_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path4914(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use11119_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path4914(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g2120(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use5430(p, MaxColor);
        SetPathColor_use5347(p, MinColor);
        SetPathColor_use11119_8(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use5430(p, MaxOpacity);
        SetPathOpacity_use5347(p, MinOpacity);
        SetPathOpacity_use11119_8(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use5430(MaxPath);
        SetPathData_use5347(MinPath);
        SetPathData_use11119_8(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g855(PaintAvatarInfo p) //Group: Low
    {
        if (IsVisible(p.TopicInfo.ABP,low))
        {
            Paint_use5531(p);// Shadow
            Paint_g2120(p);// pulsing
        }
    }
    private void SetPathData_g855(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g855(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g855(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path outside
    private void Paint_path819(PaintAvatarInfo p) //Path: outside
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path819(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path819(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path819(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path standard
    private void Paint_path821(PaintAvatarInfo p) //Path: standard
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path821(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path821(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path821(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path minimum
    private void Paint_path823(PaintAvatarInfo p) //Path: minimum
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path823(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path823(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path823(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path absminimum
    private void Paint_path825(PaintAvatarInfo p) //Path: absminimum
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path825(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path825(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path825(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path LowMax
    private void Paint_use845_2(PaintAvatarInfo p) //Path: LowMax
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_use845_2(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_use845_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_use845_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path LowMin
    private void Paint_use847_1(PaintAvatarInfo p) //Path: LowMin
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_use847_1(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_use847_1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_use847_1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    private void Paint_g827(PaintAvatarInfo p) // always hidden: 'Helper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    private void Paint_path8628(PaintAvatarInfo p) // always hidden: ''
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8630(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8630(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8630(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path8630(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: mouth
    private void Paint_g8632(PaintAvatarInfo p)
    {
        Paint_path8628(p);// 
        Paint_path8630(p);// 
    }
    //----------------------------------------
    private void SetPathData_g8632(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g8632(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8632(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> Path 
    private void Paint_path8634(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8634(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8634(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path8634(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_g8636(PaintAvatarInfo p) //Group: closed
    {
        if (IsVisible(p.TopicInfo.Brain,safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,0,-1.14823);
            Paint_path8634(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g8636(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g8636(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8636(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8638(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xffffff;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8638(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8638(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xffffff;
    }
    private void SetPathOpacity_path8638(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8640(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x7e4f23;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8640(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8640(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x7e4f23;
    }
    private void SetPathOpacity_path8640(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8642(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8642(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8642(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path8642(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8644(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xb1b1b1;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8644(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8644(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xb1b1b1;
    }
    private void SetPathOpacity_path8644(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 
    private void Paint_g8646(PaintAvatarInfo p)
    {
        Paint_path8638(p);// 
        Paint_path8640(p);// 
        Paint_path8642(p);// 
        Paint_path8644(p);// 
    }
    //----------------------------------------
    private void SetPathData_g8646(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g8646(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8646(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

      

    private void Paint_g8648(PaintAvatarInfo p) //Group: open
    {
        if (IsVisible(p.TopicInfo.Brain,high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(0.264583,0,0,0.264583,2.11295e-06,143.452);
            Paint_g8646(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g8648(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g8648(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8648(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8650(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe5e5e5;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8650(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8650(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe5e5e5;
    }
    private void SetPathOpacity_path8650(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8652(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8652(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8652(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path8652(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8654(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xcccccc;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8654(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8654(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xcccccc;
    }
    private void SetPathOpacity_path8654(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8656(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8656(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8656(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path8656(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_g8658(PaintAvatarInfo p) //Group: unknown
    {
        if (IsVisible(p.TopicInfo.Brain,notavail, unknown, low))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(0.264583,0,0,0.264583,2.11295e-06,143.452);
            Paint_path8650(p);// 
            Paint_path8652(p);// 
            Paint_path8654(p);// 
            Paint_path8656(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g8658(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g8658(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8658(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: left eye
    private void Paint_g8660(PaintAvatarInfo p)
    {
        Paint_g8636(p);// closed
        Paint_g8648(p);// open
        Paint_g8658(p);// unknown
    }
    //----------------------------------------
    private void SetPathData_g8660(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g8660(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8660(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> Path 
    private void Paint_path8694(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8694(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8694(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path8694(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_g8696(PaintAvatarInfo p) //Group: closed
    {
        if (IsVisible(p.TopicInfo.Brain,safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,0,-1.14823);
            Paint_path8694(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g8696(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g8696(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8696(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8698(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xffffff;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8698(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8698(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xffffff;
    }
    private void SetPathOpacity_path8698(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8700(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x7e4f23;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8700(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8700(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x7e4f23;
    }
    private void SetPathOpacity_path8700(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8702(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8702(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8702(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path8702(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8704(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xb1b1b1;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8704(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8704(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xb1b1b1;
    }
    private void SetPathOpacity_path8704(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 
    private void Paint_g8706(PaintAvatarInfo p)
    {
        Paint_path8698(p);// 
        Paint_path8700(p);// 
        Paint_path8702(p);// 
        Paint_path8704(p);// 
    }
    //----------------------------------------
    private void SetPathData_g8706(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g8706(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8706(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

      

    private void Paint_g8708(PaintAvatarInfo p) //Group: open
    {
        if (IsVisible(p.TopicInfo.Brain,high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(0.264583,0,0,0.264583,2.11295e-06,143.452);
            Paint_g8706(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g8708(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g8708(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8708(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8710(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe5e5e5;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8710(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8710(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe5e5e5;
    }
    private void SetPathOpacity_path8710(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8712(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8712(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8712(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path8712(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8714(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xcccccc;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8714(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8714(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xcccccc;
    }
    private void SetPathOpacity_path8714(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path8716(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path8716(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path8716(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path8716(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_g8718(PaintAvatarInfo p) //Group: unknown
    {
        if (IsVisible(p.TopicInfo.Brain,notavail, unknown, low))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(0.264583,0,0,0.264583,2.11295e-06,143.452);
            Paint_path8710(p);// 
            Paint_path8712(p);// 
            Paint_path8714(p);// 
            Paint_path8716(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g8718(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g8718(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g8718(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: left eye
    private void Paint_use8662(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.8138,0.03175);
        Paint_g8696(p);// closed
        Paint_g8708(p);// open
        Paint_g8718(p);// unknown
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_use8662(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_use8662(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_use8662(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    //skill: default -> Group: face
    private void Paint_use3014_9(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.00001,0,0,0.999973,-0.000475101,0.00503745);
        Paint_g8632(p);// mouth
        Paint_g8660(p);// left eye
        Paint_use8662(p);// left eye
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_use3014_9(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_use3014_9(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_use3014_9(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use airway
    private void Paint_use30934_9(PaintAvatarInfo p) //Use: airway
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g1764(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use30934_9(IRenderPath path)
    {
        SetPathData_g1764(path);
    }
    private void SetPathColor_use30934_9(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g1764(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use30934_9(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g1764(p, opacityReceiver);
     }
    //----------------------------------------


    private void Paint_use3096(PaintAvatarInfo p) //Path: line
    {
        if (IsVisible(p.TopicInfo.ABP,low,safe,high))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_use3096(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------


    private void Paint_path45759(PaintAvatarInfo p) //Path: dashedLine
    {
        if (IsVisible(p.TopicInfo.ABP,notavail,unknown))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_path45759(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------

      

    private void Paint_g1858(PaintAvatarInfo p) //Group: nothumps
    {
        if (IsVisible(p.TopicInfo.Neuromuscular,notavail,unknown))
        {
            Paint_g859(p);// High
            Paint_g869(p);// Safe
            Paint_g855(p);// Low
            Paint_g827(p);// Helper
            Paint_use3014_9(p);// face
            Paint_use30934_9(p);// airway
            Paint_use3096(p);// line
            Paint_path45759(p);// dashedLine
        }
    }
    private void SetPathData_g1858(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1858(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1858(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    private void Paint_path60_9(PaintAvatarInfo p) // always hidden: ''
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path2003_7(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path2003_7(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path2003_7(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path2003_7(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: mouth
    private void Paint_g1832_1(PaintAvatarInfo p)
    {
        Paint_path60_9(p);// 
        Paint_path2003_7(p);// 
    }
    //----------------------------------------
    private void SetPathData_g1832_1(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1832_1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1832_1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> Path 
    private void Paint_path62_6(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path62_6(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path62_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path62_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_g1827_7(PaintAvatarInfo p) //Group: closed
    {
        if (IsVisible(p.TopicInfo.Brain,safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,0,-1.14823);
            Paint_path62_6(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1827_7(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1827_7(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1827_7(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path74_4(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xffffff;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path74_4(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path74_4(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xffffff;
    }
    private void SetPathOpacity_path74_4(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path76_6(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x7e4f23;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path76_6(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path76_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x7e4f23;
    }
    private void SetPathOpacity_path76_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path78_8(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path78_8(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path78_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path78_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path80_7(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xb1b1b1;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path80_7(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path80_7(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xb1b1b1;
    }
    private void SetPathOpacity_path80_7(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 
    private void Paint_g6255_5(PaintAvatarInfo p)
    {
        Paint_path74_4(p);// 
        Paint_path76_6(p);// 
        Paint_path78_8(p);// 
        Paint_path80_7(p);// 
    }
    //----------------------------------------
    private void SetPathData_g6255_5(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g6255_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g6255_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

      

    private void Paint_g84_6(PaintAvatarInfo p) //Group: open
    {
        if (IsVisible(p.TopicInfo.Brain,high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(0.264583,0,0,0.264583,2.11295e-06,143.452);
            Paint_g6255_5(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g84_6(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g84_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g84_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path4287_3(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe5e5e5;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path4287_3(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path4287_3(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe5e5e5;
    }
    private void SetPathOpacity_path4287_3(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path4289_9(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path4289_9(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path4289_9(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path4289_9(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path4387_6(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xcccccc;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path4387_6(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path4387_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xcccccc;
    }
    private void SetPathOpacity_path4387_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path4389_4(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path4389_4(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path4389_4(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path4389_4(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_g6166_6(PaintAvatarInfo p) //Group: unknown
    {
        if (IsVisible(p.TopicInfo.Brain,notavail, unknown, low))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(0.264583,0,0,0.264583,2.11295e-06,143.452);
            Paint_path4287_3(p);// 
            Paint_path4289_9(p);// 
            Paint_path4387_6(p);// 
            Paint_path4389_4(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g6166_6(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g6166_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g6166_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: left eye
    private void Paint_g1785_3(PaintAvatarInfo p)
    {
        Paint_g1827_7(p);// closed
        Paint_g84_6(p);// open
        Paint_g6166_6(p);// unknown
    }
    //----------------------------------------
    private void SetPathData_g1785_3(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1785_3(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1785_3(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use right eye
    private void Paint_use1829(PaintAvatarInfo p) //Use: right eye
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.8138,0.03175);
        Paint_g1785_3(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1829(IRenderPath path)
    {
        SetPathData_g1785_3(path);
    }
    private void SetPathColor_use1829(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g1785_3(p, colorReceiver);
    }
    private void SetPathOpacity_use1829(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g1785_3(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: face
    private void Paint_g1886_4(PaintAvatarInfo p)
    {
        Paint_g1832_1(p);// mouth
        Paint_g1785_3(p);// left eye
        Paint_use1829(p);// right eye
    }
    //----------------------------------------
    private void SetPathData_g1886_4(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1886_4(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1886_4(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    private void Paint_g3033_3(PaintAvatarInfo p) // always hidden: 'FaceHelper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> Path safe
    private void Paint_path105(PaintAvatarInfo p) //Path: safe
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path105(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path105(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path105(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path low
    private void Paint_path99(PaintAvatarInfo p) //Path: low
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path99(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path99(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path99(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path absmin
    private void Paint_path1097(PaintAvatarInfo p) //Path: absmin
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path1097(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path1097(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path1097(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path high
    private void Paint_path7845(PaintAvatarInfo p) //Path: high
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path7845(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path7845(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path7845(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: helper
    private void Paint_g3907(PaintAvatarInfo p)
    {
        Paint_path105(p);// safe
        Paint_path99(p);// low
        Paint_path1097(p);// absmin
        Paint_path7845(p);// high
    }
    //----------------------------------------
    private void SetPathData_g3907(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3907(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3907(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use Shadow
    private void Paint_use8624(PaintAvatarInfo p) //Use: Shadow
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x343434;
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.5f;
        Paint_path7845(p);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use8624(IRenderPath path)
    {
        SetPathData_path7845(path);
    }
    private void SetPathColor_use8624(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path7845(p, colorReceiver);
        colorReceiver.FillColor = 0x343434;
    }
    private void SetPathOpacity_use8624(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path7845(p, opacityReceiver);
        opacityReceiver.Opacity = 0.5f;
     }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use7765(PaintAvatarInfo p) //Use: Max
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path7845(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use7765(IRenderPath path)
    {
        SetPathData_path7845(path);
    }
    private void SetPathColor_use7765(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path7845(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use7765(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path7845(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Min
    private void Paint_use7767(PaintAvatarInfo p) //Use: Min
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xb3b3b3;
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.75f;
        Paint_path1097(p);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use7767(IRenderPath path)
    {
        SetPathData_path1097(path);
    }
    private void SetPathColor_use7767(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path1097(p, colorReceiver);
        colorReceiver.FillColor = 0xb3b3b3;
    }
    private void SetPathOpacity_use7767(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path1097(p, opacityReceiver);
        opacityReceiver.Opacity = 0.75f;
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use5676_2(PaintAvatarInfo p) //Use: Time
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,-1,0,503.179);
        Paint_path2449(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use5676_2(IRenderPath path)
    {
        SetPathData_path2449(path);
    }
    private void SetPathColor_use5676_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path2449(p, colorReceiver);
    }
    private void SetPathOpacity_use5676_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path2449(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g7771(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use7765(p, MaxColor);
        SetPathColor_use7767(p, MinColor);
        SetPathColor_use5676_2(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use7765(p, MaxOpacity);
        SetPathOpacity_use7767(p, MinOpacity);
        SetPathOpacity_use5676_2(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use7765(MaxPath);
        SetPathData_use7767(MinPath);
        SetPathData_use5676_2(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.RespRate);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g7773(PaintAvatarInfo p) //Group: high
    {
        if (IsVisible(p.TopicInfo.CO2, high))
        {
            Paint_use8624(p);// Shadow
            Paint_g7771(p);// pulsing
        }
    }
    private void SetPathData_g7773(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g7773(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7773(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use Shadow
    private void Paint_use7704(PaintAvatarInfo p) //Use: Shadow
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x333333;
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.5f;
        Paint_path105(p);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use7704(IRenderPath path)
    {
        SetPathData_path105(path);
    }
    private void SetPathColor_use7704(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path105(p, colorReceiver);
        colorReceiver.FillColor = 0x333333;
    }
    private void SetPathOpacity_use7704(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path105(p, opacityReceiver);
        opacityReceiver.Opacity = 0.5f;
     }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use1091(PaintAvatarInfo p) //Use: Max
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path105(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use1091(IRenderPath path)
    {
        SetPathData_path105(path);
    }
    private void SetPathColor_use1091(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path105(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use1091(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path105(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Min
    private void Paint_use1145(PaintAvatarInfo p) //Use: Min
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xb3b3b3;
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.75f;
        Paint_path1097(p);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use1145(IRenderPath path)
    {
        SetPathData_path1097(path);
    }
    private void SetPathColor_use1145(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path1097(p, colorReceiver);
        colorReceiver.FillColor = 0xb3b3b3;
    }
    private void SetPathOpacity_use1145(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path1097(p, opacityReceiver);
        opacityReceiver.Opacity = 0.75f;
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use4613(PaintAvatarInfo p) //Use: Time
    {
        Paint_path2449(p);
    }
    private void SetPathData_use4613(IRenderPath path)
    {
        SetPathData_path2449(path);
    }
    private void SetPathColor_use4613(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path2449(p, colorReceiver);
    }
    private void SetPathOpacity_use4613(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path2449(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g1095(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use1091(p, MaxColor);
        SetPathColor_use1145(p, MinColor);
        SetPathColor_use4613(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use1091(p, MaxOpacity);
        SetPathOpacity_use1145(p, MinOpacity);
        SetPathOpacity_use4613(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use1091(MaxPath);
        SetPathData_use1145(MinPath);
        SetPathData_use4613(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.RespRate);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g3913(PaintAvatarInfo p) //Group: safe
    {
        if (IsVisible(p.TopicInfo.CO2, safe))
        {
            Paint_use7704(p);// Shadow
            Paint_g1095(p);// pulsing
        }
    }
    private void SetPathData_g3913(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3913(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3913(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use Shadow
    private void Paint_use7875(PaintAvatarInfo p) //Use: Shadow
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x333333;
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.5f;
        Paint_path99(p);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use7875(IRenderPath path)
    {
        SetPathData_path99(path);
    }
    private void SetPathColor_use7875(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path99(p, colorReceiver);
        colorReceiver.FillColor = 0x333333;
    }
    private void SetPathOpacity_use7875(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path99(p, opacityReceiver);
        opacityReceiver.Opacity = 0.5f;
     }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use7877(PaintAvatarInfo p) //Use: Max
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path99(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use7877(IRenderPath path)
    {
        SetPathData_path99(path);
    }
    private void SetPathColor_use7877(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path99(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use7877(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path99(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Min
    private void Paint_use7879(PaintAvatarInfo p) //Use: Min
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xb3b3b3;
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.75f;
        Paint_path1097(p);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use7879(IRenderPath path)
    {
        SetPathData_path1097(path);
    }
    private void SetPathColor_use7879(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path1097(p, colorReceiver);
        colorReceiver.FillColor = 0xb3b3b3;
    }
    private void SetPathOpacity_use7879(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path1097(p, opacityReceiver);
        opacityReceiver.Opacity = 0.75f;
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use5676_4_3(PaintAvatarInfo p) //Use: Time
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,-1,0,503.179);
        Paint_path2449(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use5676_4_3(IRenderPath path)
    {
        SetPathData_path2449(path);
    }
    private void SetPathColor_use5676_4_3(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path2449(p, colorReceiver);
    }
    private void SetPathOpacity_use5676_4_3(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path2449(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g7883(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use7877(p, MaxColor);
        SetPathColor_use7879(p, MinColor);
        SetPathColor_use5676_4_3(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use7877(p, MaxOpacity);
        SetPathOpacity_use7879(p, MinOpacity);
        SetPathOpacity_use5676_4_3(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use7877(MaxPath);
        SetPathData_use7879(MinPath);
        SetPathData_use5676_4_3(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.RespRate);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g7885(PaintAvatarInfo p) //Group: low
    {
        if (IsVisible(p.TopicInfo.CO2, low))
        {
            Paint_use7875(p);// Shadow
            Paint_g7883(p);// pulsing
        }
    }
    private void SetPathData_g7885(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g7885(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7885(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path Line
    private void Paint_use7671(PaintAvatarInfo p) //Path: Line
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_use7671(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_use7671(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use7671(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_g1782(PaintAvatarInfo p) //Group: co2
    {
        if (IsVisible(p.TopicInfo.CO2, low,safe,high))
        {
            Paint_g3907(p);// helper
            Paint_g7773(p);// high
            Paint_g3913(p);// safe
            Paint_g7885(p);// low
            Paint_use7671(p);// Line
        }
    }
    private void SetPathData_g1782(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1782(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1782(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    private void Paint_g8989(PaintAvatarInfo p) // always hidden: 'co2Helper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    private void Paint_use27909(PaintAvatarInfo p) //Use: 
    {
        if (IsVisible(p.TopicInfo.AWP, low, safe, high))
        {
            int colorWas = _patientAvatarRenderer.FillColor;
            _patientAvatarRenderer.FillColor = 0xffffff;
            Paint_path26136(p);
            _patientAvatarRenderer.FillColor = colorWas;
        }
    }
    //----------------------------------------

    // Skill: default -> Path normal
    private void Paint_path5273(PaintAvatarInfo p) //Path: normal
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path5273(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path5273(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path5273(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path outside
    private void Paint_path5277(PaintAvatarInfo p) //Path: outside
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path5277(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path5277(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path5277(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path inside
    private void Paint_path6201(PaintAvatarInfo p) //Path: inside
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path6201(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path6201(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path6201(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path minimum
    private void Paint_path7273(PaintAvatarInfo p) //Path: minimum
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path7273(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path7273(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path7273(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path26136(PaintAvatarInfo p) //Path: 
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path26136(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path26136(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path26136(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    private void Paint_g4342(PaintAvatarInfo p) // always hidden: 'helper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use5197(PaintAvatarInfo p)
    {
float opacityWas = _patientAvatarRenderer.Opacity;
_patientAvatarRenderer.Opacity = 0.5f;

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.FiO2);
        Paint_path5277(p);
        _patientAvatarRenderer.FillColor = colorWas;
_patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathColor_use5197(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.FiO2);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use4344(PaintAvatarInfo p)
    {
float opacityWas = _patientAvatarRenderer.Opacity;
_patientAvatarRenderer.Opacity = 0.8f;

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.FiO2);
        Paint_path5273(p);
        _patientAvatarRenderer.FillColor = colorWas;
_patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use4344(IRenderPath path)
    {
        SetPathData_path5273(path);
    }

    private void SetPathColor_use4344(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.FiO2);
    }
    private void SetPathOpacity_use4344(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path5273(p, opacityReceiver);
opacityReceiver.Opacity = 0.8f;
    }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use4346(PaintAvatarInfo p) //Use: Max
    {
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.8f;
        Paint_path5277(p);
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use4346(IRenderPath path)
    {
        SetPathData_path5277(path);
    }
    private void SetPathColor_use4346(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path5277(p, colorReceiver);
    }
    private void SetPathOpacity_use4346(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path5277(p, opacityReceiver);
        opacityReceiver.Opacity = 0.8f;
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use6871_2(PaintAvatarInfo p) //Use: Time
    {
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.8f;
        Paint_path1166(p);
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use6871_2(IRenderPath path)
    {
        SetPathData_path1166(path);
    }
    private void SetPathColor_use6871_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path1166(p, colorReceiver);
    }
    private void SetPathOpacity_use6871_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path1166(p, opacityReceiver);
        opacityReceiver.Opacity = 0.8f;
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g5193(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use4344(p, MinColor);
        SetPathColor_use4346(p, MaxColor);
        SetPathColor_use6871_2(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use4344(p, MinOpacity);
        SetPathOpacity_use4346(p, MaxOpacity);
        SetPathOpacity_use6871_2(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use4344(MinPath);
        SetPathData_use4346(MaxPath);
        SetPathData_use6871_2(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.RespRate);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g5205(PaintAvatarInfo p) //Group: high
    {
        if (IsVisible(p.TopicInfo.TidalVolume, high))
        {
            Paint_use5197(p);// Shadow
            Paint_g5193(p);// pulsing
        }
    }
    private void SetPathData_g5205(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g5205(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g5205(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use6265(PaintAvatarInfo p)
    {
float opacityWas = _patientAvatarRenderer.Opacity;
_patientAvatarRenderer.Opacity = 0.8f;

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.FiO2);
        Paint_path5273(p);
        _patientAvatarRenderer.FillColor = colorWas;
_patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathColor_use6265(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.FiO2);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use6255(PaintAvatarInfo p)
    {
float opacityWas = _patientAvatarRenderer.Opacity;
_patientAvatarRenderer.Opacity = 0.8f;

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.FiO2);
        Paint_path6201(p);
        _patientAvatarRenderer.FillColor = colorWas;
_patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use6255(IRenderPath path)
    {
        SetPathData_path6201(path);
    }

    private void SetPathColor_use6255(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.FiO2);
    }
    private void SetPathOpacity_use6255(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path6201(p, opacityReceiver);
opacityReceiver.Opacity = 0.8f;
    }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use6257(PaintAvatarInfo p) //Use: Max
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.8f;
        Paint_path5273(p);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use6257(IRenderPath path)
    {
        SetPathData_path5273(path);
    }
    private void SetPathColor_use6257(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path5273(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use6257(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path5273(p, opacityReceiver);
        opacityReceiver.Opacity = 0.8f;
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use6871(PaintAvatarInfo p) //Use: Time
    {
        Paint_path1166(p);
    }
    private void SetPathData_use6871(IRenderPath path)
    {
        SetPathData_path1166(path);
    }
    private void SetPathColor_use6871(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path1166(p, colorReceiver);
    }
    private void SetPathOpacity_use6871(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path1166(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g6263(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use6255(p, MinColor);
        SetPathColor_use6257(p, MaxColor);
        SetPathColor_use6871(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use6255(p, MinOpacity);
        SetPathOpacity_use6257(p, MaxOpacity);
        SetPathOpacity_use6871(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use6255(MinPath);
        SetPathData_use6257(MaxPath);
        SetPathData_use6871(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.RespRate);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g6272(PaintAvatarInfo p) //Group: safe
    {
        if (IsVisible(p.TopicInfo.TidalVolume, safe, unknown, notavail))
        {
            Paint_use6265(p);// Shadow
            Paint_g6263(p);// pulsing
        }
    }
    private void SetPathData_g6272(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g6272(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g6272(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------


    private void Paint_use5195(PaintAvatarInfo p) //Path: Line
    {
        if (IsVisible(p.TopicInfo.TidalVolume, low, safe, high))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_use5195(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use7232(PaintAvatarInfo p)
    {
float opacityWas = _patientAvatarRenderer.Opacity;
_patientAvatarRenderer.Opacity = 0.8f;

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.FiO2);
        Paint_path6201(p);
        _patientAvatarRenderer.FillColor = colorWas;
_patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathColor_use7232(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.FiO2);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use7234(PaintAvatarInfo p)
    {
float opacityWas = _patientAvatarRenderer.Opacity;
_patientAvatarRenderer.Opacity = 0.8f;

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.FiO2);
        Paint_path7273(p);
        _patientAvatarRenderer.FillColor = colorWas;
_patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use7234(IRenderPath path)
    {
        SetPathData_path7273(path);
    }

    private void SetPathColor_use7234(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.FiO2);
    }
    private void SetPathOpacity_use7234(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path7273(p, opacityReceiver);
opacityReceiver.Opacity = 0.8f;
    }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use7236(PaintAvatarInfo p) //Use: Max
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.8f;
        Paint_path6201(p);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use7236(IRenderPath path)
    {
        SetPathData_path6201(path);
    }
    private void SetPathColor_use7236(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path6201(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use7236(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path6201(p, opacityReceiver);
        opacityReceiver.Opacity = 0.8f;
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use7238(PaintAvatarInfo p) //Use: Time
    {
        Paint_path1166(p);
    }
    private void SetPathData_use7238(IRenderPath path)
    {
        SetPathData_path1166(path);
    }
    private void SetPathColor_use7238(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path1166(p, colorReceiver);
    }
    private void SetPathOpacity_use7238(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path1166(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g7240(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use7234(p, MinColor);
        SetPathColor_use7236(p, MaxColor);
        SetPathColor_use7238(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use7234(p, MinOpacity);
        SetPathOpacity_use7236(p, MaxOpacity);
        SetPathOpacity_use7238(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use7234(MinPath);
        SetPathData_use7236(MaxPath);
        SetPathData_use7238(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.RespRate);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g7242(PaintAvatarInfo p) //Group: low
    {
        if (IsVisible(p.TopicInfo.TidalVolume, low))
        {
            Paint_use7232(p);// Shadow
            Paint_g7240(p);// pulsing
        }
    }
    private void SetPathData_g7242(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g7242(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7242(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------


    private void Paint_use2968(PaintAvatarInfo p) //Path: dashed line
    {
        if (IsVisible(p.TopicInfo.TidalVolume,unknown, notavail))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_use2968(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------

    //skill: default -> Group: lung
    private void Paint_g1772(PaintAvatarInfo p)
    {
        Paint_g4342(p);// helper
        Paint_g5205(p);// high
        Paint_g6272(p);// safe
        Paint_use5195(p);// Line
        Paint_g7242(p);// low
        Paint_use2968(p);// dashed line
    }
    //----------------------------------------
    private void SetPathData_g1772(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1772(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1772(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> Path safe
    private void Paint_path123(PaintAvatarInfo p) //Path: safe
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path123(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path123(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path123(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path low
    private void Paint_path126(PaintAvatarInfo p) //Path: low
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path126(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path126(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path126(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        opacityReceiver.Opacity = 0.7f;
    }
    //----------------------------------------

    // Skill: default -> Path high
    private void Paint_path7917(PaintAvatarInfo p) //Path: high
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path7917(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path7917(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path7917(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        opacityReceiver.Opacity = 0.8f;
    }
    //----------------------------------------

    private void Paint_g7934(PaintAvatarInfo p) // always hidden: ''
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    private void Paint_use7941(PaintAvatarInfo p) //Use: safe
    {
        if (IsVisible(p.TopicInfo.CVP, safe))
        {
            int colorWas = _patientAvatarRenderer.FillColor;
            _patientAvatarRenderer.FillColor = 0x3333cc;
            float opacityWas = _patientAvatarRenderer.Opacity;
            _patientAvatarRenderer.Opacity = 0.7f;
            Paint_path123(p);
            _patientAvatarRenderer.FillColor = colorWas;
            _patientAvatarRenderer.Opacity = opacityWas;
        }
    }
    //----------------------------------------

    private void Paint_use7943(PaintAvatarInfo p) //Use: low
    {
        if (IsVisible(p.TopicInfo.CVP, low))
        {
            int colorWas = _patientAvatarRenderer.FillColor;
            _patientAvatarRenderer.FillColor = 0x3333cc;
            Paint_path126(p);
            _patientAvatarRenderer.FillColor = colorWas;
        }
    }
    //----------------------------------------

    private void Paint_use7945(PaintAvatarInfo p) //Use: high
    {
        if (IsVisible(p.TopicInfo.CVP, high))
        {
            int colorWas = _patientAvatarRenderer.FillColor;
            _patientAvatarRenderer.FillColor = 0x3333cc;
            float opacityWas = _patientAvatarRenderer.Opacity;
            _patientAvatarRenderer.Opacity = 0.8f;
            Paint_path7917(p);
            _patientAvatarRenderer.FillColor = colorWas;
            _patientAvatarRenderer.Opacity = opacityWas;
        }
    }
    //----------------------------------------


    private void Paint_use7919(PaintAvatarInfo p) //Path: line
    {
        if (IsVisible(p.TopicInfo.CVP, low,safe,high))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_use7919(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------

    //skill: default -> Group: cvp
    private void Paint_g1777(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0,5.41221);
        Paint_g7934(p);// 
        Paint_use7941(p);// safe
        Paint_use7943(p);// low
        Paint_use7945(p);// high
        Paint_use7919(p);// line
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g1777(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1777(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1777(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> Path Max
    private void Paint_path180(PaintAvatarInfo p) //Path: Max
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path180(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path180(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path180(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path Mid
    private void Paint_path1050(PaintAvatarInfo p) //Path: Mid
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path1050(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path1050(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path1050(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path Min
    private void Paint_path1907(PaintAvatarInfo p) //Path: Min
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path1907(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path1907(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path1907(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path12973(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe7383d;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path12973(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path12973(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe7383d;
    }
    private void SetPathOpacity_path12973(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: BloodCell
    private void Paint_g13101(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.230599,0.201774);
        Paint_path12973(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g13101(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g13101(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g13101(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use13105(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,3.51049,-5.26916);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13105(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13105(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13105(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13112(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,6.1406,-2.25124);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13112(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13112(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13112(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13826(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,7.89802,-4.68405);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13826(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13826(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13826(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13828(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,9.62824,-3.52206);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13828(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13828(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13828(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13830(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-1.46818,0.868928);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13830(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13830(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13830(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13832(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,3.79386,-2.2933);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13832(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13832(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13832(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13834(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.08065,-4.38972);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13834(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13834(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13834(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13836(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,7.71966,-1.3689);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13836(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13836(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13836(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13838(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.29466,1.08729);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13838(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13838(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13838(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13840(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,10.6293,1.46993);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13840(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13840(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13840(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13842(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.0517,-0.530081);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13842(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13842(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13842(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13844(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.1235,2.52306);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13844(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13844(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13844(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13846(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,10.8099,3.59216);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13846(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13846(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13846(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13848(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.8723,5.70559);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13848(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13848(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13848(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13850(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,11.3271,5.33617);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13850(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13850(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13850(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13852(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,10.8174,10.7139);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13852(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13852(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13852(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13854(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,10.635,12.4148);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13854(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13854(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13854(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13856(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,13.3214,11.1211);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13856(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13856(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13856(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13858(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.998,14.0421);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13858(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13858(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13858(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13860(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,11.8963,16.1791);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13860(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13860(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13860(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22156(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.5148,9.73314);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22156(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22156(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22156(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22158(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,13.6329,6.96543);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22158(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22158(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22158(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22160(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,10.8189,14.2343);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22160(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22160(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22160(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22162(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.2698,12.1662);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22162(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22162(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22162(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22164(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,11.085,7.25341);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22164(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22164(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22164(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22166(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,13.3078,3.89856);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22166(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22166(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22166(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22168(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.9452,1.02646);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22168(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22168(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22168(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22170(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,9.39151,0.259705);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22170(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22170(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22170(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22174(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,11.1264,-1.81597);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22174(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22174(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22174(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22176(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.00022,-1.478);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22176(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22176(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22176(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22178(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-1.06968,-1.86232);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22178(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22178(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22178(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22180(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.49721,-3.52348);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22180(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22180(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22180(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22182(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,5.70159,-5.25897);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22182(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22182(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22182(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22186(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,4.78745,-3.78703);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22186(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22186(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22186(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22188(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,9.47798,-1.77245);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22188(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22188(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22188(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22190(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.520133,-2.69799);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22190(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22190(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22190(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22192(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,11.1563,8.85342);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22192(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22192(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22192(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22194(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.6647,8.19855);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22194(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22194(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22194(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use22196(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,7.57554,-3.11281);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use22196(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use22196(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use22196(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use23732(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.0462159,-0.734105);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use23732(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use23732(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use23732(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: Many
    private void Paint_g13108(PaintAvatarInfo p)
    {
        Paint_use13105(p);// 
        Paint_use13112(p);// 
        Paint_use13826(p);// 
        Paint_use13828(p);// 
        Paint_use13830(p);// 
        Paint_use13832(p);// 
        Paint_use13834(p);// 
        Paint_use13836(p);// 
        Paint_use13838(p);// 
        Paint_use13840(p);// 
        Paint_use13842(p);// 
        Paint_use13844(p);// 
        Paint_use13846(p);// 
        Paint_use13848(p);// 
        Paint_use13850(p);// 
        Paint_use13852(p);// 
        Paint_use13854(p);// 
        Paint_use13856(p);// 
        Paint_use13858(p);// 
        Paint_use13860(p);// 
        Paint_use22156(p);// 
        Paint_use22158(p);// 
        Paint_use22160(p);// 
        Paint_use22162(p);// 
        Paint_use22164(p);// 
        Paint_use22166(p);// 
        Paint_use22168(p);// 
        Paint_use22170(p);// 
        Paint_use22174(p);// 
        Paint_use22176(p);// 
        Paint_use22178(p);// 
        Paint_use22180(p);// 
        Paint_use22182(p);// 
        Paint_use22186(p);// 
        Paint_use22188(p);// 
        Paint_use22190(p);// 
        Paint_use22192(p);// 
        Paint_use22194(p);// 
        Paint_use22196(p);// 
        Paint_use23732(p);// 
    }
    //----------------------------------------
    private void SetPathData_g13108(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g13108(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g13108(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use13866(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,4.3858,-4.20197);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13866(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13866(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13866(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13876(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,10.2407,-2.05551);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13876(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13876(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13876(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use13878(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0.155601,-0.453572);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use13878(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use13878(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use13878(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: Few
    private void Paint_g13902(PaintAvatarInfo p)
    {
        Paint_use13866(p);// 
        Paint_use13876(p);// 
        Paint_use13878(p);// 
    }
    //----------------------------------------
    private void SetPathData_g13902(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g13902(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g13902(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use14386(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,5.62128,-3.33337);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14386(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use14386(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use14386(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14390(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,8.59894,-3.77684);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14390(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use14390(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use14390(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14392(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-0.730377,-1.26886);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14392(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use14392(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use14392(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14394(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.65245,-4.40286);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14394(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use14394(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use14394(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14398(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,8.9159,-1.1383);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14398(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use14398(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use14398(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14400(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.9367,-1.92929);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14400(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use14400(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use14400(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14402(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,11.3223,-0.201419);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14402(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use14402(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use14402(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14406(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,12.7146,1.89121);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14406(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use14406(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use14406(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14408(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,11.5896,4.37954);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14408(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use14408(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use14408(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use14412(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,13.052,6.83294);
        Paint_g13101(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use14412(IRenderPath path)
    {
        SetPathData_g13101(path);
    }
    private void SetPathColor_use14412(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13101(p, colorReceiver);
    }
    private void SetPathOpacity_use14412(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13101(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: Normal
    private void Paint_g14424(PaintAvatarInfo p)
    {
        Paint_use14386(p);// 
        Paint_use14390(p);// 
        Paint_use14392(p);// 
        Paint_use14394(p);// 
        Paint_use14398(p);// 
        Paint_use14400(p);// 
        Paint_use14402(p);// 
        Paint_use14406(p);// 
        Paint_use14408(p);// 
        Paint_use14412(p);// 
    }
    //----------------------------------------
    private void SetPathData_g14424(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g14424(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g14424(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    private void Paint_g3989(PaintAvatarInfo p) // always hidden: 'Helper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use4099(PaintAvatarInfo p) //Use: 
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xff8080;
        Paint_path1050(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use4099(IRenderPath path)
    {
        SetPathData_path1050(path);
    }
    private void SetPathColor_use4099(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path1050(p, colorReceiver);
        colorReceiver.FillColor = 0xff8080;
    }
    private void SetPathOpacity_use4099(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path1050(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use15332(PaintAvatarInfo p) //Use: 
    {
        Paint_g14424(p);
    }
    private void SetPathData_use15332(IRenderPath path)
    {
        SetPathData_g14424(path);
    }
    private void SetPathColor_use15332(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g14424(p, colorReceiver);
    }
    private void SetPathOpacity_use15332(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g14424(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g4140(PaintAvatarInfo p) //Group: Safe
    {
        if (IsVisible(p.TopicInfo.CO, safe))
        {
            Paint_use4099(p);// 
            Paint_use15332(p);// 
        }
    }
    private void SetPathData_g4140(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g4140(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g4140(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use4142(PaintAvatarInfo p) //Use: 
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xff8080;
        Paint_path1907(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use4142(IRenderPath path)
    {
        SetPathData_path1907(path);
    }
    private void SetPathColor_use4142(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path1907(p, colorReceiver);
        colorReceiver.FillColor = 0xff8080;
    }
    private void SetPathOpacity_use4142(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path1907(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use16082(PaintAvatarInfo p) //Use: 
    {
        Paint_g13902(p);
    }
    private void SetPathData_use16082(IRenderPath path)
    {
        SetPathData_g13902(path);
    }
    private void SetPathColor_use16082(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13902(p, colorReceiver);
    }
    private void SetPathOpacity_use16082(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13902(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g4146(PaintAvatarInfo p) //Group: Low
    {
        if (IsVisible(p.TopicInfo.CO,low))
        {
            Paint_use4142(p);// 
            Paint_use16082(p);// 
        }
    }
    private void SetPathData_g4146(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g4146(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g4146(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use4148(PaintAvatarInfo p) //Use: 
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xff8080;
        Paint_path180(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use4148(IRenderPath path)
    {
        SetPathData_path180(path);
    }
    private void SetPathColor_use4148(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path180(p, colorReceiver);
        colorReceiver.FillColor = 0xff8080;
    }
    private void SetPathOpacity_use4148(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path180(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use16833(PaintAvatarInfo p) //Use: 
    {
        Paint_g13108(p);
    }
    private void SetPathData_use16833(IRenderPath path)
    {
        SetPathData_g13108(path);
    }
    private void SetPathColor_use16833(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g13108(p, colorReceiver);
    }
    private void SetPathOpacity_use16833(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g13108(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g4152(PaintAvatarInfo p) //Group: High
    {
        if (IsVisible(p.TopicInfo.CO, high))
        {
            Paint_use4148(p);// 
            Paint_use16833(p);// 
        }
    }
    private void SetPathData_g4152(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g4152(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g4152(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------


    private void Paint_use3991(PaintAvatarInfo p) //Path: Line
    {
        if (IsVisible(p.TopicInfo.CO, low, safe, high))
        {
            // todo: color, matrix
            var tempRenderPath = new TemporaryRenderPath();
            SetPathData_use3991(tempRenderPath);
            _patientAvatarRenderer.Fill(p,tempRenderPath);
        }
    }
    //----------------------------------------

    //skill: default -> Group: co
    private void Paint_g1761(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0,5.41221);
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.8f;
        Paint_g3989(p);// Helper
        Paint_g4140(p);// Safe
        Paint_g4146(p);// Low
        Paint_g4152(p);// High
        Paint_use3991(p);// Line
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------
    private void SetPathData_g1761(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1761(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1761(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        opacityReceiver.Opacity = 0.8f;
    }

    // Skill: default -> Path outer
    private void Paint_path192(PaintAvatarInfo p) //Path: outer
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path192(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path192(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path192(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path inner
    private void Paint_path2417(PaintAvatarInfo p) //Path: inner
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path2417(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path2417(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path2417(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    private void Paint_g3239(PaintAvatarInfo p) // always hidden: 'helper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> use Min
    private void Paint_use3243(PaintAvatarInfo p) //Use: Min
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe7383d;
        Paint_path2417(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use3243(IRenderPath path)
    {
        SetPathData_path2417(path);
    }
    private void SetPathColor_use3243(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path2417(p, colorReceiver);
        colorReceiver.FillColor = 0xe7383d;
    }
    private void SetPathOpacity_use3243(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path2417(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use3241(PaintAvatarInfo p) //Use: Max
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path192(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use3241(IRenderPath path)
    {
        SetPathData_path192(path);
    }
    private void SetPathColor_use3241(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path192(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use3241(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path192(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use3253(PaintAvatarInfo p) //Use: Time
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0,-5.41221);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path3251(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use3253(IRenderPath path)
    {
        SetPathData_path3251(path);
    }
    private void SetPathColor_use3253(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path3251(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use3253(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path3251(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g3249(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use3243(p, MinColor);
        SetPathColor_use3241(p, MaxColor);
        SetPathColor_use3253(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use3243(p, MinOpacity);
        SetPathOpacity_use3241(p, MaxOpacity);
        SetPathOpacity_use3253(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use3243(MinPath);
        SetPathData_use3241(MaxPath);
        SetPathData_use3253(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g7666(PaintAvatarInfo p) //Group: low, safe, high
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart, low, safe, high))
        {
            Paint_g3249(p);// pulsing
        }
    }
    private void SetPathData_g7666(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g7666(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7666(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use Min
    private void Paint_use2102(PaintAvatarInfo p) //Use: Min
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe7383d;
        Paint_path2417(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use2102(IRenderPath path)
    {
        SetPathData_path2417(path);
    }
    private void SetPathColor_use2102(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path2417(p, colorReceiver);
        colorReceiver.FillColor = 0xe7383d;
    }
    private void SetPathOpacity_use2102(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path2417(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use2104(PaintAvatarInfo p) //Use: Max
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path192(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use2104(IRenderPath path)
    {
        SetPathData_path192(path);
    }
    private void SetPathColor_use2104(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path192(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use2104(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path192(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use2106(PaintAvatarInfo p) //Use: Time
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0,-5.41221);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_path3251(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use2106(IRenderPath path)
    {
        SetPathData_path3251(path);
    }
    private void SetPathColor_use2106(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path3251(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use2106(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path3251(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: pulsing
    private void Paint_g2108(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use2102(p, MinColor);
        SetPathColor_use2104(p, MaxColor);
        SetPathColor_use2106(p, TimeColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use2102(p, MinOpacity);
        SetPathOpacity_use2104(p, MaxOpacity);
        SetPathOpacity_use2106(p, TimeOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use2102(MinPath);
        SetPathData_use2104(MaxPath);
        SetPathData_use2106(TimePath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.PulseRateBody);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g2110(PaintAvatarInfo p) //Group: zero
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart, zero))
        {
            Paint_g2108(p);// pulsing
        }
    }
    private void SetPathData_g2110(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2110(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2110(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path grey heart
    private void Paint_path14970(PaintAvatarInfo p) //Path: grey heart
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xcccccc;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path14970(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path14970(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xcccccc;
    }
    private void SetPathOpacity_path14970(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path dashed outline
    private void Paint_path14972(PaintAvatarInfo p) //Path: dashed outline
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xffffff;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path14972(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path14972(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xffffff;
    }
    private void SetPathOpacity_path14972(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_use7659(PaintAvatarInfo p) //Group: notavail, unknown
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart,unknown, notavail))
        {
            Paint_path14970(p);// grey heart
            Paint_path14972(p);// dashed outline
        }
    }
    private void SetPathData_use7659(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_use7659(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_use7659(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: heart
    private void Paint_g1873(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xff0000;
        Paint_g3239(p);// helper
        Paint_g7666(p);// low, safe, high
        Paint_g2110(p);// zero
        Paint_use7659(p);// notavail, unknown
        _patientAvatarRenderer.FillColor = colorWas;
    }
    //----------------------------------------
    private void SetPathData_g1873(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1873(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xff0000;
    }
    private void SetPathOpacity_g1873(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> Path filling of grey lightning
    private void Paint_path3652_f0(PaintAvatarInfo p) //Path: filling of grey lightning
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x595959;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path3652_f0(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path3652_f0(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x595959;
    }
    private void SetPathOpacity_path3652_f0(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path stroke of grey lightning
    private void Paint_path3652_s0(PaintAvatarInfo p) //Path: stroke of grey lightning
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path3652_s0(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path3652_s0(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path3652_s0(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: grey lightning
    private void Paint_path3652(PaintAvatarInfo p)
    {
        Paint_path3652_f0(p);// filling of grey lightning
        Paint_path3652_s0(p);// stroke of grey lightning
    }
    //----------------------------------------
    private void SetPathData_path3652(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_path3652(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path3652(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

      

    private void Paint_g15456(PaintAvatarInfo p) //Group: zero
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart, zero))
        {
            Paint_path3652(p);// grey lightning
        }
    }
    private void SetPathData_g15456(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g15456(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g15456(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path filling of ST1
    private void Paint_path3582_f1(PaintAvatarInfo p) //Path: filling of ST1
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x17030f;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path3582_f1(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path3582_f1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x17030f;
    }
    private void SetPathOpacity_path3582_f1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path stroke of ST1
    private void Paint_path3582_s1(PaintAvatarInfo p) //Path: stroke of ST1
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path3582_s1(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path3582_s1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path3582_s1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_path3582(PaintAvatarInfo p) //Group: ST1
    {
        if (IsVisible(p.TopicInfo.STSegment, inferior, multi))
        {
            Paint_path3582_f1(p);// filling of ST1
            Paint_path3582_s1(p);// stroke of ST1
        }
    }
    private void SetPathData_path3582(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_path3582(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path3582(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path filling of ST2
    private void Paint_path3626_f2(PaintAvatarInfo p) //Path: filling of ST2
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x17030f;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path3626_f2(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path3626_f2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x17030f;
    }
    private void SetPathOpacity_path3626_f2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path stroke of ST2
    private void Paint_path3626_s2(PaintAvatarInfo p) //Path: stroke of ST2
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path3626_s2(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path3626_s2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path3626_s2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_path3626(PaintAvatarInfo p) //Group: ST2
    {
        if (IsVisible(p.TopicInfo.STSegment, posterior, multi))
        {
            Paint_path3626_f2(p);// filling of ST2
            Paint_path3626_s2(p);// stroke of ST2
        }
    }
    private void SetPathData_path3626(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_path3626(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path3626(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path filling of ST3
    private void Paint_path3650_f3(PaintAvatarInfo p) //Path: filling of ST3
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x17030f;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path3650_f3(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path3650_f3(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x17030f;
    }
    private void SetPathOpacity_path3650_f3(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path stroke of ST3
    private void Paint_path3650_s3(PaintAvatarInfo p) //Path: stroke of ST3
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path3650_s3(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path3650_s3(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path3650_s3(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_path3650(PaintAvatarInfo p) //Group: ST3
    {
        if (IsVisible(p.TopicInfo.STSegment, anterior, multi))
        {
            Paint_path3650_f3(p);// filling of ST3
            Paint_path3650_s3(p);// stroke of ST3
        }
    }
    private void SetPathData_path3650(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_path3650(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path3650(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path filling of ST3_zero
    private void Paint_path195_f4(PaintAvatarInfo p) //Path: filling of ST3_zero
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(0.264583,0,0,0.264583,0,156.121);

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x4d4d4d;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path195_f4(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;

        _patientAvatarRenderer.Transformation = transformMatrixWas;

    }
    
    private void SetPathColor_path195_f4(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x4d4d4d;
    }
    private void SetPathOpacity_path195_f4(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path stroke of ST3_zero
    private void Paint_path195_s4(PaintAvatarInfo p) //Path: stroke of ST3_zero
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path195_s4(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path195_s4(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path195_s4(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_path195(PaintAvatarInfo p) //Group: ST3_zero
    {
        if (IsVisible(p.TopicInfo.STSegment, anterior, multi))
        {
            Paint_path195_f4(p);// filling of ST3_zero
            Paint_path195_s4(p);// stroke of ST3_zero
        }
    }
    private void SetPathData_path195(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_path195(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path195(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path filling of ST2_zero
    private void Paint_path198_f5(PaintAvatarInfo p) //Path: filling of ST2_zero
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(0.264583,0,0,0.264583,0,156.121);

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x4d4d4d;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path198_f5(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;

        _patientAvatarRenderer.Transformation = transformMatrixWas;

    }
    
    private void SetPathColor_path198_f5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x4d4d4d;
    }
    private void SetPathOpacity_path198_f5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path stroke of ST2_zero
    private void Paint_path198_s5(PaintAvatarInfo p) //Path: stroke of ST2_zero
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path198_s5(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path198_s5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path198_s5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_path198(PaintAvatarInfo p) //Group: ST2_zero
    {
        if (IsVisible(p.TopicInfo.STSegment, posterior, multi))
        {
            Paint_path198_f5(p);// filling of ST2_zero
            Paint_path198_s5(p);// stroke of ST2_zero
        }
    }
    private void SetPathData_path198(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_path198(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path198(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path filling of ST1_zero
    private void Paint_path201_f6(PaintAvatarInfo p) //Path: filling of ST1_zero
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(0.264583,0,0,0.264583,0,156.121);

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x4d4d4d;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path201_f6(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;

        _patientAvatarRenderer.Transformation = transformMatrixWas;

    }
    
    private void SetPathColor_path201_f6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x4d4d4d;
    }
    private void SetPathOpacity_path201_f6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path stroke of ST1_zero
    private void Paint_path201_s6(PaintAvatarInfo p) //Path: stroke of ST1_zero
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path201_s6(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path201_s6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000000;
    }
    private void SetPathOpacity_path201_s6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_path201(PaintAvatarInfo p) //Group: ST1_zero
    {
        if (IsVisible(p.TopicInfo.STSegment, inferior, multi))
        {
            Paint_path201_f6(p);// filling of ST1_zero
            Paint_path201_s6(p);// stroke of ST1_zero
        }
    }
    private void SetPathData_path201(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_path201(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path201(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_g4814(PaintAvatarInfo p) //Group: zero
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart, zero))
        {
            Paint_path195(p);// ST3_zero
            Paint_path198(p);// ST2_zero
            Paint_path201(p);// ST1_zero
        }
    }
    private void SetPathData_g4814(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g4814(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g4814(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: st
    private void Paint_g1758(PaintAvatarInfo p)
    {
        Paint_path3582(p);// ST1
        Paint_path3626(p);// ST2
        Paint_path3650(p);// ST3
        Paint_g4814(p);// zero
    }
    //----------------------------------------
    private void SetPathData_g1758(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1758(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1758(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> Path P98
    private void Paint_path26748(PaintAvatarInfo p) //Path: P98
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path26748(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path26748(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path26748(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P10
    private void Paint_path25475(PaintAvatarInfo p) //Path: P10
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path25475(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path25475(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path25475(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P09
    private void Paint_path25500(PaintAvatarInfo p) //Path: P09
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path25500(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path25500(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path25500(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P08
    private void Paint_path25502(PaintAvatarInfo p) //Path: P08
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path25502(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path25502(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path25502(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P07
    private void Paint_path25504(PaintAvatarInfo p) //Path: P07
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path25504(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path25504(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path25504(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P06
    private void Paint_path25506(PaintAvatarInfo p) //Path: P06
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path25506(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path25506(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path25506(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P05
    private void Paint_path27072(PaintAvatarInfo p) //Path: P05
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path27072(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path27072(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path27072(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P04
    private void Paint_path27852(PaintAvatarInfo p) //Path: P04
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path27852(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path27852(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path27852(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P03
    private void Paint_path28596(PaintAvatarInfo p) //Path: P03
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path28596(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path28596(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path28596(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P02
    private void Paint_path30398(PaintAvatarInfo p) //Path: P02
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path30398(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path30398(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path30398(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P01
    private void Paint_path32072(PaintAvatarInfo p) //Path: P01
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xfcce38;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path32072(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path32072(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xfcce38;
    }
    private void SetPathOpacity_path32072(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path P99
    private void Paint_path33110(PaintAvatarInfo p) //Path: P99
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path33110(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path33110(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path33110(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use2160(PaintAvatarInfo p) //Use: Time
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(8.31868,0,0,8.31868,-1023.53,-2386.28);
        Paint_path46598(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2160(IRenderPath path)
    {
        SetPathData_path46598(path);
    }
    private void SetPathColor_use2160(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path46598(p, colorReceiver);
    }
    private void SetPathOpacity_use2160(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path46598(p, opacityReceiver);
     }
    //----------------------------------------
 
    private void Paint_g25478(PaintAvatarInfo p)
    {
        // Transformation was = p.trans;
        // p.SetTransformation({0.120211,0,0,0.120211,75.112,210.67});
        // PathIF P[12];
        // PathIF Time;
        //         // SetPathData_path32072(P[0]); // P01
        // SetPathData_path30398(P[1]); // P02
        // SetPathData_path28596(P[2]); // P03
        // SetPathData_path27852(P[3]); // P04
        // SetPathData_path27072(P[4]); // P05
        // SetPathData_path25506(P[5]); // P06
        // SetPathData_path25504(P[6]); // P07
        // SetPathData_path25502(P[7]); // P08
        // SetPathData_path25500(P[8]); // P09
        // SetPathData_path25475(P[9]); // P10
        // SetPathData_path26748(P[10]); // P98
        // SetPathData_path33110(P[11]); // P99
        // SetPathData_use2160(Time);
        // p.PaintInterpolated(P,12,Time,PulseRateHeart);//, jumpsback);    
        // p.trans = was; 
     }
     //----------------------------------------

      
      

    private void Paint_g12081(PaintAvatarInfo p) //Group: low, safe, high
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart, low, safe, high))
        {
            Paint_g25478(p);// Lightning
        }
    }
    private void SetPathData_g12081(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g12081(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g12081(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: lightning, st
    private void Paint_g1745(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g15456(p);// zero
        Paint_g1758(p);// st
        Paint_g12081(p);// low, safe, high
        _patientAvatarRenderer.FillColor = colorWas;
    }
    //----------------------------------------
    private void SetPathData_g1745(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1745(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_g1745(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    //skill: default -> Group: heart
    private void Paint_g1753(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0,5.41221);
        Paint_g1873(p);// heart
        Paint_g1745(p);// lightning, st
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g1753(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1753(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1753(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    //skill: default -> Group: thorax
    private void Paint_g1974(PaintAvatarInfo p)
    {
        Paint_use27909(p);// 
        Paint_g1772(p);// lung
        Paint_g1777(p);// cvp
        Paint_g1761(p);// co
        Paint_g1753(p);// heart
    }
    //----------------------------------------
    private void SetPathData_g1974(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1974(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1974(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> Path 
    private void Paint_path174(PaintAvatarInfo p) //Path: 
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path174(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path174(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path174(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path171(PaintAvatarInfo p) //Path: 
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path171(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path171(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path171(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path168(PaintAvatarInfo p) //Path: 
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path168(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path168(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path168(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path165(PaintAvatarInfo p) //Path: 
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path165(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path165(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path165(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path61670(PaintAvatarInfo p) //Path: 
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path61670(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path61670(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path61670(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    private void Paint_g26134(PaintAvatarInfo p) // always hidden: 'Helper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use32817(PaintAvatarInfo p)
    {
float opacityWas = _patientAvatarRenderer.Opacity;
_patientAvatarRenderer.Opacity = 0.6f;

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.AWP);
        Paint_path171(p);
        _patientAvatarRenderer.FillColor = colorWas;
_patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathColor_use32817(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.AWP);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use32823(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.FiO2);
        Paint_path174(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use32823(IRenderPath path)
    {
        SetPathData_path174(path);
    }

    private void SetPathColor_use32823(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.FiO2);
    }
    private void SetPathOpacity_use32823(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path174(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use6871_5(PaintAvatarInfo p) //Use: Time
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.8f;
        Paint_path52326(p);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use6871_5(IRenderPath path)
    {
        SetPathData_path52326(path);
    }
    private void SetPathColor_use6871_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path52326(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use6871_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path52326(p, opacityReceiver);
        opacityReceiver.Opacity = 0.8f;
     }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use32867(PaintAvatarInfo p) //Use: Max
    {
        Paint_path171(p);
    }
    private void SetPathData_use32867(IRenderPath path)
    {
        SetPathData_path171(path);
    }
    private void SetPathColor_use32867(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path171(p, colorReceiver);
    }
    private void SetPathOpacity_use32867(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path171(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: Pulsing
    private void Paint_g32865(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use32823(p, MinColor);
        SetPathColor_use6871_5(p, TimeColor);
        SetPathColor_use32867(p, MaxColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use32823(p, MinOpacity);
        SetPathOpacity_use6871_5(p, TimeOpacity);
        SetPathOpacity_use32867(p, MaxOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use32823(MinPath);
        SetPathData_use6871_5(TimePath);
        SetPathData_use32867(MaxPath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.RespRate);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g32821(PaintAvatarInfo p) //Group: Safe
    {
        if (IsVisible(p.TopicInfo.AWP, safe))
        {
            Paint_use32817(p);// Shadow
            Paint_g32865(p);// Pulsing
        }
    }
    private void SetPathData_g32821(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g32821(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g32821(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use54356(PaintAvatarInfo p)
    {
float opacityWas = _patientAvatarRenderer.Opacity;
_patientAvatarRenderer.Opacity = 0.6f;

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.AWP);
        Paint_path168(p);
        _patientAvatarRenderer.FillColor = colorWas;
_patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathColor_use54356(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.AWP);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use54358(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.FiO2);
        Paint_path171(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use54358(IRenderPath path)
    {
        SetPathData_path171(path);
    }

    private void SetPathColor_use54358(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.FiO2);
    }
    private void SetPathOpacity_use54358(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path171(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use54360(PaintAvatarInfo p) //Use: Time
    {
        Paint_path52326(p);
    }
    private void SetPathData_use54360(IRenderPath path)
    {
        SetPathData_path52326(path);
    }
    private void SetPathColor_use54360(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path52326(p, colorReceiver);
    }
    private void SetPathOpacity_use54360(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path52326(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use54362(PaintAvatarInfo p) //Use: Max
    {
        Paint_path168(p);
    }
    private void SetPathData_use54362(IRenderPath path)
    {
        SetPathData_path168(path);
    }
    private void SetPathColor_use54362(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path168(p, colorReceiver);
    }
    private void SetPathOpacity_use54362(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path168(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: Pulsing
    private void Paint_g54364(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use54358(p, MinColor);
        SetPathColor_use54360(p, TimeColor);
        SetPathColor_use54362(p, MaxColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use54358(p, MinOpacity);
        SetPathOpacity_use54360(p, TimeOpacity);
        SetPathOpacity_use54362(p, MaxOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use54358(MinPath);
        SetPathData_use54360(TimePath);
        SetPathData_use54362(MaxPath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.RespRate);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g54366(PaintAvatarInfo p) //Group: High
    {
        if (IsVisible(p.TopicInfo.AWP, high))
        {
            Paint_use54356(p);// Shadow
            Paint_g54364(p);// Pulsing
        }
    }
    private void SetPathData_g54366(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g54366(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g54366(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //Use (for ShadowColorFrom)
    private void Paint_use62128(PaintAvatarInfo p)
    {
float opacityWas = _patientAvatarRenderer.Opacity;
_patientAvatarRenderer.Opacity = 0.6f;

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetShadowColorFrom(p.TopicInfo.AWP);
        Paint_path174(p);
        _patientAvatarRenderer.FillColor = colorWas;
_patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathColor_use62128(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetShadowColorFrom(p.TopicInfo.AWP);
    }
    //----------------------------------------

      
    //Use (for ColorFrom)
    private void Paint_use62130(PaintAvatarInfo p)
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = GetColorFrom(p.TopicInfo.FiO2);
        Paint_path61670(p);
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use62130(IRenderPath path)
    {
        SetPathData_path61670(path);
    }

    private void SetPathColor_use62130(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = GetColorFrom(p.TopicInfo.FiO2);
    }
    private void SetPathOpacity_use62130(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path61670(p, opacityReceiver);
    }
    //----------------------------------------

    // Skill: default -> use Time
    private void Paint_use62132(PaintAvatarInfo p) //Use: Time
    {
        float opacityWas = _patientAvatarRenderer.Opacity;
        _patientAvatarRenderer.Opacity = 0.8f;
        Paint_path52326(p);
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    private void SetPathData_use62132(IRenderPath path)
    {
        SetPathData_path52326(path);
    }
    private void SetPathColor_use62132(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path52326(p, colorReceiver);
    }
    private void SetPathOpacity_use62132(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path52326(p, opacityReceiver);
        opacityReceiver.Opacity = 0.8f;
     }
    //----------------------------------------

    // Skill: default -> use Max
    private void Paint_use62134(PaintAvatarInfo p) //Use: Max
    {
        Paint_path174(p);
    }
    private void SetPathData_use62134(IRenderPath path)
    {
        SetPathData_path174(path);
    }
    private void SetPathColor_use62134(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path174(p, colorReceiver);
    }
    private void SetPathOpacity_use62134(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path174(p, opacityReceiver);
     }
    //----------------------------------------

    //Group: Pulsing
    private void Paint_g62136(PaintAvatarInfo p)
    {
        int colorWas = _patientAvatarRenderer.FillColor;
        ColorReceiver MinColor = new ColorReceiver(colorWas);
        ColorReceiver MaxColor = new ColorReceiver(colorWas);
        ColorReceiver TimeColor = new ColorReceiver(colorWas);
        SetPathColor_use62130(p, MinColor);
        SetPathColor_use62132(p, TimeColor);
        SetPathColor_use62134(p, MaxColor);
        _patientAvatarRenderer.FillColor = MinColor.FillColor;
        float opacityWas = _patientAvatarRenderer.Opacity;
        OpacityReceiver MinOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver MaxOpacity = new OpacityReceiver(opacityWas);
        OpacityReceiver TimeOpacity = new OpacityReceiver(opacityWas);
        SetPathOpacity_use62130(p, MinOpacity);
        SetPathOpacity_use62132(p, TimeOpacity);
        SetPathOpacity_use62134(p, MaxOpacity);
        _patientAvatarRenderer.Opacity = MinOpacity.Opacity;
        IRenderPath MinPath = new TemporaryRenderPath();
        IRenderPath MaxPath = new TemporaryRenderPath();
        IRenderPath TimePath = new TemporaryRenderPath();
        SetPathData_use62130(MinPath);
        SetPathData_use62132(TimePath);
        SetPathData_use62134(MaxPath);
        _patientAvatarRenderer.Interpolate(p, MinPath, MaxPath, TimePath, p.TopicInfo.RespRate);
        _patientAvatarRenderer.FillColor = colorWas;
        _patientAvatarRenderer.Opacity = opacityWas;
    }
    //----------------------------------------

      

    private void Paint_g62138(PaintAvatarInfo p) //Group: Low
    {
        if (IsVisible(p.TopicInfo.AWP, low))
        {
            Paint_use62128(p);// Shadow
            Paint_g62136(p);// Pulsing
        }
    }
    private void SetPathData_g62138(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g62138(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g62138(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path line
    private void Paint_use27516(PaintAvatarInfo p) //Path: line
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_use27516(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_use27516(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use27516(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_g1764(PaintAvatarInfo p) //Group: airway
    {
        if (IsVisible(p.TopicInfo.AWP, low, safe, high))
        {
            float opacityWas = _patientAvatarRenderer.Opacity;
            _patientAvatarRenderer.Opacity = 0.8f;
            Paint_g26134(p);// Helper
            Paint_g32821(p);// Safe
            Paint_g54366(p);// High
            Paint_g62138(p);// Low
            Paint_use27516(p);// line
            _patientAvatarRenderer.Opacity = opacityWas;
        }
    }
    private void SetPathData_g1764(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1764(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1764(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
            opacityReceiver.Opacity = 0.8f;
    }
    //----------------------------------------

    private void Paint_g30932(PaintAvatarInfo p) // always hidden: 'AwpHelper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path322(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x73c2ed;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path322(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path322(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x73c2ed;
    }
    private void SetPathOpacity_path322(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

      

    private void Paint_g1727(PaintAvatarInfo p) //Group: cold
    {
        if (IsVisible(p.TopicInfo.Temp,low))
        {
            int colorWas = _patientAvatarRenderer.FillColor;
            _patientAvatarRenderer.FillColor = 0x00ffff;
            Paint_path322(p);// 
            _patientAvatarRenderer.FillColor = colorWas;
        }
    }
    private void SetPathData_g1727(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1727(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
            colorReceiver.FillColor = 0x00ffff;
    }
    private void SetPathOpacity_g1727(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path 
    private void Paint_path243(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xff5333;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path243(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path243(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xff5333;
    }
    private void SetPathOpacity_path243(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1722(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,3.12208,0);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xff5333;
        Paint_path243(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use1722(IRenderPath path)
    {
        SetPathData_path243(path);
    }
    private void SetPathColor_use1722(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path243(p, colorReceiver);
        colorReceiver.FillColor = 0xff5333;
    }
    private void SetPathOpacity_use1722(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path243(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1724(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,6.23887,0);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xff5333;
        Paint_path243(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use1724(IRenderPath path)
    {
        SetPathData_path243(path);
    }
    private void SetPathColor_use1724(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_path243(p, colorReceiver);
        colorReceiver.FillColor = 0xff5333;
    }
    private void SetPathOpacity_use1724(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_path243(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1720(PaintAvatarInfo p) //Group: hot
    {
        if (IsVisible(p.TopicInfo.Temp,high))
        {
            int colorWas = _patientAvatarRenderer.FillColor;
            _patientAvatarRenderer.FillColor = 0xff5333;
            Paint_path243(p);// 
            Paint_use1722(p);// 
            Paint_use1724(p);// 
            _patientAvatarRenderer.FillColor = colorWas;
        }
    }
    private void SetPathData_g1720(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1720(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
            colorReceiver.FillColor = 0xff5333;
    }
    private void SetPathOpacity_g1720(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: temp
    private void Paint_g6083(PaintAvatarInfo p)
    {
        Paint_g1727(p);// cold
        Paint_g1720(p);// hot
    }
    //----------------------------------------
    private void SetPathData_g6083(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g6083(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g6083(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    private void Paint_g6075(PaintAvatarInfo p) // always hidden: 'tempHelper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> Path Breathing
    private void Paint_path1166(PaintAvatarInfo p) //Path: Breathing
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path1166(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path1166(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path1166(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path BodyPulse
    private void Paint_path4914(PaintAvatarInfo p) //Path: BodyPulse
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path4914(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path4914(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path4914(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path LightningPulse
    private void Paint_path46598(PaintAvatarInfo p) //Path: LightningPulse
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path46598(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path46598(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path46598(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path HeartPulse
    private void Paint_path3251(PaintAvatarInfo p) //Path: HeartPulse
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path3251(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path3251(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path3251(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path Co2
    private void Paint_path2449(PaintAvatarInfo p) //Path: Co2
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path2449(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_path2449(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_path2449(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path Airway
    private void Paint_path52326(PaintAvatarInfo p) //Path: Airway
    {


        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_path52326(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);


    }
    
    private void SetPathColor_path52326(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_path52326(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    private void Paint_g5603(PaintAvatarInfo p) // always hidden: 'Timings'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    private void Paint_use8991(PaintAvatarInfo p) //Use: relaxed
    {
        if (IsVisible(p.TopicInfo.Neuromuscular,low))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(0.991546,-0.129757,0.129757,0.991546,-20.8825,10.0976);
            Paint_g1782(p);
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    //----------------------------------------

    private void Paint_use10884(PaintAvatarInfo p) //Use: normal
    {
        if (IsVisible(p.TopicInfo.Neuromuscular,notavail, unknown,safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(0.985988,-0.166814,0.166814,0.985988,-31.0892,15.6087);
            Paint_g1782(p);
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    //----------------------------------------

    //skill: default -> Group: co2
    private void Paint_g10882(PaintAvatarInfo p)
    {
        Paint_use8991(p);// relaxed
        Paint_use10884(p);// normal
    }
    //----------------------------------------
    private void SetPathData_g10882(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g10882(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g10882(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    //skill: default -> Group: all
    private void Paint_g1952(PaintAvatarInfo p)
    {
        Paint_g1838(p);// relaxed
        Paint_g1855(p);// thumbsup
        Paint_g1858(p);// nothumps
        Paint_g3033_3(p);// FaceHelper
        Paint_g8989(p);// co2Helper
        Paint_g1974(p);// thorax
        Paint_g30932(p);// AwpHelper
        Paint_g6075(p);// tempHelper
        Paint_g5603(p);// Timings
        Paint_g10882(p);// co2
    }
    //----------------------------------------
    private void SetPathData_g1952(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1952(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1952(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    private void Paint_g2086(PaintAvatarInfo p) // always hidden: 'helper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> use main
    private void Paint_use2088(PaintAvatarInfo p) //Use: main
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(0.95,0.95,-0.95,0.95,211.735,-59.7288);
        Paint_g1952(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2088(IRenderPath path)
    {
        SetPathData_g1952(path);
    }
    private void SetPathColor_use2088(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g1952(p, colorReceiver);
    }
    private void SetPathOpacity_use2088(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g1952(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use6358(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,-34.8364,-68.5652);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use6358(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use6358(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use6358(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use6378(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,-36.1639,-38.7685);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use6378(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use6378(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use6378(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use6386(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,14.1303,8.88841);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use6386(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use6386(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use6386(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use6388(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,52.8176,-33.4832);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use6388(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use6388(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use6388(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: 
    private void Paint_g6376(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-11.7087,15.7701);
        Paint_use6358(p);// 
        Paint_use6378(p);// 
        Paint_use6386(p);// 
        Paint_use6388(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g6376(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g6376(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g6376(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

      

    private void Paint_g6284(PaintAvatarInfo p) //Group: rot45
    {
        if (IsVisible(p.TopicInfo.Orientation, up))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,-0.176651,-2.10053);
            Paint_use2088(p);// main
            Paint_g6376(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g6284(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g6284(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g6284(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use main
    private void Paint_use2092(PaintAvatarInfo p) //Use: main
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(-0.95,0.95,-0.95,-0.95,375.735,363.733);
        Paint_g1952(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2092(IRenderPath path)
    {
        SetPathData_g1952(path);
    }
    private void SetPathColor_use2092(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g1952(p, colorReceiver);
    }
    private void SetPathOpacity_use2092(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g1952(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use6390(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,8.5681,-67.2847);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use6390(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use6390(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use6390(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use6392(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,-30.7477,-5.50834);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use6392(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use6392(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use6392(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use6394(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,17.7642,39.1292);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use6394(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use6394(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use6394(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use6396(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,46.2387,-54.9658);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use6396(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use6396(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use6396(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: 
    private void Paint_g6398(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-8.55262,-8.55263);
        Paint_use6390(p);// 
        Paint_use6392(p);// 
        Paint_use6394(p);// 
        Paint_use6396(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g6398(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g6398(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g6398(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

      

    private void Paint_g6287(PaintAvatarInfo p) //Group: rot135
    {
        if (IsVisible(p.TopicInfo.Orientation, down))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,-10.4235,3.74177);
            Paint_use2092(p);// main
            Paint_g6398(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g6287(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g6287(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g6287(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use main
    private void Paint_use7584(PaintAvatarInfo p) //Use: main
    {
        Paint_g1952(p);
    }
    private void SetPathData_use7584(IRenderPath path)
    {
        SetPathData_g1952(path);
    }
    private void SetPathColor_use7584(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g1952(p, colorReceiver);
    }
    private void SetPathOpacity_use7584(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g1952(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use7586(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,-29.8455,-29.9236);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use7586(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use7586(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use7586(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use7588(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,-15.4916,-5.57534);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use7588(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use7588(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use7588(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use7590(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,43.631,-13.8669);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use7590(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use7590(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use7590(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use7592(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1.414,0,0,1.414,41.35,-61.6629);
        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0xe;
        Paint_g6083(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
        _patientAvatarRenderer.FillColor = colorWas;
    }
    private void SetPathData_use7592(IRenderPath path)
    {
        SetPathData_g6083(path);
    }
    private void SetPathColor_use7592(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_g6083(p, colorReceiver);
        colorReceiver.FillColor = 0xe;
    }
    private void SetPathOpacity_use7592(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_g6083(p, opacityReceiver);
     }
    //----------------------------------------

    //skill: default -> Group: 
    private void Paint_g7594(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-11.7087,15.7701);
        Paint_use7586(p);// 
        Paint_use7588(p);// 
        Paint_use7590(p);// 
        Paint_use7592(p);// 
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g7594(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g7594(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7594(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

      

    private void Paint_g7596(PaintAvatarInfo p) //Group: rot0
    {
        if (IsVisible(p.TopicInfo.Orientation, perpendicular))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,-0.176651,-2.10053);
            Paint_use7584(p);// main
            Paint_g7594(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g7596(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g7596(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g7596(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path upperLeft
    private void Paint_upperLeft(PaintAvatarInfo p) //Path: upperLeft
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000100;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_upperLeft(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_upperLeft(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000100;
    }
    private void SetPathOpacity_upperLeft(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> Path lowerRight
    private void Paint_rect45026(PaintAvatarInfo p) //Path: lowerRight
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x000100;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_rect45026(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_rect45026(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x000100;
    }
    private void SetPathOpacity_rect45026(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: Marker
    private void Paint_Marker(PaintAvatarInfo p)
    {
        Paint_upperLeft(p);// upperLeft
        Paint_rect45026(p);// lowerRight
    }
    //----------------------------------------
    private void SetPathData_Marker(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_Marker(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_Marker(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> Path 
    private void Paint_rect1546(PaintAvatarInfo p) //Path: 
    {

        int colorWas = _patientAvatarRenderer.FillColor;
        _patientAvatarRenderer.FillColor = 0x010000;

        var tempRenderPath = new TemporaryRenderPath();
        SetPathData_rect1546(tempRenderPath);
        _patientAvatarRenderer.Fill(p,tempRenderPath);
        _patientAvatarRenderer.FillColor = colorWas;


    }
    
    private void SetPathColor_rect1546(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        colorReceiver.FillColor = 0x010000;
    }
    private void SetPathOpacity_rect1546(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    private void Paint_g791(PaintAvatarInfo p) // always hidden: 'helper'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1639(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,3.96875,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1639(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1639(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1639(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1641(PaintAvatarInfo p) //Group: 6 multiple
    {
        if (IsVisible(p.TopicInfo.STSegment, multi))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,3.96875,0);
            Paint_use1639(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1641(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1641(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1641(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1617(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1617(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1617(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1617(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1619(PaintAvatarInfo p) //Group: 5 posterior
    {
        if (IsVisible(p.TopicInfo.STSegment, posterior))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,3.96875,0);
            Paint_use1617(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1619(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1619(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1619(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1621(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1621(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1621(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1621(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1623(PaintAvatarInfo p) //Group: 4 inferior
    {
        if (IsVisible(p.TopicInfo.STSegment, inferior))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use1621(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1623(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1623(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1623(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1625(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1625(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1625(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1625(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1627(PaintAvatarInfo p) //Group: 3 anterior
    {
        if (IsVisible(p.TopicInfo.STSegment, anterior))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32291,0);
            Paint_use1625(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1627(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1627(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1627(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1629(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1629(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1629(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1629(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1631(PaintAvatarInfo p) //Group: 2 safe
    {
        if (IsVisible(p.TopicInfo.STSegment, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use1629(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1631(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1631(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1631(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3252(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3252(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3252(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3252(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3254(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.STSegment, unknown))
        {
            Paint_use3252(p);// 
        }
    }
    private void SetPathData_g3254(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3254(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3254(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1633(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1633(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1633(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1633(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1635(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.STSegment, notavail))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,-1.32292,0);
            Paint_use1633(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1635(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1635(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1635(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 15 st
    private void Paint_g1637(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-120.488,1.24411);
        Paint_g1641(p);// 6 multiple
        Paint_g1619(p);// 5 posterior
        Paint_g1623(p);// 4 inferior
        Paint_g1627(p);// 3 anterior
        Paint_g1631(p);// 2 safe
        Paint_g3254(p);// 1 unknown
        Paint_g1635(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g1637(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1637(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1637(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3891_8(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3891_8(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3891_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3891_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3893_8(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.CO, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use3891_8(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3893_8(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3893_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3893_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3895_8(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3895_8(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3895_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3895_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3897_1(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.CO, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use3895_8(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3897_1(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3897_1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3897_1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3899_1(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3899_1(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3899_1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3899_1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3901_0(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.CO, low))
        {
            Paint_use3899_1(p);// 
        }
    }
    private void SetPathData_g3901_0(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3901_0(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3901_0(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3903_8(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3903_8(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3903_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3903_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3905_5(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.CO, unknown))
        {
            Paint_use3903_8(p);// 
        }
    }
    private void SetPathData_g3905_5(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3905_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3905_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3907_0(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3907_0(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3907_0(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3907_0(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3909_9(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.CO, notavail))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,-1.32292,0);
            Paint_use3907_0(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3909_9(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3909_9(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3909_9(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 14 cardiacOutput
    private void Paint_g3911_8(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-120.488,-0.0788113);
        Paint_g3893_8(p);// 4 high
        Paint_g3897_1(p);// 3 safe
        Paint_g3901_0(p);// 2 low
        Paint_g3905_5(p);// 1 unknown
        Paint_g3909_9(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3911_8(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3911_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3911_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3846_1(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3846_1(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3846_1(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3846_1(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3848_9(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.FiO2, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use3846_1(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3848_9(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3848_9(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3848_9(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3851_8(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3851_8(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3851_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3851_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3853_4(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.FiO2, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use3851_8(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3853_4(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3853_4(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3853_4(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3855_6(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3855_6(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3855_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3855_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3857_2(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.FiO2, low))
        {
            Paint_use3855_6(p);// 
        }
    }
    private void SetPathData_g3857_2(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3857_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3857_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3859_8(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3859_8(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3859_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3859_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3861_0(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.FiO2, unknown))
        {
            Paint_use3859_8(p);// 
        }
    }
    private void SetPathData_g3861_0(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3861_0(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3861_0(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use3863_7(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use3863_7(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3863_7(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3863_7(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3865_6(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.FiO2, notavail))
        {
            Paint_use3863_7(p);// use793
        }
    }
    private void SetPathData_g3865_6(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3865_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3865_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 13 fiO2
    private void Paint_g3867_8(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-113.873,-1.40173);
        Paint_g3848_9(p);// 4 high
        Paint_g3853_4(p);// 3 safe
        Paint_g3857_2(p);// 2 low
        Paint_g3861_0(p);// 1 unknown
        Paint_g3865_6(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3867_8(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3867_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3867_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3869_0(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3869_0(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3869_0(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3869_0(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3871_5(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.AWP, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use3869_0(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3871_5(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3871_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3871_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3873_2(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3873_2(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3873_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3873_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3875_5(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.AWP, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use3873_2(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3875_5(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3875_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3875_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3877_4(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3877_4(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3877_4(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3877_4(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3879_5(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.AWP, low))
        {
            Paint_use3877_4(p);// 
        }
    }
    private void SetPathData_g3879_5(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3879_5(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3879_5(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3881_2(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3881_2(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3881_2(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3881_2(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3883_6(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.AWP, unknown))
        {
            Paint_use3881_2(p);// 
        }
    }
    private void SetPathData_g3883_6(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3883_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3883_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use3885_7(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use3885_7(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3885_7(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3885_7(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3887_6(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.AWP, notavail))
        {
            Paint_use3885_7(p);// use793
        }
    }
    private void SetPathData_g3887_6(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3887_6(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3887_6(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 12 airwayPressure
    private void Paint_g3889_8(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-120.488,-1.40173);
        Paint_g3871_5(p);// 4 high
        Paint_g3875_5(p);// 3 safe
        Paint_g3879_5(p);// 2 low
        Paint_g3883_6(p);// 1 unknown
        Paint_g3887_6(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3889_8(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3889_8(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3889_8(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3891(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3891(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3891(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3891(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3893(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.TidalVolume, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use3891(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3893(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3893(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3893(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3895(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3895(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3895(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3895(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3897(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.TidalVolume, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use3895(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3897(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3897(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3897(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3899(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3899(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3899(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3899(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3901(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.TidalVolume, low))
        {
            Paint_use3899(p);// 
        }
    }
    private void SetPathData_g3901(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3901(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3901(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3903(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3903(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3903(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3903(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3905(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.TidalVolume, unknown))
        {
            Paint_use3903(p);// 
        }
    }
    private void SetPathData_g3905(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3905(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3905(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3907(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3907(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3907(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3907(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3909(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.TidalVolume, notavail))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,-1.32292,0);
            Paint_use3907(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3909(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3909(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3909(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 11 tidalVolume
    private void Paint_g3911(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-113.873,-2.72465);
        Paint_g3893(p);// 4 high
        Paint_g3897(p);// 3 safe
        Paint_g3901(p);// 2 low
        Paint_g3905(p);// 1 unknown
        Paint_g3909(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3911(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3911(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3911(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3846(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3846(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3846(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3846(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3848(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.Neuromuscular, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use3846(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3848(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3848(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3848(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3851(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3851(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3851(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3851(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3853(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.Neuromuscular, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use3851(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3853(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3853(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3853(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3855(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3855(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3855(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3855(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3857(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.Neuromuscular, low))
        {
            Paint_use3855(p);// 
        }
    }
    private void SetPathData_g3857(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3857(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3857(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3859(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3859(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3859(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3859(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3861(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.Neuromuscular, unknown))
        {
            Paint_use3859(p);// 
        }
    }
    private void SetPathData_g3861(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3861(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3861(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use3863(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use3863(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3863(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3863(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3865(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.Neuromuscular, notavail))
        {
            Paint_use3863(p);// use793
        }
    }
    private void SetPathData_g3865(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3865(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3865(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 10 relaxation
    private void Paint_g3867(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-120.488,-2.72465);
        Paint_g3848(p);// 4 high
        Paint_g3853(p);// 3 safe
        Paint_g3857(p);// 2 low
        Paint_g3861(p);// 1 unknown
        Paint_g3865(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3867(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3867(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3867(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3869(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3869(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3869(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3869(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3871(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.Brain, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use3869(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3871(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3871(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3871(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3873(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3873(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3873(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3873(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3875(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.Brain, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use3873(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3875(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3875(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3875(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3877(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3877(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3877(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3877(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3879(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.Brain, low))
        {
            Paint_use3877(p);// 
        }
    }
    private void SetPathData_g3879(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3879(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3879(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3881(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3881(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3881(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3881(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3883(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.Brain, unknown))
        {
            Paint_use3881(p);// 
        }
    }
    private void SetPathData_g3883(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3883(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3883(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use3885(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use3885(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3885(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3885(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3887(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.Brain, notavail))
        {
            Paint_use3885(p);// use793
        }
    }
    private void SetPathData_g3887(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3887(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3887(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 9 brainActivity
    private void Paint_g3889(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-113.873,-4.04758);
        Paint_g3871(p);// 4 high
        Paint_g3875(p);// 3 safe
        Paint_g3879(p);// 2 low
        Paint_g3883(p);// 1 unknown
        Paint_g3887(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3889(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3889(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3889(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3913(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3913(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3913(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3913(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3915(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.Temp, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use3913(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3915(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3915(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3915(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3917(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3917(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3917(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3917(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3919(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.Temp, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use3917(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3919(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3919(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3919(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3921(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3921(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3921(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3921(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3923(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.Temp, low))
        {
            Paint_use3921(p);// 
        }
    }
    private void SetPathData_g3923(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3923(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3923(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3925(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3925(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3925(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3925(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3927(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.Temp, unknown))
        {
            Paint_use3925(p);// 
        }
    }
    private void SetPathData_g3927(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3927(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3927(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use3929(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use3929(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3929(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3929(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3931(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.Temp, notavail))
        {
            Paint_use3929(p);// use793
        }
    }
    private void SetPathData_g3931(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3931(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3931(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 8 bodyTemperature
    private void Paint_g3933(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-120.488,-4.04758);
        Paint_g3915(p);// 4 high
        Paint_g3919(p);// 3 safe
        Paint_g3923(p);// 2 low
        Paint_g3927(p);// 1 unknown
        Paint_g3931(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3933(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3933(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3933(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use1526(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1526(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1526(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1526(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1528(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.CO2, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use1526(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1528(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1528(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1528(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1530(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1530(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1530(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1530(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1532(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.CO2, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use1530(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1532(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1532(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1532(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1534(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1534(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1534(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1534(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1536(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.CO2, low))
        {
            Paint_use1534(p);// 
        }
    }
    private void SetPathData_g1536(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1536(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1536(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1538(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1538(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1538(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1538(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1540(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.CO2, unknown))
        {
            Paint_use1538(p);// 
        }
    }
    private void SetPathData_g1540(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1540(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1540(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use1542(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use1542(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1542(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1542(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1544(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.CO2, notavail))
        {
            Paint_use1542(p);// use793
        }
    }
    private void SetPathData_g1544(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1544(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1544(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 7 etCO2
    private void Paint_g1546(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-113.873,-5.3705);
        Paint_g1528(p);// 4 high
        Paint_g1532(p);// 3 safe
        Paint_g1536(p);// 2 low
        Paint_g1540(p);// 1 unknown
        Paint_g1544(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g1546(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1546(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1546(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use2377(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2377(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use2377(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use2377(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g2379(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.RespRate, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use2377(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g2379(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2379(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2379(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use2381(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2381(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use2381(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use2381(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g2383(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.RespRate, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use2381(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g2383(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2383(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2383(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use2385(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2385(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use2385(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use2385(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g2387(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.RespRate, low))
        {
            Paint_use2385(p);// 
        }
    }
    private void SetPathData_g2387(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2387(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2387(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use2389(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2389(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use2389(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use2389(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g2391(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.RespRate, unknown))
        {
            Paint_use2389(p);// 
        }
    }
    private void SetPathData_g2391(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2391(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2391(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use2393(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use2393(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use2393(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use2393(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g2395(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.RespRate, notavail))
        {
            Paint_use2393(p);// use793
        }
    }
    private void SetPathData_g2395(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2395(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2395(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 6 respirationRate
    private void Paint_g2397(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-120.488,-5.3705);
        Paint_g2379(p);// 4 high
        Paint_g2383(p);// 3 safe
        Paint_g2387(p);// 2 low
        Paint_g2391(p);// 1 unknown
        Paint_g2395(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g2397(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g2397(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2397(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use2329(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2329(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use2329(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use2329(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g2331(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.CVP, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use2329(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g2331(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2331(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2331(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use2333(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2333(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use2333(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use2333(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g2335(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.CVP, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use2333(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g2335(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2335(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2335(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use2337(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2337(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use2337(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use2337(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g2339(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.CVP, low))
        {
            Paint_use2337(p);// 
        }
    }
    private void SetPathData_g2339(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2339(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2339(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use2341(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2341(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use2341(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use2341(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g2343(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.CVP, unknown))
        {
            Paint_use2341(p);// 
        }
    }
    private void SetPathData_g2343(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2343(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2343(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use2373(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use2373(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use2373(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use2373(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g2375(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.CVP, notavail))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,-1.32292,0);
            Paint_use2373(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g2375(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g2375(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2375(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 5 cvp
    private void Paint_g2349(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-113.873,-6.69342);
        Paint_g2331(p);// 4 high
        Paint_g2335(p);// 3 safe
        Paint_g2339(p);// 2 low
        Paint_g2343(p);// 1 unknown
        Paint_g2375(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g2349(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g2349(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g2349(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use1518(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1518(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1518(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1518(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1520(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.Oxygen, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use1518(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1520(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1520(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1520(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use1514(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use1514(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use1514(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use1514(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1516(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.Oxygen, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use1514(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g1516(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1516(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1516(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use797(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use797(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use797(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use797(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1947(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.Oxygen, low))
        {
            Paint_use797(p);// 
        }
    }
    private void SetPathData_g1947(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1947(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1947(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use795(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use795(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use795(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use795(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1944(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.Oxygen, unknown))
        {
            Paint_use795(p);// 
        }
    }
    private void SetPathData_g1944(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1944(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1944(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use793(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use793(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use793(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use793(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g1941(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.Oxygen, notavail))
        {
            Paint_use793(p);// use793
        }
    }
    private void SetPathData_g1941(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g1941(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1941(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 4 spo2
    private void Paint_g823(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-120.488,-6.69342);
        Paint_g1520(p);// 4 high
        Paint_g1516(p);// 3 safe
        Paint_g1947(p);// 2 low
        Paint_g1944(p);// 1 unknown
        Paint_g1941(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g823(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g823(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g823(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3001(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3001(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3001(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3001(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3003(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.ABP, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use3001(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3003(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3003(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3003(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3005(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3005(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3005(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3005(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3007(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.ABP, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use3005(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3007(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3007(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3007(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3009(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3009(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3009(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3009(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3011(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.ABP, low))
        {
            Paint_use3009(p);// 
        }
    }
    private void SetPathData_g3011(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3011(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3011(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3013(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3013(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3013(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3013(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3015(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.ABP, unknown))
        {
            Paint_use3013(p);// 
        }
    }
    private void SetPathData_g3015(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3015(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3015(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use3018(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use3018(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3018(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3018(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3020(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.ABP, notavail))
        {
            Paint_use3018(p);// use793
        }
    }
    private void SetPathData_g3020(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3020(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3020(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 3 arterialPressure
    private void Paint_g3022(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-113.873,-8.01634);
        Paint_g3003(p);// 4 high
        Paint_g3007(p);// 3 safe
        Paint_g3011(p);// 2 low
        Paint_g3015(p);// 1 unknown
        Paint_g3020(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3022(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3022(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3022(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3024(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3024(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3024(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3024(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3026(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.PulseRateBody, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use3024(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3026(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3026(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3026(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3028(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3028(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3028(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3028(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3030(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.PulseRateBody, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use3028(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3030(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3030(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3030(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3032(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3032(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3032(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3032(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3034(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.PulseRateBody, low))
        {
            Paint_use3032(p);// 
        }
    }
    private void SetPathData_g3034(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3034(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3034(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3036(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3036(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3036(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3036(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3038(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.PulseRateBody, unknown))
        {
            Paint_use3036(p);// 
        }
    }
    private void SetPathData_g3038(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3038(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3038(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use3040(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use3040(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3040(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3040(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3042(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.PulseRateBody, notavail))
        {
            Paint_use3040(p);// use793
        }
    }
    private void SetPathData_g3042(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3042(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3042(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 2 pulseRate
    private void Paint_g3044(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-120.488,-8.01634);
        Paint_g3026(p);// 4 high
        Paint_g3030(p);// 3 safe
        Paint_g3034(p);// 2 low
        Paint_g3038(p);// 1 unknown
        Paint_g3042(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3044(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3044(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3044(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3046(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3046(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3046(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3046(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3048(PaintAvatarInfo p) //Group: 4 high
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart, high))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,2.64583,0);
            Paint_use3046(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3048(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3048(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3048(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3050(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3050(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3050(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3050(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3052(PaintAvatarInfo p) //Group: 3 safe
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart, safe))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,1.32292,0);
            Paint_use3050(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3052(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3052(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3052(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3054(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3054(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3054(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3054(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3056(PaintAvatarInfo p) //Group: 2 low
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart, low))
        {
            Paint_use3054(p);// 
        }
    }
    private void SetPathData_g3056(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3056(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3056(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3058(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3058(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3058(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3058(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3060(PaintAvatarInfo p) //Group: 1 unknown
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart, unknown))
        {
            Paint_use3058(p);// 
        }
    }
    private void SetPathData_g3060(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3060(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3060(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3062(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3062(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3062(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3062(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3064(PaintAvatarInfo p) //Group: 0 notAvailable
    {
        if (IsVisible(p.TopicInfo.PulseRateHeart, notavail))
        {
            TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
            PushMatrix(1,0,0,1,-1.32292,0);
            Paint_use3062(p);// 
            _patientAvatarRenderer.Transformation = transformMatrixWas;
        }
    }
    private void SetPathData_g3064(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3064(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3064(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 1 heartRate
    private void Paint_g3066(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-113.873,-9.33926);
        Paint_g3048(p);// 4 high
        Paint_g3052(p);// 3 safe
        Paint_g3056(p);// 2 low
        Paint_g3060(p);// 1 unknown
        Paint_g3064(p);// 0 notAvailable
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3066(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3066(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3066(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    // Skill: default -> use 
    private void Paint_use3068(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3068(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3068(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3068(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

    private void Paint_g3070(PaintAvatarInfo p) // always hidden: '4 &lt;unused&gt;'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3072(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3072(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3072(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3072(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

    private void Paint_g3074(PaintAvatarInfo p) // always hidden: '3 &lt;unused&gt;'
    {
        // intentionally left blank (hidden)
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3076(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,2.64583,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3076(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3076(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3076(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3078(PaintAvatarInfo p) //Group: 2 down
    {
        if (IsVisible(p.TopicInfo.Orientation, down))
        {
            Paint_use3076(p);// 
        }
    }
    private void SetPathData_g3078(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3078(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3078(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use 
    private void Paint_use3080(PaintAvatarInfo p) //Use: 
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.32292,0);
        Paint_rect1546(p);
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    private void SetPathData_use3080(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3080(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3080(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3082(PaintAvatarInfo p) //Group: 1 up
    {
        if (IsVisible(p.TopicInfo.Orientation, up))
        {
            Paint_use3080(p);// 
        }
    }
    private void SetPathData_g3082(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3082(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3082(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    // Skill: default -> use use793
    private void Paint_use3084(PaintAvatarInfo p) //Use: use793
    {
        Paint_rect1546(p);
    }
    private void SetPathData_use3084(IRenderPath path)
    {
        SetPathData_rect1546(path);
    }
    private void SetPathColor_use3084(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
        SetPathColor_rect1546(p, colorReceiver);
    }
    private void SetPathOpacity_use3084(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
        SetPathOpacity_rect1546(p, opacityReceiver);
     }
    //----------------------------------------

      

    private void Paint_g3086(PaintAvatarInfo p) //Group: 0 perpendicular
    {
        if (IsVisible(p.TopicInfo.Orientation, perpendicular))
        {
            Paint_use3084(p);// use793
        }
    }
    private void SetPathData_g3086(IRenderPath path)
    { 
        // method not usable for groups
    }
    private void SetPathColor_g3086(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3086(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    //----------------------------------------

    //skill: default -> Group: 0 orientation
    private void Paint_g3088(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,-120.488,-9.33926);
        Paint_g3070(p);// 4 &lt;unused&gt;
        Paint_g3074(p);// 3 &lt;unused&gt;
        Paint_g3078(p);// 2 down
        Paint_g3082(p);// 1 up
        Paint_g3086(p);// 0 perpendicular
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g3088(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g3088(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g3088(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    //skill: default -> Group: test
    private void Paint_g1549(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,1.30084,62.8349);
        Paint_Marker(p);// Marker
        Paint_g791(p);// helper
        Paint_g1637(p);// 15 st
        Paint_g3911_8(p);// 14 cardiacOutput
        Paint_g3867_8(p);// 13 fiO2
        Paint_g3889_8(p);// 12 airwayPressure
        Paint_g3911(p);// 11 tidalVolume
        Paint_g3867(p);// 10 relaxation
        Paint_g3889(p);// 9 brainActivity
        Paint_g3933(p);// 8 bodyTemperature
        Paint_g1546(p);// 7 etCO2
        Paint_g2397(p);// 6 respirationRate
        Paint_g2349(p);// 5 cvp
        Paint_g823(p);// 4 spo2
        Paint_g3022(p);// 3 arterialPressure
        Paint_g3044(p);// 2 pulseRate
        Paint_g3066(p);// 1 heartRate
        Paint_g3088(p);// 0 orientation
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_g1549(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_g1549(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_g1549(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    //skill: default -> Group: Ebene 1
    private void Paint_layer1_0(PaintAvatarInfo p)
    {
        TransformMatrix transformMatrixWas =_patientAvatarRenderer.Transformation;
        PushMatrix(1,0,0,1,0,-161.533);
        Paint_g5680(p);// Controls
        Paint_g2086(p);// helper
        Paint_g6284(p);// rot45
        Paint_g6287(p);// rot135
        Paint_g7596(p);// rot0
        Paint_g1549(p);// test
        _patientAvatarRenderer.Transformation = transformMatrixWas;
    }
    //----------------------------------------
    private void SetPathData_layer1_0(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_layer1_0(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_layer1_0(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }

    //skill: default -> Group: 
    private void Paint_svg374(PaintAvatarInfo p)
    {
        Paint_layer1_0(p);// Ebene 1
    }
    //----------------------------------------
    private void SetPathData_svg374(IRenderPath path)
    { // not usable for groups
    }
    private void SetPathColor_svg374(PaintAvatarInfo p, ColorReceiver colorReceiver)
    {
    }
    private void SetPathOpacity_svg374(PaintAvatarInfo p, OpacityReceiver opacityReceiver)
    {
    }
    public void PaintSVG(PaintAvatarInfo p)
    {
        Paint_svg374(p);
    }
  }
}